{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"workspaceName": {
			"type": "string",
			"metadata": "Workspace name",
			"defaultValue": "ppsi-synapse-prod"
		},
		"AzureDatabricksLinkedService_accessToken": {
			"type": "secureString",
			"metadata": "Secure string for 'accessToken' of 'AzureDatabricksLinkedService'"
		},
		"data_lake_dev_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'data_lake_dev'"
		},
		"pps_edw_dev_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pps_edw_dev_db'"
		},
		"pps_edw_prod_db_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'pps_edw_prod_db'"
		},
		"ppsi-synapse-prod-WorkspaceDefaultSqlServer_connectionString": {
			"type": "secureString",
			"metadata": "Secure string for 'connectionString' of 'ppsi-synapse-prod-WorkspaceDefaultSqlServer'",
			"defaultValue": "Integrated Security=False;Encrypt=True;Connection Timeout=30;Data Source=tcp:ppsi-synapse-prod.sql.azuresynapse.net,1433;Initial Catalog=@{linkedService().DBName}"
		},
		"pps-synapse-dev-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ppsidatalakestg.dfs.core.windows.net"
		},
		"ppsi-synapse-prod-WorkspaceDefaultStorage_properties_typeProperties_url": {
			"type": "string",
			"defaultValue": "https://ppsidatalakestg.dfs.core.windows.net"
		},
		"Authorised_Representative_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Broker_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Brokerage_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Commission_Statement_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Country_Codes_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Daily_Holdings_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Deal_New_file_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Distribution_Component_Master_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Distribution_Component_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Distriution_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Entity_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Fee_Statement_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Fund_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Fund_Prices_New_file_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Initial_Policy_Fund_Ratio_New_file_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Load_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Payee_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Policy_Beneficiaries_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Policy_Broker_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Policy_Cession_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Policy_Lives_Assured_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Policy_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Prduct_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Product_Fund_Accounts_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Reg28_Asset_Allocations_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Reg28_Policy_Fund_Allocations_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Reg_28_Policy_Allocations_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Reg_28_Quarterly_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Standing_Instruction_Allocations_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Standing_Instruction_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Tax_Free_Savings_Contributions_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Transaction_Fee_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Transaction_Subtypes_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Transactions_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Unit_Holder_Bank_Details_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Unit_Holder_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		},
		"Unit_Holder_Related_Party_New_File_properties_typeProperties_scope": {
			"type": "string",
			"defaultValue": "/subscriptions/7ec3a55c-45cd-42d5-ac73-d0c9959faf51/resourceGroups/pps-dev/providers/Microsoft.Storage/storageAccounts/ppsdatalakedev"
		}
	},
	"variables": {
		"workspaceId": "[concat('Microsoft.Synapse/workspaces/', parameters('workspaceName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_authorised_representative_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_authorised_representative_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AuthorisedRepresentativeSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityAuthorisedRepresentativeStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"LoadToEntityAuthorisedRepresentativeStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_authorised_representative]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_authorised_representative_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AuthorisedRepresentativeSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"AuthorisedRepresentativeEntityTable": {},
									"LoadToAuthorisedRepresentativeAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"AuthorisedRepresentativeSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToAuthorisedRepresentativeAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteAttributes StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_authorised_representative_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_authorised_representative_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"AuthorisedRepresentativeSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedAuthorisedRepresentativeData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"AuthorisedRepresentativeSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedAuthorisedRepresentativeData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'authorised representative/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "AuthRepID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "AuthorisedRepresentative20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Authorised Representative Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "authorised representative"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_authorised_representative"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_authorised_representative_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:22Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_authorised_representative_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_authorised_representative_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_authorised_representative_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_broker_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_broker_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BrokerSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityBrokerStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"BrokerSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToEntityBrokerStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_broker]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_broker_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BrokerSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"BrokerEntityTable": {},
									"LoadToBrokerAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"BrokerSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToBrokerAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteAttributes StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_broker_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_broker_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BrokerSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedBrokerData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"BrokerSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedBrokerData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'broker/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "BrokerCode",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Broker20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Broker Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "broker"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_broker"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_broker_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:26Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_broker_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_broker_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_broker_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_brokerage_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_brokerage_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BrokerageSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityBrokerageStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"LoadToEntityBrokerageStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_brokerage]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_brokerage_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BrokerageSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"BrokerageEntityTable": {},
									"LoadToBrokerageAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"BrokerageSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToBrokerageAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteAttributes StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_brokerage_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_brokerage_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"BrokerageSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedBrokerageData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedBrokerageData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'brokerage/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "BrokerageCode",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "BrokerageDelimeted.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Brokerage Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "brokerage"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_brokerage"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_brokerage_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:31Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_brokerage_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_brokerage_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_brokerage_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_entity_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_entity_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EntitySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityEntityStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"EntitySource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToEntityEntityStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_entity]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EntitySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"EntityEntityTable": {},
									"LoadToEntityAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteAttributes StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_entity_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 2,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_entity_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"EntitySource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedEntityData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"EntitySource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedEntityData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'entity/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "EntityID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Entity20221209004159.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Entity Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "entity"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_entity"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_entity_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:38Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_entity_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_entity_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_fund_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_fund_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityFundStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteAttributes Stored Proc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_fund_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_fund_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"LoadToFundAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"FundSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToFundAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_fund_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedFundData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"FundSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedFundData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'fund/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "FundID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "all_fund_base.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Fund Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "fund"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_fund"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_fund_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:44Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_fund_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_fund_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_fund_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_policy_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_policy_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"UnitHolderEntityTable": {},
									"ProductEntityTable": {},
									"LoadToEntityPolicyStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"PolicySource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToEntityPolicyStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"DefaultAnnuityReferenceTable": {},
									"LoadToPolicyAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"PolicySource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToPolicyAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteAttributes StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_policy_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_policy_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicySource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedPolicyData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"PolicySource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedPolicyData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreatePlaceholders Product_UnitHolder",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_entity_policy_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders Product_UnitHolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders Product_UnitHolder",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Policy20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_policy"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_policy_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:51Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_policy_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_policy_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_entity_policy_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_product_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_product_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ProductSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityProductStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"LoadToEntityProductStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_product_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ProductSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"ProductEntityTable": {},
									"LoadToProductAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"ProductSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToProductAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_Product_Attributes_Stored_Proc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_product_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_product_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ProductSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedProductData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedProductData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'product/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "ProductID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Product20220923081213.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Product Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "product"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_product"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_product_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_product_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_product_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_product_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_unit_holder_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToEntity Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_entity_unit_holder_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityUnitHolderStage": {
										"TableName": {
											"value": "@variables('EntityTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								},
								"linkedServiceParameters": {
									"UnitHolderSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToEntityUnitHolderStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('EntityTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteEntity StoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToEntity Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToAttributes Staging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteEntity StoredProc",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_unit_holder_attributes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"UnitHolderEntityTable": {},
									"LoadToUnitHolderAttributesStage": {
										"TableName": {
											"value": "@variables('AttributesTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"UnitHolderSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToUnitHolderAttributesStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('AttributesTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "Load_Unit_Holder_Attributes_Stored_Proc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToAttributes Staging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_dim_all_unit_holder_attributes]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_entity_unit_holder_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedUnitHolderData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"UnitHolderSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedUnitHolderData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('EntityTableName')",
									"type": "Expression"
								},
								"key_column": "UnitHolderID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'unit holder/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "UnitHolder20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Unit Holder Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "unit holder"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"EntityTableName": {
						"type": "String",
						"defaultValue": "entity_all_unit_holder"
					},
					"AttributesTableName": {
						"type": "String",
						"defaultValue": "dim_all_unit_holder_attributes"
					}
				},
				"folder": {
					"name": "EDW/Entity-Attributes"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:24:58Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_entity_unit_holder_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_unit_holder_attributes_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_entity_unit_holder_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_fund_distribution_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_fund_distribution]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_fund_distribution_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"ExportInvalidData": {},
									"LoadToDistributionStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_distribution_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedDistributionData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedDistributionData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'fund distribution/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_fund_distribution_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "DistributionNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Distribution20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Fund Distribution Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_fund_distribution"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "fund distribution"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:03Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_fund_distribution_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_distribution_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_fund_distribution_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_fund_prices_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_fund_prices]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_fund_prices_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InitialFundPricesSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"ExportInvalidData": {},
									"LoadToFundPricesStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_fund_prices_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundPricesSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedFundPricesData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedFundPricesData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'fund prices/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_fund_prices_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InitialPolicyFundRatioSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "FundID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "PriceDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "PriceShort.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "PPS Fund Prices Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "fund prices"
					},
					"ExtractFileDirectory": {
						"type": "String"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_fund_prices"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:06Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_fund_prices_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_fund_prices_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_fund_prices_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_initial_policy_fund_ratio_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_initial_policy_fund_ratio]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_initial_policy_fund_ratio_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InitialPolicyFundRatioSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"FundEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToInitialPolicyFundRatioStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_initial_policy_fund_ratio_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InitialPolicyFundRatioSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedInitialPolicyFundRatioData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedInitialPolicyFundRatioData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'initial policy fund ratio/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_initial_policy_fund_ratio_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"InitialPolicyFundRatioSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "RuleEffectiveDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "InitialPolicyFundRatio20220922233723.txt"
					}
				},
				"variables": {
					"BatchId": {
						"type": "String"
					},
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "PPS Initial Policy Fund Ratio Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_initial_policy_fund_ratio"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "initial policy fund ratio"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:10Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_initial_policy_fund_ratio_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_initial_policy_fund_ratio_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_initial_policy_fund_ratio_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_load_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_load_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"LoadSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadToEntityLoadStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidRecord": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_load]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_load_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"LoadSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedLoadData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedLoadData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'load/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "LoadID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Load20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Load Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_load"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "load"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:12Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_load_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_load_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_beneficiaries_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteGenProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToGenStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_beneficiaries]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToGenStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_beneficiaries_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('GeneralBatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyBeneficiariesSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToPolicyBeneficiariesStage": {
										"TableName": {
											"value": "@variables('GeneralStageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateGenBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateDelBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_beneficiaries_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyBeneficiariesSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedPolicyBeneficiariesData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedPolicyBeneficiariesData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy beneficiaries/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_beneficiaries_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('GeneralBatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyBeneficiariesSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('GeneralBatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('GeneralStageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "BeneficiaryID",
								"key_column3": "RuleEffectiveDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateGenBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GeneralBatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreateDelBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DeletedBatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteDelProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToDelStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_beneficiaries_deleted]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('DeletedBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToDelStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_beneficiaries_deleted_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('DeletedBatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyBeneficiariesSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToPolicyBeneficiariesStage": {
										"TableName": {
											"value": "@variables('DeletedStageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Beneficiary_Delete_Example.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Beneficiaries Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"GeneralBatchId": {
						"type": "String"
					},
					"DeletedBatchId": {
						"type": "String"
					},
					"GeneralStageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_beneficiaries"
					},
					"DeletedStageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_beneficiaries_deleted"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy beneficiaries"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:15Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_beneficiaries_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_beneficiaries_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_beneficiaries_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_beneficiaries_deleted_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_broker_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_broker]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Broker",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_broker_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyBrokerSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"ExportInvalidData": {},
									"LoadToPolicyBrokerStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_broker_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyBrokerSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedPolicyBrokerData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedPolicyBrokerData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy broker/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_broker_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicBrokerSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadBrokerEntity": {},
									"LoadPolicyEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "RuleEffectiveDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Broker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_broker]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "PolicyBroker20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Broker Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_broker"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy broker"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:18Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_broker_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_broker_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_broker_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_cession_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_cession]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Transactions",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_cession_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyCessionSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"TransactionEntityTable": {},
									"FromUnitHolderEntityTable": {},
									"ToUnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToPolicyCessionStage": {
										"TableName": "fact_policy_cession"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_cession_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyCessionSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedPolicyCessionData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedPolicyCessionData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy cession/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_cession_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyCessionSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadPolicyEntity": {},
									"LoadFromUnitHolderEntity": {},
									"LoadToUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "CessionDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Transactions",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fund_transactions]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "PolicyCession20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Cession Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_cession"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy cession"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:21Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_cession_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_cession_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_cession_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_deal_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_deal]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Load",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_deal_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DealSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"LoadFactTable": {},
									"ExportInvalidData": {},
									"LoadToDealStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_deal_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DealSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedDealData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedDealData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy deal/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_deal_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DealSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {},
									"LoadLoadFactTable": {
										"TableName": "fact_load"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "DealTransactionNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "StartDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_load]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Deal20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Deal Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_deal"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy deal"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:24Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_deal_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_deal_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_deal_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_distribution_component_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_distribution_component]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_fund_distribution_component_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionComponentSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"FundEntityTable": {},
									"DistributionFactTable": {},
									"DistributionComponentMasterReferenceTable": {},
									"ExportInvalidData": {},
									"LoadToFactDistributionComponentStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_distribution_component_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionComponentSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedDistributionComponentData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedDistributionComponentData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy distribution component/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_fund_distribution_component_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactDistributionComponentSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {},
									"LoadFundEntity": {},
									"LoadDistroMaster": {
										"TableName": "distribution_component_master"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "DistributionNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "PolicyNumber"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "DistributionComponent20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Distribution Component Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_distribution_component"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy distribution component"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:28Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_fund_distribution_component_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_distribution_component_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_fund_distribution_component_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_fee_statement_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fee_statement]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_fee_statement_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FeeStatementComponentSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"TransactionEntityTable": {},
									"ExportInvalidData": {},
									"LoadToFactPolicyFeeStaementStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"LoadToFactPolicyFeeStaementStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('StageTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_fee_statement_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FeeStatementSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedFeeStatementData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedFeeStatementData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy fee statement/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_fee_statement_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactFeeStatementSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "TransactionDate",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "FeeStatement20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Fee Statement Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_fee_statement"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy fee statement"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T10:00:37Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_fee_statement_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_fee_statement_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_fee_statement_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_fund_commission_statement_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Broker",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Brokerage",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_fund_commission_statement_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CommissionStatementSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"TransactionsTable": {},
									"BrokerEntityTable": {},
									"BrokerageEntityTable": {},
									"LoadToFundTransactionsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fund_commission_statement]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_fund_commision_statement_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CommissionStatementSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {},
									"LoadBrokerEntity": {},
									"LoadBrokerageEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_fund_comission_statement_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CommissionStatementSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedCommissionStatementData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedCommissionStatementData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy fund commission statement/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "TransactionNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Brokerage",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_brokerage]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Broker",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_broker]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "CommStatementSmall.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Fund Commision Statement Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_fund_commission_statement"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy fund commission statement"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T09:20:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_fund_commission_statement_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_fund_commision_statement_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_fund_comission_statement_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_fund_holdings_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_fund_holdings_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DailyHoldingsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fund_holdings]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_fund_holdings_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DailyHoldingsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToDailyHoldingsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_fund_holdings_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DailyHoldingsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedDailyHoldingsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedDailyHoldingsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy fund holdings/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "FundID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "HoldingsDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "DailyHoldingsShort.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Fund Holdings Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_fund_holdings"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy fund holdings"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_fund_holdings_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_fund_holdings_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_fund_holdings_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_fund_transaction_fee_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fund_transaction_fee]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Load",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_fund_transaction_fee_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TransactionFeeSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"FundEntityTable": {},
									"LoadFactTable": {},
									"ExportInvalidData": {},
									"LoadToFactTransactionFeeStage": {
										"TableName": "fact_policy_fund_transaction_fee"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_fund_transaction_fee_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactTransactionFeeSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportFactTransactionFeeData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportFactTransactionFeeData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy fund transaction fee/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_fund_transaction_fee_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactTransactionFeeSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {},
									"LoadFundEntity": {},
									"LoadLoadFact": {
										"TableName": "fact_load"
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "FactFundFeeTransactionKey",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Load",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_load]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "TransactionFee20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Fund Transaction Fee Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_fund_transaction_fee"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy fund transaction fee"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T10:00:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_fund_transaction_fee_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_fund_transaction_fee_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_fund_transaction_fee_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_fund_transactions_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToGenStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_fund_transactions_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('GeneralBatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundTransactionsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"TransactionSubtypesReferenceTable": {
										"TableName": "transaction_subtypes"
									},
									"LoadToFundTransactionsStage": {
										"TableName": "fact_policy_fund_transactions"
									},
									"ExportInvalidData": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "ExecuteGenProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToGenStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fund_transactions]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_fund_transactions_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('GeneralBatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundTransactionsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateGenBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateDelBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_fund_transactions_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundTransactionsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedFundTransactionsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedFundTransactionsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy fund transactions/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('GeneralBatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('GenStageTableName')",
									"type": "Expression"
								},
								"key_column": "FundTransactionNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateGenBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GeneralBatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreateDelBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DeletedBatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "LoadToDelStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_fund_transactions_deleted_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('DeletedBatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FundTransactionsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"TransactionSubtypesReferenceTable": {
										"TableName": "transaction_subtypes"
									},
									"LoadToFundTransactionsStage": {
										"TableName": "fact_policy_fund_transactions_reversal"
									},
									"ExportInvalidData": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "None",
							"cacheSinks": {
								"firstRowOnly": true
							}
						}
					},
					{
						"name": "ExecuteDelProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToDelStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_fund_transactions_reversal]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('DeletedBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "FundTransactionDeletedShort.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Fund Transactions Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"GeneralBatchId": {
						"type": "String"
					},
					"DeletedBatchId": {
						"type": "String"
					},
					"GenStageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_fund_transactions"
					},
					"DelStageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_fund_transactions_reversal"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy fund transactions"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:51Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_fund_transactions_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_fund_transactions_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_fund_transactions_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_fund_transactions_deleted_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_lives_assured_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteGenProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToGenStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_lives_assured]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToGenStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_lives_assured_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('GeneralBatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyLivesAssuredSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToInitialPolicyFundRatioStage": {
										"TableName": {
											"value": "@variables('GenStageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateGenBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateDelBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_lives_assured_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyLivesAssuredSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedPolicyLivesAssuredData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedPolicyLivesAssuredData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy lives assured/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_lives_assured_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('GeneralBatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyLivesAssuredSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('GeneralBatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('GenStageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "RuleEffectiveDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateGenBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "GeneralBatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreateDelBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "DeletedBatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteDelProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToDelStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_lives_assured_deleted]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('DeletedBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToDelStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_lives_assured_deleted_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('DeletedBatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyLivesAssuredSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToInitialPolicyFundRatioStage": {
										"TableName": {
											"value": "@variables('DelStageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('GeneralBatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "LivesAssuredDeleted.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "PPS Policy Lives Assured Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"GeneralBatchId": {
						"type": "String"
					},
					"DeletedBatchId": {
						"type": "String"
					},
					"GenStageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_lives_assured"
					},
					"DelStageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_lives_assured_deleted"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy lives assured"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:25:54Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_lives_assured_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_lives_assured_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_lives_assured_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_lives_assured_deleted_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_payee_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_payee]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_payee_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PayeeSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToPayeeStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_payee_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PayeeSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedPayeeData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedPayeeData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy payee/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_payee_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PayeeSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PayeeKey",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Payee20220922233723 (1).txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Payee Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_payee"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy payee"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T11:09:49Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_payee_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_payee_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_payee_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_standing_instruction_allocations_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_standing_instruction_allocations]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc FromFund",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc ToFund",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_standing_instruction_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StandingInstructionAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"FromFundEntityTable": {},
									"UnitHolderEntityTable": {},
									"ToFundEntityTable": {},
									"StandingInstructionFactTable": {},
									"ExportInvalidData": {},
									"LoadToStandingInstructionAllocationsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_standing_instruction_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StandingInstructionAllocationsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedStandingInstructionAllocationsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedStandingInstructionAllocationsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_standing_instruction_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StandingInstructionAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {},
									"StageLoadToFundEntity": {},
									"StageLoadFromFundEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "RuleEffectiveDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc FromFund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc ToFund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy standing instruction allocations/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "SIAllocation20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Policy Standing Instruction Allocations Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_standing_instruction_allocations"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy standing instruction allocations"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:04Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_standing_instruction_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_standing_instruction_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_standing_instruction_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_policy_standing_instruction_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_policy_standing_instruction]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_standing_instruction_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StandingInstructionAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToStandingInstructionAllocationsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_standing_instruction_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StandingInstructionSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedStandingInstructionData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedStandingInstructionData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy standing instruction/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_policy_standing_instruction_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"StandingInstructionAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "RuleEffectiveDate",
								"key_column3": "SequenceNumber"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "StandingInstructionFullSeq.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "Policy Standing Instruction Static Data"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_policy_standing_instruction"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy standing instruction"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:09Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_standing_instruction_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_standing_instruction_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_policy_standing_instruction_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_product_fund_accounts_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStage",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_product_fund_accounts]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStage",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_product_fund_accounts_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ProductFundAccountsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"ProductEntityTable": {},
									"ExportInvalidData": {},
									"LoadToProductFundAccountsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ProductFundAccountsSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToProductFundAccountsStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('StageTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_product_fund_accounts_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ProductFundAccountsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedProductFundAccountsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ProductFundAccountsSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedProductFundAccountsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'product fund accounts/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_product_fund_accounts_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"ProductFundAccountsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadFundEntity": {}
								},
								"linkedServiceParameters": {
									"ProductFundAccountsSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "ProductID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "FundID",
								"key_column3": "RuleEffectiveDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "ProductFund20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Product Fund Acounts Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_product_fund_accounts"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "product fund accounts"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:14Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_product_fund_accounts_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_product_fund_accounts_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_product_fund_accounts_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_reg28_fund_allocations_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_reg28_fund_allocations]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_reg28_fund_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactReg28AssetAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"FundEntityTable": {},
									"ExportInvalidData": {},
									"LoadToFactReg28AssetAllocationsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_reg28_fund_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactReg28AssetAllocationsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedFactReg28AssetAllocationsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedFactReg28AssetAllocationsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'reg28 fund allocations/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_reg28_fund_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactReg28AssetAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadFundEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "JSECode",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "QuarterEndDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Reg28AssetAlloc20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Reg28 Fund Allocations Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_reg28_fund_allocations"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "reg28 fund allocations"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:17Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_reg28_fund_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_reg28_fund_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_reg28_fund_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_reg28_policy_allocations_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_reg28_policy_allocations]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_reg28_policy_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28PolicyAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToPolicyAllocationsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectoy",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_reg28_policy_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28PolicyAllocationsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedReg28PolicyAllocationsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedReg28PolicyAllocationsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectoy",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'reg28 policy allocations/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_reg28_policy_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28PolicyAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "SourceDataQuarterEndDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Reg28Policy20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Reg28 Policy Allocations Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_reg28_policy_allocations"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "reg28 policy allocations"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:23Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_reg28_policy_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_reg28_policy_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_reg28_policy_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_reg28_policy_fund_allocations_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_reg28_policy_fund_allocations]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Fund",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_reg28_policy_fund_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28PolicyFundAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"UnitHolderEntityTable": {},
									"FundEntityTable": {},
									"ExportInvalidData": {},
									"LoadToReg28PolicyFundAllocationsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_reg28_policy_fund_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28PolicyFundAllocationsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedReg28PolicyFundAllocationsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"ExportExtractedReg28PolicyFundAllocationsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'reg28 policy fund allocations/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_reg28_policy_fund_allocations_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28PolicyFundAllocationsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {},
									"LoadUnitHolderEntity": {},
									"LoadFundEntity": {}
								},
								"linkedServiceParameters": {
									"Reg28PolicyFundAllocationsSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "PolicyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "FundID",
								"key_column3": "SourceDataQuarterEndDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Fund",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_fund]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Reg28PolicyFundSmall.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Reg28 Policy Fund Allocations Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_reg28_policy_fund_allocations"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "reg28 policy fund allocations"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:30Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_reg28_policy_fund_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_reg28_policy_fund_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_reg28_policy_fund_allocations_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_reg28_policy_quarterly_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_reg28_policy_quarterly]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc Product",
								"dependencyConditions": [
									"Completed"
								]
							},
							{
								"activity": "ExecuteStoredProc Policy",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_reg28_policy_quarterly_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28QuarterlySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyEntityTable": {},
									"ProductEntityTable": {},
									"ExportInvalidData": {},
									"LoadToReg28QuarterlyStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_reg28_policy_quarterly_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28QuarterlySource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedReg28QuarterlyData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"Reg28QuarterlySource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedReg28QuarterlyData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'reg28 policy quarterly/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_reg28_policy_quarterly_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"Reg28QuarterlySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadProductEntity": {},
									"LoadPolicyEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "ClientAccGrpNo",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "QuarterEndDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc Product",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_product]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "ExecuteStoredProc Policy",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_policy]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "Reg28Quarterly20230106220855.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Reg28 Policy Quarterly Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_reg28_policy_quarterly"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "reg28 policy quarterly"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:35Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_reg28_policy_quarterly_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_reg28_policy_quarterly_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_reg28_policy_quarterly_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_unit_holder_bank_details_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_unit_holder_bank_details]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_unit_holder_bank_details_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderBankDetailsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToUnitHolderBankDetailsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"UnitHolderBankDetailsSource": {
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"LoadToUnitHolderBankDetailsStage": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('StageTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_unit_holder_bank_details_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderBankDetailsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedUnitHolderBankDetailsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"UnitHolderBankDetailsSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedUnitHolderBankDetailsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'unit holder bank details/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_unit_holder_bank_details_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderBankDetailsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "UnitHolderBankKey",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "UHBankDetail20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Unit Holder Bank Details Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_unit_holder_bank_details"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "unit holder bank details"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:41Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_unit_holder_bank_details_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_unit_holder_bank_details_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_unit_holder_bank_details_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_unit_holder_related_party_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_unit_holder_related_party]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_unit_holder_related_party_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderRelatedPartySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToUnitHolderRelatedPartyStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_unit_holder_related_party_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderRelatedPartySource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedUnitHolderRelatedPartyData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"UnitHolderRelatedPartySource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedUnitHolderRelatedPartyData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'unit holder related party/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_unit_holder_related_party_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"UnitHolderRelatedPartySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "RelatedPartyNumber",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "UHRelatedParty20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Unit Holder Related Party Static Data"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_unit_holder_related_party"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "unit holder related party"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:45Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_unit_holder_related_party_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_unit_holder_related_party_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_unit_holder_related_party_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_fact_unit_holder_tax_free_savings_contributions_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "ExecuteStoredProc",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "LoadToStaging",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_fact_unit_holder_tax_free_savings_contributions]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "LoadToStaging",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExecuteStoredProc UnitHolder",
								"dependencyConditions": [
									"Completed"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_unit_holder_tax_free_savings_contributions_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									},
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactTaxFreeSavingsContributionsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"UnitHolderEntityTable": {},
									"ExportInvalidData": {},
									"LoadToFactTaxFreeSavingsContributionsStage": {
										"TableName": {
											"value": "@variables('StageTableName')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "CreateFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							},
							{
								"activity": "CreateBatchId",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_unit_holder_tax_free_savings_contributions_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactTaxFreeSavingsContributionsSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedFactTaxFreeSavingsContributionsData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								},
								"linkedServiceParameters": {
									"FactTaxFreeSavingsContributionsSource": {
										"schemaLinkedService": {
											"LandingFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"LandingFileDirectory": {
												"value": "@variables('LandingFileDirectory')",
												"type": "Expression"
											}
										}
									},
									"ExportExtractedFactTaxFreeSavingsContributionsData": {
										"linkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										},
										"schemaLinkedService": {
											"ExtractFileName": {
												"value": "@pipeline().parameters.SourceFileName",
												"type": "Expression"
											},
											"ExtractFileDirectory": {
												"value": "@variables('ExtractFileDirectory')",
												"type": "Expression"
											}
										},
										"rejectedDataLinkedService": {
											"ExtractFileName": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CreateFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'unit holder tax free savings contributions/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					},
					{
						"name": "CreatePlaceholders",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_placeholder_unit_holder_tax_free_savings_contributions_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"BatchId": {
										"value": "'@{variables('BatchId')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"FactTaxFreeSavingsContributionsSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"LoadUnitHolderEntity": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "WriteToDatabricks",
						"type": "DatabricksNotebook",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"notebookPath": "/Shared/Notebooks/etl/stage/LoadDatalake",
							"baseParameters": {
								"batch_id": {
									"value": "@variables('BatchId')",
									"type": "Expression"
								},
								"file_name": {
									"value": "@pipeline().parameters.SourceFileName",
									"type": "Expression"
								},
								"is_atomic": {
									"value": "@variables('IsAtomic')",
									"type": "Expression"
								},
								"table": {
									"value": "@variables('StageTableName')",
									"type": "Expression"
								},
								"key_column": "UnitHolderID",
								"data_source": {
									"value": "@variables('DataSource')",
									"type": "Expression"
								},
								"provider": {
									"value": "@variables('Provider')",
									"type": "Expression"
								},
								"file_directory": {
									"value": "@variables('ExtractFileDirectory')",
									"type": "Expression"
								},
								"key_column2": "FiscalYearStartDate",
								"key_column3": "FiscalYearEndDate"
							}
						},
						"linkedServiceName": {
							"referenceName": "AzureDatabricksLinkedService",
							"type": "LinkedServiceReference"
						}
					},
					{
						"name": "CreateBatchId",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "BatchId",
							"value": {
								"value": "@guid()",
								"type": "Expression"
							}
						}
					},
					{
						"name": "ExecuteStoredProc UnitHolder",
						"type": "SqlServerStoredProcedure",
						"dependsOn": [
							{
								"activity": "CreatePlaceholders",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"storedProcedureName": "[stage].[load_entity_all_unit_holder]",
							"storedProcedureParameters": {
								"BatchId": {
									"value": {
										"value": "@variables('BatchId')",
										"type": "Expression"
									},
									"type": "String"
								},
								"DataSource": {
									"value": {
										"value": "@variables('DataSource')",
										"type": "Expression"
									},
									"type": "String"
								},
								"FileName": {
									"value": {
										"value": "@pipeline().parameters.SourceFileName",
										"type": "Expression"
									},
									"type": "String"
								},
								"IsAtomic": {
									"value": {
										"value": "@variables('IsAtomic')",
										"type": "Expression"
									},
									"type": "Boolean"
								},
								"Provider": {
									"value": {
										"value": "@variables('Provider')",
										"type": "Expression"
									},
									"type": "String"
								}
							}
						},
						"linkedServiceName": {
							"referenceName": "pps_edw_dev_db",
							"type": "LinkedServiceReference"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "TFSContributions20220922233723.txt"
					}
				},
				"variables": {
					"IsAtomic": {
						"type": "String",
						"defaultValue": "false"
					},
					"Provider": {
						"type": "String",
						"defaultValue": "PPS"
					},
					"DataSource": {
						"type": "String",
						"defaultValue": "Unit Holder Tax Free Savings Contributions Static Data"
					},
					"StageTableName": {
						"type": "String",
						"defaultValue": "fact_unit_holder_tax_free_savings_contributions"
					},
					"BatchId": {
						"type": "String"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "unit holder tax free savings contributions"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Fact"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:47Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_unit_holder_tax_free_savings_contributions_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_unit_holder_tax_free_savings_contributions_dataflow')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_placeholder_unit_holder_tax_free_savings_contributions_dataflow')]",
				"[concat(variables('workspaceId'), '/linkedServices/AzureDatabricksLinkedService')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_reference_country_codes_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToReference",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_country_codes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CountryCodesSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"CountryCodesReferenceTable": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"LoadToCountryCodes": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_country_codes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"CountryCodesSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportExtractedData": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'country codes/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "CountryCode20220922233723.txt"
					}
				},
				"variables": {
					"ReferenceTableName": {
						"type": "String",
						"defaultValue": "countr_codes"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "country codes"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Reference"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:52Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_country_codes_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_country_codes_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_reference_distribution_component_master_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToReference",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_distribution_component_master_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionComponentMasterSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"DistributionComponentMasterReferenceTable": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"LoadToDistributionComponentMaster": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"LoadToDistributionComponentMaster": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('ReferenceTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_distribution_component_master_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"DistributionComponentMasterSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportDistributionComponentMaster": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'distribution component master/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "DistributionComponentMaster20230109000642.txt"
					}
				},
				"variables": {
					"ReferenceTableName": {
						"type": "String",
						"defaultValue": "distribution_component_master"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "distribution component master"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Reference"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:54Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_distribution_component_master_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_distribution_component_master_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_reference_policy_default_annuity_source_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToReference",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_policy_default_annuity_source_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyDefaultAnnuitySourceSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"PolicyDefaultAnnuitySourceReferenceTable": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"LoadToPolicyDefaultAnnuitySource": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"LoadToPolicyDefaultAnnuitySource": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('ReferenceTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_policy_default_annuity_source_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"PolicyDefaultAnnuitySourceSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportPolicyDefaultAnnuitySource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'policy default annuity source/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "PolicyDefaultAnnuitySource20220922233723.txt"
					}
				},
				"variables": {
					"ReferenceTableName": {
						"type": "String",
						"defaultValue": "policy_default_annuity_source"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "policy default annuity source"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Reference"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:26:56Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_policy_default_annuity_source_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_policy_default_annuity_source_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_reference_transaction_subtypes_pipeline')]",
			"type": "Microsoft.Synapse/workspaces/pipelines",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"activities": [
					{
						"name": "LoadToReference",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "ExtractSourceData",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_sql_transaction_subtypes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"FileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									},
									"FileDirectory": {
										"value": "'@{variables('ExtractFileDirectory')}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TransactionSubtypesSource": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									},
									"TransactionSubtypesReferenceTable": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"LoadToTransactionSubtypes": {
										"TableName": {
											"value": "@variables('ReferenceTableName')",
											"type": "Expression"
										}
									},
									"ExportInvalidData": {}
								},
								"linkedServiceParameters": {
									"LoadToTransactionSubtypes": {
										"schemaLinkedService": {
											"TableName": {
												"value": "@variables('ReferenceTableName')",
												"type": "Expression"
											}
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "ExtractSourceData",
						"type": "ExecuteDataFlow",
						"dependsOn": [
							{
								"activity": "SetFileDirectory",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "edw_extract_transaction_subtypes_dataflow",
								"type": "DataFlowReference",
								"parameters": {
									"ExtractFileName": {
										"value": "'@{pipeline().parameters.SourceFileName}'",
										"type": "Expression"
									}
								},
								"datasetParameters": {
									"TransactionSubtypesSource": {
										"LandingFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"LandingFileDirectory": {
											"value": "@variables('LandingFileDirectory')",
											"type": "Expression"
										}
									},
									"ExportTransactionSubtypes": {
										"ExtractFileName": {
											"value": "@pipeline().parameters.SourceFileName",
											"type": "Expression"
										},
										"ExtractFileDirectory": {
											"value": "@variables('ExtractFileDirectory')",
											"type": "Expression"
										}
									}
								}
							},
							"staging": {},
							"integrationRuntime": {
								"referenceName": "KeepAlive-Runtime",
								"type": "IntegrationRuntimeReference"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "SetFileDirectory",
						"type": "SetVariable",
						"dependsOn": [],
						"userProperties": [],
						"typeProperties": {
							"variableName": "ExtractFileDirectory",
							"value": {
								"value": "@concat(\n    'trasaction subtypes/', \n    formatDateTime(utcNow(), 'yyyy'), \n    '/',\n    formatDateTime(utcNow(), 'MM'), \n    '/',\n    formatDateTime(utcNow(), 'dd')\n)",
								"type": "Expression"
							}
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {},
					"cancelAfter": {}
				},
				"parameters": {
					"SourceFileName": {
						"type": "string",
						"defaultValue": "TransactionSubType20220922233723.txt"
					}
				},
				"variables": {
					"ReferenceTableName": {
						"type": "String",
						"defaultValue": "transaction_subtypes"
					},
					"LandingFileDirectory": {
						"type": "String",
						"defaultValue": "transaction subtypes"
					},
					"ExtractFileDirectory": {
						"type": "String"
					}
				},
				"folder": {
					"name": "EDW/Reference"
				},
				"annotations": [],
				"lastPublishTime": "2023-04-06T08:27:01Z"
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/dataflows/edw_sql_transaction_subtypes_dataflow')]",
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]",
				"[concat(variables('workspaceId'), '/dataflows/edw_extract_transaction_subtypes_dataflow')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_database_reference')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "TransactionSubTypeCode",
						"type": "varchar"
					},
					{
						"name": "TransactionSubTypeName",
						"type": "varchar"
					},
					{
						"name": "TransactionTypeCode",
						"type": "varchar"
					},
					{
						"name": "TransactionTypeName",
						"type": "varchar"
					},
					{
						"name": "RefType",
						"type": "varchar"
					},
					{
						"name": "TransactionTypeKey",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "reference",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_database_stage')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "UnitHolderId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ProductId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FundId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PolicyId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LoadId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PolicyNumber",
						"type": "varchar"
					},
					{
						"name": "PolicyTransactionNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FeeCode",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "FeeDescription",
						"type": "varchar"
					},
					{
						"name": "FeePercentage",
						"type": "decimal",
						"precision": 20,
						"scale": 5
					},
					{
						"name": "FundTransactionNumber",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "Amount",
						"type": "decimal",
						"precision": 20,
						"scale": 5
					},
					{
						"name": "ReversalIndicator",
						"type": "varchar"
					},
					{
						"name": "OldTransactionNumber",
						"type": "varchar"
					},
					{
						"name": "FactFundFeeTransactionKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ProductKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "PolicyKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "UnitHolderKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LoadKey",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_database_store')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"TableName": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Action",
						"type": "smallint",
						"precision": 5
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "LoadCode",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "LoadDescription",
						"type": "varchar"
					},
					{
						"name": "LoadValue",
						"type": "decimal",
						"precision": 20,
						"scale": 5
					},
					{
						"name": "SlabNumber",
						"type": "int",
						"precision": 10
					},
					{
						"name": "SlabFromAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 5
					},
					{
						"name": "SlabToAmount",
						"type": "decimal",
						"precision": 20,
						"scale": 5
					},
					{
						"name": "LoadCalcMethod",
						"type": "varchar"
					},
					{
						"name": "LoadType",
						"type": "varchar"
					},
					{
						"name": "LoadBasis",
						"type": "varchar"
					},
					{
						"name": "LoadKey",
						"type": "bigint",
						"precision": 19
					}
				],
				"typeProperties": {
					"schema": "store",
					"table": {
						"value": "@dataset().TableName",
						"type": "Expression"
					}
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_authorised_representative')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "AuthRepCode",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "AuthRepName",
						"type": "varchar"
					},
					{
						"name": "HashKey",
						"type": "varchar"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_authorised_representative"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_broker')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "BrokerCode",
						"type": "varchar"
					},
					{
						"name": "BrokerageCode",
						"type": "varchar"
					},
					{
						"name": "BrokerName",
						"type": "varchar"
					},
					{
						"name": "IsValid",
						"type": "bit"
					},
					{
						"name": "Origin",
						"type": "varchar"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_broker"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_brokerage')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "BrokerageCode",
						"type": "varchar"
					},
					{
						"name": "BrokerageName",
						"type": "varchar"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_brokerage"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_entity')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "EntityCode",
						"type": "varchar"
					},
					{
						"name": "EntityName",
						"type": "varchar"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_entity"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_fund')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "FundCode",
						"type": "varchar"
					},
					{
						"name": "PPSFundId",
						"type": "varchar"
					},
					{
						"name": "JSECode",
						"type": "varchar"
					},
					{
						"name": "ISINCode",
						"type": "varchar"
					},
					{
						"name": "FundName",
						"type": "varchar"
					},
					{
						"name": "FundDescription",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "date"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_fund"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_policy')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "PolicyNumber",
						"type": "varchar"
					},
					{
						"name": "PolicyReferenceNumber",
						"type": "varchar"
					},
					{
						"name": "UnitHolderId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ProductId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "ClientId",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "CreatedDate",
						"type": "date"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_policy"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_product')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "ProductCode",
						"type": "varchar"
					},
					{
						"name": "ProductName",
						"type": "varchar"
					},
					{
						"name": "ProductShortName",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "date"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_product"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_entity_stage_unit_holder')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps_edw_dev_db",
					"type": "LinkedServiceReference"
				},
				"folder": {
					"name": "Entity Stage Tables"
				},
				"annotations": [],
				"type": "AzureSqlTable",
				"schema": [
					{
						"name": "Id",
						"type": "bigint",
						"precision": 19
					},
					{
						"name": "BatchId",
						"type": "uniqueidentifier"
					},
					{
						"name": "Provider",
						"type": "varchar"
					},
					{
						"name": "DataSource",
						"type": "varchar"
					},
					{
						"name": "UnitHolderCode",
						"type": "varchar"
					},
					{
						"name": "SAIDNumber",
						"type": "varchar"
					},
					{
						"name": "UnitHolderName",
						"type": "varchar"
					},
					{
						"name": "CreatedDate",
						"type": "date"
					},
					{
						"name": "IsValid",
						"type": "bit"
					}
				],
				"typeProperties": {
					"schema": "stage",
					"table": "entity_all_unit_holder"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_source_file_extract')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"ExtractFileName": {
						"type": "string",
						"defaultValue": "ExtractedDistribution2023-01-13T11:58:51.2875137Z"
					},
					"ExtractFileDirectory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().ExtractFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('extract/', dataset().ExtractFileDirectory)",
							"type": "Expression"
						},
						"fileSystem": "sql"
					},
					"columnDelimiter": "|",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FundID",
						"type": "String"
					},
					{
						"name": "DistributionComponentCode",
						"type": "String"
					},
					{
						"name": "DistributionComponentName",
						"type": "String"
					},
					{
						"name": "DistributionNumber",
						"type": "String"
					},
					{
						"name": "DistributionDate",
						"type": "String"
					},
					{
						"name": "DistributionComponentCPU",
						"type": "String"
					},
					{
						"name": "FreezeHoldingDate",
						"type": "String"
					},
					{
						"name": "FactFundDistributionKey",
						"type": "String"
					},
					{
						"name": "FundKey",
						"type": "String"
					},
					{
						"name": "DistributionComponentKey",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_source_file_landing')]",
			"type": "Microsoft.Synapse/workspaces/datasets",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"linkedServiceName": {
					"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
					"type": "LinkedServiceReference"
				},
				"parameters": {
					"LandingFileName": {
						"type": "string",
						"defaultValue": "Distribution20220922233723.txt"
					},
					"LandingFileDirectory": {
						"type": "string"
					}
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobFSLocation",
						"fileName": {
							"value": "@dataset().LandingFileName",
							"type": "Expression"
						},
						"folderPath": {
							"value": "@concat('landing/', dataset().LandingFileDirectory)",
							"type": "Expression"
						},
						"fileSystem": "sql"
					},
					"columnDelimiter": "|",
					"escapeChar": "\"",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "FundID",
						"type": "String"
					},
					{
						"name": "DistributionComponentCode",
						"type": "String"
					},
					{
						"name": "DistributionComponentName",
						"type": "String"
					},
					{
						"name": "DistributionNumber",
						"type": "String"
					},
					{
						"name": "DistributionDate",
						"type": "String"
					},
					{
						"name": "DistributionComponentCPU",
						"type": "String"
					},
					{
						"name": "FreezeHoldingDate",
						"type": "String"
					},
					{
						"name": "FactFundDistributionKey",
						"type": "String"
					},
					{
						"name": "FundKey",
						"type": "String"
					},
					{
						"name": "DistributionComponentKey",
						"type": "String"
					}
				]
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AzureDatabricksLinkedService')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureDatabricks",
				"typeProperties": {
					"domain": "https://adb-4672814919814815.15.azuredatabricks.net",
					"accessToken": {
						"type": "SecureString",
						"value": "[parameters('AzureDatabricksLinkedService_accessToken')]"
					},
					"existingClusterId": "0315-145259-um03kcxi"
				},
				"connectVia": {
					"referenceName": "KeepAlive-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/data_lake_dev')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobStorage",
				"typeProperties": {
					"connectionString": "[parameters('data_lake_dev_connectionString')]"
				},
				"connectVia": {
					"referenceName": "KeepAlive-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pps-synapse-dev-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('pps-synapse-dev-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "KeepAlive-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pps_edw_dev_db')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pps_edw_dev_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "KeepAlive-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/pps_edw_prod_db')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureSqlDatabase",
				"typeProperties": {
					"connectionString": "[parameters('pps_edw_prod_db_connectionString')]"
				},
				"connectVia": {
					"referenceName": "KeepAlive-Runtime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/KeepAlive-Runtime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ppsi-synapse-prod-WorkspaceDefaultSqlServer')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"parameters": {
					"DBName": {
						"type": "String"
					}
				},
				"annotations": [],
				"type": "AzureSqlDW",
				"typeProperties": {
					"connectionString": "[parameters('ppsi-synapse-prod-WorkspaceDefaultSqlServer_connectionString')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ppsi-synapse-prod-WorkspaceDefaultStorage')]",
			"type": "Microsoft.Synapse/workspaces/linkedServices",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"type": "AzureBlobFS",
				"typeProperties": {
					"url": "[parameters('ppsi-synapse-prod-WorkspaceDefaultStorage_properties_typeProperties_url')]"
				},
				"connectVia": {
					"referenceName": "AutoResolveIntegrationRuntime",
					"type": "IntegrationRuntimeReference"
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/integrationRuntimes/AutoResolveIntegrationRuntime')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Authorised_Representative_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/authorised representative/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Authorised_Representative_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Broker_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/broker/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('Broker_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Brokerage_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/brokerage/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Brokerage_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Commission_Statement_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/commission statement/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Commission_Statement_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Country_Codes_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/country codes/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Country_Codes_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Daily_Holdings_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/daily holdings/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Daily_Holdings_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Deal_New_file')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/deal/",
					"blobPathEndsWith": ".txt",
					"ignoreEmptyBlobs": false,
					"scope": "[parameters('Deal_New_file_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Distribution_Component_Master_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/distribution component master/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Distribution_Component_Master_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Distribution_Component_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/distribution component/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Distribution_Component_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Distriution_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/distribution/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Distriution_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Entity_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/entity/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Entity_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fee_Statement_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fee statement/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Fee_Statement_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fund_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fund/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Fund_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Fund_Prices_New_file')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fund prices/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Fund_Prices_New_file_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Initial_Policy_Fund_Ratio_New_file')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/initial policy fund ratio/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Initial_Policy_Fund_Ratio_New_file_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Load_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/load/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Load_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Payee_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/payee/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Payee_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Policy_Beneficiaries_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/policy beneficiaries/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Policy_Beneficiaries_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Policy_Broker_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/policy broker/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Policy_Broker_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Policy_Cession_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/policy cession/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Policy_Cession_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Policy_Lives_Assured_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/policy lives assured/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Policy_Lives_Assured_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Policy_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/policy/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Policy_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Prduct_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/product",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Prduct_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Product_Fund_Accounts_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/product fund accounts/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Product_Fund_Accounts_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Reg28_Asset_Allocations_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fact reg28 asset allocations/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Reg28_Asset_Allocations_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Reg28_Policy_Fund_Allocations')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/reg28 policy fund allocations/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Reg28_Policy_Fund_Allocations_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Reg_28_Policy_Allocations_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/reg28 policy allocations/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Reg_28_Policy_Allocations_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Reg_28_Quarterly_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/reg 28 quarterly/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Reg_28_Quarterly_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Standing_Instruction_Allocations_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/standing instruction allocations/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Standing_Instruction_Allocations_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Standing_Instruction_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/standing instruction/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Standing_Instruction_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Tax_Free_Savings_Contributions_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fact tax free savings contributions/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Tax_Free_Savings_Contributions_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transaction_Fee_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fact transaction fee/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Transaction_Fee_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transaction_Subtypes_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/transaction type/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Transaction_Subtypes_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Transactions_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/fund transactions/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Transactions_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Unit_Holder_Bank_Details_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/unit holder bank details/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Unit_Holder_Bank_Details_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Unit_Holder_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/unit holder/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Unit_Holder_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/Unit_Holder_Related_Party_New_File')]",
			"type": "Microsoft.Synapse/workspaces/triggers",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "@trigger().outputs.body.fileName",
				"annotations": [],
				"runtimeState": "Stopped",
				"pipelines": [],
				"type": "BlobEventsTrigger",
				"typeProperties": {
					"blobPathBeginsWith": "/sql/blobs/landing/unit holder related party/",
					"ignoreEmptyBlobs": true,
					"scope": "[parameters('Unit_Holder_Related_Party_New_File_properties_typeProperties_scope')]",
					"events": [
						"Microsoft.Storage.BlobCreated"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/AutoResolveIntegrationRuntime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 8,
							"timeToLive": 0
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/ChadLocal')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/IntegrationRuntime1')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "SelfHosted",
				"typeProperties": {}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/KeepAlive-Runtime')]",
			"type": "Microsoft.Synapse/workspaces/integrationRuntimes",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "Managed",
				"typeProperties": {
					"computeProperties": {
						"location": "AutoResolve",
						"dataFlowProperties": {
							"computeType": "General",
							"coreCount": 32,
							"timeToLive": 30,
							"cleanup": false,
							"customProperties": []
						}
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_country_codes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "CountryCodesSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedData"
						}
					],
					"transformations": [
						{
							"name": "ExtractCountryCodes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          ISOCountryCode as string,",
						"          ISOCountryDescription as string,",
						"          FLEXCUBECountryCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryCodesSource",
						"CountryCodesSource filter(!isNull(ISOCountryCode)) ~> ExtractCountryCodes",
						"ExtractCountryCodes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_distribution_component_master_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "DistributionComponentMasterSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportDistributionComponentMaster"
						}
					],
					"transformations": [
						{
							"name": "ExtractDistributionComponentMaster"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          FinFieldNo as short,",
						"          FinComponentDescription as string,",
						"          DisplayName as string,",
						"          RollupID as short,",
						"          StatementHeader as string,",
						"          SumStatementOrder as short,",
						"          StatementOrder as short,",
						"          DistributionComponentKey as string,",
						"          TaxDescription as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionComponentMasterSource",
						"DistributionComponentMasterSource filter(!isNull(DistributionComponentCode)) ~> ExtractDistributionComponentMaster",
						"ExtractDistributionComponentMaster sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportDistributionComponentMaster"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_authorised_representative_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "AuthorisedRepresentativeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedAuthorisedRepresentativeData"
						}
					],
					"transformations": [
						{
							"name": "ExtractAuthorisedRepresentative"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          AuthRepID as string,",
						"          AuthRepName as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          Title as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          CorrPostCode as string,",
						"          TelephoneHomeNumber as string,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as string,",
						"          FATCAStatus as string,",
						"          ExpiryDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AuthorisedRepresentativeSource",
						"AuthorisedRepresentativeSource filter(!isNull(AuthRepID)) ~> ExtractAuthorisedRepresentative",
						"ExtractAuthorisedRepresentative sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedAuthorisedRepresentativeData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_broker_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "BrokerSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedBrokerData"
						}
					],
					"transformations": [
						{
							"name": "ExtractBroker"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          BrokerCode as string,",
						"          BrokerageCode as string,",
						"          BrokerName as string,",
						"          EmailAddress as string,",
						"          IDNumber as long,",
						"          IDType as string,",
						"          PlaceofIssue as string,",
						"          BrokerCategory as string,",
						"          BrokerLevelNumber as boolean,",
						"          TelephoneNumber1 as integer,",
						"          TelephoneNumber2 as string,",
						"          CellPhoneNumber as integer,",
						"          FaxNumber as integer,",
						"          ContactPerson as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as short,",
						"          FICAIndicator as boolean,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as short,",
						"          BankAccountHolderName as string,",
						"          WorkFlowNumber as integer,",
						"          BrokerInUse as boolean,",
						"          NoFeesApply as boolean,",
						"          RuleEffectiveDate as date,",
						"          BrokerKey as integer,",
						"          BrokerageKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrokerSource",
						"BrokerSource filter(!isNull(BrokerCode)) ~> ExtractBroker",
						"ExtractBroker sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedBrokerData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_brokerage_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "BrokerageSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedBrokerageData"
						}
					],
					"transformations": [
						{
							"name": "ExtractBrokerage"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          BrokerageCode as string,",
						"          BrokerageName as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as short,",
						"          EmailAddress as string,",
						"          VatRegistrationNumber as long,",
						"          BrokerageCategory as string,",
						"          TelephoneNumber1 as string,",
						"          TelephoneNumber2 as string,",
						"          CellPhoneNumber as string,",
						"          FaxNumber as integer,",
						"          ContactPerson as integer,",
						"          BrokerageVatRegistered as boolean,",
						"          BrokerageCommpymtfreq as boolean,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as integer,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          FSPNumber as long,",
						"          WorkFlowNumber as string,",
						"          RuleEffectiveDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrokerageSource",
						"BrokerageSource filter(!isNull(BrokerageCode)) ~> ExtractBrokerage",
						"ExtractBrokerage sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedBrokerageData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_entity_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "EntitySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedEntityData"
						}
					],
					"transformations": [
						{
							"name": "ExtractEntity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          EntityID as string,",
						"          EntityType as string,",
						"          EntityName as string,",
						"          EmailAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as string,",
						"          CorrAddressline4 as string,",
						"          CorrPostCode as string,",
						"          EntityRegistrationNumber as string,",
						"          YearEndDate as string,",
						"          ValuationDate as date,",
						"          TaxRegistrationNumber as string,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          ContactPerson as string,",
						"          ContactTelephoneNumber as string,",
						"          GIINNumber as string,",
						"          LegalEntityType as string,",
						"          LegalEntityRegistrationNumber as string,",
						"          FinswitchMancoID as string,",
						"          FinswitchBulkID as string,",
						"          FSBRegistrationNumber as string,",
						"          FlexEntitykey as string,",
						"          PAYENumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntitySource",
						"EntitySource filter(!isNull(EntityID)) ~> ExtractEntity",
						"ExtractEntity sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedEntityData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_fund_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FundSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedFundData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFund"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          JSECode as string,",
						"          FundName as string,",
						"          FundStatus as string,",
						"          FundCommencementDate as date,",
						"          FundCategory as string,",
						"          FundFamilyNumber as string,",
						"          FundFamilyDescription as string,",
						"          FundType as string,",
						"          AssetManagerNumber as string,",
						"          Reg28Compliant as boolean,",
						"          ISINCode as string,",
						"          FundRangeOption as string,",
						"          BDANumber as string,",
						"          PriceSource as string,",
						"          TotalExpenseRatio as string,",
						"          AssetManagerDescription as string,",
						"          FundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundSource",
						"FundSource filter(!isNull(FundID)) ~> ExtractFund",
						"ExtractFund sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedFundData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_policy_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PolicySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedPolicyData"
						}
					],
					"transformations": [
						{
							"name": "ExtractPolicy"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          ClientID as string,",
						"          PolicyReferenceNumber as string,",
						"          PolicyStatus as string,",
						"          PolicyCreationDate as date,",
						"          PolicyStartDate as date,",
						"          PolicyMaturityDate as date,",
						"          AnniversaryDate as date,",
						"          WorkFlowNumber as string,",
						"          AnniversaryValue as double,",
						"          PolicyEndDate as date,",
						"          RuleEffectiveDate as date,",
						"          RetirementAge as short,",
						"          RetirementDate as date,",
						"          FundRangeOption as string,",
						"          PersonalisedProductName as string,",
						"          WrapFundName as string,",
						"          SourceFundName as string,",
						"          PreferredFund as string,",
						"          ParticipatingEmployerID as string,",
						"          AuthrepID as string,",
						"          InitialInvestmentAmount as double,",
						"          PolicyType as string,",
						"          AnnuityRange as string,",
						"          LatestRule as boolean,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          ProductKey as string,",
						"          AuthorisedRepresentativeKey as string,",
						"          DefaultAnnuity as boolean,",
						"          DefaultAnnuitySourceList as string,",
						"          IntermedSerFee as string,",
						"          OriginalProductCode as string,",
						"          Annuitisation as string,",
						"          SourceFundType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicySource",
						"PolicySource filter(!isNull(PolicyNumber)) ~> ExtractPolicy",
						"ExtractPolicy sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedPolicyData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_product_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "ProductSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedProductData"
						}
					],
					"transformations": [
						{
							"name": "ExtractProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          ProductStatus as string,",
						"          ProductType as string,",
						"          LegalEntityNumber as string,",
						"          ClientID as short,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as integer,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as long,",
						"          ProductKey as short,",
						"          FlexEntityKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductSource",
						"ProductSource filter(!isNull(ProductID)) ~> ExtractProduct",
						"ExtractProduct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedProductData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_entity_unit_holder_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "UnitHolderSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedUnitHolderData"
						}
					],
					"transformations": [
						{
							"name": "ExtractUnitHolder"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as long,",
						"          UnitHolderCategory as string,",
						"          UnitHolderStatus as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          Surname as string,",
						"          Initials as string,",
						"          Title as string,",
						"          IDNumber as long,",
						"          IDType as string,",
						"          PlaceofIssue as string,",
						"          DateofBirth as date,",
						"          MaritalStatusCode as string,",
						"          MaritalStatusDescription as string,",
						"          Gender as string,",
						"          TelephoneHomeNumber as integer,",
						"          TelephoneWorkNumber as integer,",
						"          CellPhoneNumber as integer,",
						"          FaxNumber as integer,",
						"          EmailPrimaryAddress as string,",
						"          EmailSecondaryAddress as string,",
						"          CompanyName as string,",
						"          ContactName as string,",
						"          CompanyRegistrationNumber as string,",
						"          Commencementdate as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          CorrCountry as string,",
						"          CorrPostCode as short,",
						"          ResAddressLine1 as string,",
						"          ResAddressLine2 as string,",
						"          ResAddressLine3 as string,",
						"          ResAddressLine4 as string,",
						"          ResCountry as string,",
						"          ResPostCode as short,",
						"          PreferedMailCode as string,",
						"          PreferedMailDescription as string,",
						"          TaxNumber as string,",
						"          WorkFlowNumber as integer,",
						"          ClientMemberNumber as integer,",
						"          AddressUnknown as boolean,",
						"          Language as string,",
						"          GuardianName as string,",
						"          TaxIdentificationNo_01 as integer,",
						"          AuthRepID as string,",
						"          FicaStatus as string,",
						"          TaxIndentificationNo_02 as string,",
						"          CountryofTaxResidence_02 as string,",
						"          NationalityISO as string,",
						"          Nationality as string,",
						"          CountryOfDomicile as string,",
						"          CountryofTaxResidency_01 as string,",
						"          IndiciaIndicator as string,",
						"          FATCAStatus as boolean,",
						"          AccountHolderType as string,",
						"          ExternalAdministratorRef as boolean,",
						"          ClientID as short,",
						"          FLEXFATCAStatus as string,",
						"          PoliticallyConnectedIndividual as boolean,",
						"          DateofIncorporation as string,",
						"          DIVTaxExemption as string,",
						"          WTIExemption as string,",
						"          WTIDTARates as string,",
						"          UnitHolderType as string,",
						"          CountryOfResidence as string,",
						"          CIFNumber as integer,",
						"          FamilyFees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderSource",
						"UnitHolderSource filter(!isNull(UnitHolderID)) ~> ExtractUnitHolder",
						"ExtractUnitHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedUnitHolderData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_fund_prices_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FundPricesSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedFundPricesData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFundPrices"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          PriceDate as date,",
						"          NAVPrice as double,",
						"          FactPriceKey as integer,",
						"          Fundkey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundPricesSource",
						"FundPricesSource filter(!isNull(FundID) && !isNull(PriceDate)) ~> ExtractFundPrices",
						"ExtractFundPrices sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedFundPricesData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_initial_policy_fund_ratio_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "InitialPolicyFundRatioSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedInitialPolicyFundRatioData"
						}
					],
					"transformations": [
						{
							"name": "ExtractInitialPolicyFundRatio"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as long,",
						"          FundID as string,",
						"          AssetAllocationRatio as double,",
						"          RuleEffectiveDate as date,",
						"          Units as double,",
						"          WAC as double,",
						"          Amount as double,",
						"          PolicyTransactionNumber as long,",
						"          PolicyInitialAllocationKey as integer,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          FundKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InitialPolicyFundRatioSource",
						"InitialPolicyFundRatioSource filter(!isNull(PolicyNumber)) ~> ExtractInitialPolicyFundRatio",
						"ExtractInitialPolicyFundRatio sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedInitialPolicyFundRatioData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_load_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "LoadSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedLoadData"
						}
					],
					"transformations": [
						{
							"name": "ExtractLoad"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          LoadID as short,",
						"          LoadDescription as string,",
						"          LoadValue as double,",
						"          SlabNumber as boolean,",
						"          SlabFromAmount as integer,",
						"          SlabToAmount as integer,",
						"          LoadCalcMethod as string,",
						"          LoadType as string,",
						"          LoadBasis as string,",
						"          LoadKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LoadSource",
						"LoadSource filter(!isNull(LoadID) && !isNull(SlabNumber)) ~> ExtractLoad",
						"ExtractLoad sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedLoadData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_beneficiaries_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PolicyBeneficiariesSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedPolicyBeneficiariesData"
						}
					],
					"transformations": [
						{
							"name": "ExtractPolicyBeneficiaries"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          BeneficiaryID as long,",
						"          UnitHolderID as long,",
						"          ClientID as short,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          BeneficiaryFirstName as string,",
						"          BeneficiaryMiddleName as string,",
						"          BeneficiaryLastName as string,",
						"          BeneficiaryType as string,",
						"          BeneficiaryRel as string,",
						"          IDNumber as string,",
						"          BeneficiaryPercentage as short,",
						"          BeneficiaryAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as short,",
						"          CorrAddressline4 as string,",
						"          DateOfBirth as date,",
						"          RuleEffectiveDate as date,",
						"          EmailAddress as string,",
						"          TelephoneHomeNumber as long,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as integer,",
						"          ModifiedStatus as string,",
						"          PolicyBeneficiaryKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyBeneficiariesSource",
						"PolicyBeneficiariesSource filter(!isNull(PolicyNumber)) ~> ExtractPolicyBeneficiaries",
						"ExtractPolicyBeneficiaries sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedPolicyBeneficiariesData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_broker_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PolicyBrokerSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedPolicyBrokerData"
						}
					],
					"transformations": [
						{
							"name": "ExtractPolicyBroker"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          BrokerCode as string,",
						"          RuleEffectiveDate as date,",
						"          SplitPercentage as short,",
						"          PolicyKey as integer,",
						"          BrokerKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyBrokerSource",
						"PolicyBrokerSource filter(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate)) ~> ExtractPolicyBroker",
						"ExtractPolicyBroker sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedPolicyBrokerData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_cession_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PolicyCessionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedPolicyCessionData"
						}
					],
					"transformations": [
						{
							"name": "ExtractPolicyCession"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          CessionType as string,",
						"          Cessionary as string,",
						"          CessionDate as string,",
						"          TransactionNumber as long,",
						"          PolicyNumber as string,",
						"          CessionRemarks as string,",
						"          UnitHolderFromID as long,",
						"          UnitHolderToID as long,",
						"          RuleEffectiveDate as date,",
						"          PolicyKey as integer,",
						"          FromUnitHolderKey as integer,",
						"          ToUnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyCessionSource",
						"PolicyCessionSource filter(!isNull(TransactionNumber) && !isNull(PolicyNumber) && !isNull(CessionDate)) ~> ExtractPolicyCession",
						"ExtractPolicyCession sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedPolicyCessionData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_deal_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "DealSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedDealData"
						}
					],
					"transformations": [
						{
							"name": "ExtractDeal"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as long,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          LevelIndicator as string,",
						"          Status as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          LoadID as integer,",
						"          DealPercentage as double,",
						"          TaxType as string,",
						"          DealTransactionNumber as string,",
						"          PolicyDealKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          LoadKey as short,",
						"          UnitHolderKey as integer,",
						"          SlabNumber as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DealSource",
						"DealSource filter(!isNull(DealTransactionNumber)) ~> ExtractDeal",
						"ExtractDeal sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedDealData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_default_annuity_source_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PolicyDefaultAnnuitySourceSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportPolicyDefaultAnnuitySource"
						}
					],
					"transformations": [
						{
							"name": "ExtractPolicyDefaultAnnuitySource"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          ProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyDefaultAnnuitySourceSource",
						"PolicyDefaultAnnuitySourceSource filter(!isNull(PolicyNumber) && !isNull(ProductCode)) ~> ExtractPolicyDefaultAnnuitySource",
						"ExtractPolicyDefaultAnnuitySource sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportPolicyDefaultAnnuitySource"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_distribution_component_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "DistributionComponentSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedDistributionComponentData"
						}
					],
					"transformations": [
						{
							"name": "ExtractDistributionComponent"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as short,",
						"          DistributionDate as string,",
						"          DistributionComponentAmount as double,",
						"          DistributionComponentCPU as double,",
						"          DistributionComponentUnits as double,",
						"          Currency as string,",
						"          ReversalIndicator as boolean,",
						"          ComponentTax as short,",
						"          PaymentNumber as string,",
						"          FactPolicyDistributionComponentTransactionKey as short,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          FundKey as short,",
						"          DistributionComponentKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionComponentSource",
						"DistributionComponentSource filter(!isNull(DistributionDate)) ~> ExtractDistributionComponent",
						"ExtractDistributionComponent sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedDistributionComponentData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_distribution_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "DistributionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedDistributionData"
						}
					],
					"transformations": [
						{
							"name": "ExtractDistribution"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionSource",
						"DistributionSource filter(!isNull(DistributionNumber)) ~> ExtractDistribution",
						"ExtractDistribution sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedDistributionData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_fee_statement_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FeeStatementSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedFeeStatementData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFeeStatement"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          ClientID as string,",
						"          InvoiceNumber as string,",
						"          InvoiceDate as string,",
						"          TransactionDate as string,",
						"          ProductID as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionNumber as string,",
						"          ContributionAmount as double,",
						"          FeeType as string,",
						"          FeePercentage as double,",
						"          FeeAmount as double,",
						"          FeeStatementKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FeeTypekey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FeeStatementSource",
						"FeeStatementSource filter(!isNull(TransactionDate)) ~> ExtractFeeStatement",
						"ExtractFeeStatement sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedFeeStatementData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_fund_comission_statement_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "CommissionStatementSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedCommissionStatementData"
						}
					],
					"transformations": [
						{
							"name": "ExtractCommissionStatement"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          ClientID as short,",
						"          BrokerageCode as string,",
						"          InvoiceNumber as string,",
						"          InvoiceDate as date,",
						"          PriceDate as date,",
						"          ProductID as string,",
						"          BrokerCode as string,",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          TransactionNumber as long,",
						"          ContributionAmount as string,",
						"          CommissionType as string,",
						"          CommissionPercentage as double,",
						"          CommissionAmount as double,",
						"          VATAmount as double,",
						"          CommissionTotal as double,",
						"          FundID as string,",
						"          CommissionStatementKey as integer,",
						"          BrokerKey as integer,",
						"          BrokerageKey as short,",
						"          Policykey as integer,",
						"          ProductKey as short,",
						"          UnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CommissionStatementSource",
						"CommissionStatementSource filter(!isNull(TransactionNumber)) ~> ExtractCommissionStatement",
						"ExtractCommissionStatement sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedCommissionStatementData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_fund_holdings_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "DailyHoldingsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedDailyHoldingsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractDailyHoldings"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          UnitHolderID as long,",
						"          Units as double,",
						"          NAVPrice as double,",
						"          WAC as double,",
						"          BookValue as double,",
						"          MarketValue as double,",
						"          PriceDate as date,",
						"          HoldingsDate as date,",
						"          PolicyKey as integer,",
						"          ProductKey as short,",
						"          Fundkey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DailyHoldingsSource",
						"DailyHoldingsSource filter(!isNull(PolicyNumber)) ~> ExtractDailyHoldings",
						"ExtractDailyHoldings sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedDailyHoldingsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_fund_transaction_fee_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FactTransactionFeeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportFactTransactionFeeData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFactTransactionFee"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PolicyTransactionNumber as long,",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          FeeCode as integer,",
						"          FeeDescription as string,",
						"          FeePercentage as double,",
						"          FundTransactionNumber as long,",
						"          Amount as double,",
						"          ReversalIndicator as boolean,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          LoadKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactTransactionFeeSource",
						"FactTransactionFeeSource filter(!isNull(FactFundFeeTransactionKey)) ~> ExtractFactTransactionFee",
						"ExtractFactTransactionFee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportFactTransactionFeeData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_fund_transactions_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FundTransactionsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedFundTransactionsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFundTransactions"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          TransactionTypeCode as short,",
						"          TransactionSubTypeCode as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionDate as date,",
						"          PolicyTransactionNumber as long,",
						"          FundTransactionNumber as long,",
						"          GrossAmount as double,",
						"          NetAmount as double,",
						"          Units as double,",
						"          Price as double,",
						"          PriceDate as date,",
						"          AllocationDate as date,",
						"          RealisedProfitLoss as boolean,",
						"          ReversalIndicator as boolean,",
						"          TransactionTimeStamp as date,",
						"          PolicyReferenceNumber as string,",
						"          DistributionTransactionNumber as long,",
						"          WAC as double,",
						"          Remarks as string,",
						"          FundRatio as short,",
						"          PolicyTransactionStatus as string,",
						"          PolicyTransactionAllocationDate as date,",
						"          RefType as short,",
						"          PaymentMode as boolean,",
						"          OldTransactionNumber as string,",
						"          TopUpInclusive as boolean,",
						"          UpfrontInterest as string,",
						"          FactFundTransactionKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          TransactionReferenceNumber as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundTransactionsSource",
						"FundTransactionsSource filter(!isNull(FundID)) ~> ExtractFundTransactions",
						"ExtractFundTransactions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedFundTransactionsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_lives_assured_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PolicyLivesAssuredSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedPolicyLivesAssuredData"
						}
					],
					"transformations": [
						{
							"name": "ExtractPolicyLivesAssured"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as long,",
						"          ProductID as string,",
						"          LivesAssuredNumber as long,",
						"          PolicyNumber as string,",
						"          ConstituentStatus as string,",
						"          ConstituentType as string,",
						"          ConstituentDescription as string,",
						"          ConstituentRelationship as string,",
						"          ConstituentID as long,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          DateofBirth as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          RuleEffectiveDate as date,",
						"          ClientID as short,",
						"          ModifiedStatus as string,",
						"          PolicyLifeAssuredKey as integer,",
						"          PolicyKey as integer,",
						"          ProductKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyLivesAssuredSource",
						"PolicyLivesAssuredSource filter(!isNull(LivesAssuredNumber) && !isNull(RuleEffectiveDate)) ~> ExtractPolicyLivesAssured",
						"ExtractPolicyLivesAssured sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedPolicyLivesAssuredData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_payee_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "PayeeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedPayeeData"
						}
					],
					"transformations": [
						{
							"name": "ExtractPayee"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          PayeeName as string,",
						"          PayeeTypeCode as string,",
						"          PayeeTypeDescription as string,",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          ProductID as string,",
						"          PayeeNetAmount as double,",
						"          PayeeKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          PaymentDate as date,",
						"          PaymentMode as string,",
						"          SequenceNumber as integer,",
						"          TransactionTypeIndicator as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PayeeSource",
						"PayeeSource filter(!isNull(PolicyNumber) && !isNull(ProductID) && !isNull(PaymentDate) && !isNull(SequenceNumber) && !isNull(PayeeKey)) ~> ExtractPayee",
						"ExtractPayee sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedPayeeData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_standing_instruction_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "StandingInstructionAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedStandingInstructionAllocationsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractStandingInstructionAllocations"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          RuleEffectiveDate as date,",
						"          SINumber as string,",
						"          FromFundCode as string,",
						"          ToFundCode as string,",
						"          FromFundRatio as double,",
						"          ToFundRatio as short,",
						"          FactPolicyStandingInstructionAllocationKey as integer,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          FromFundKey as short,",
						"          StandingInstructionKey as integer,",
						"          ToFundKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StandingInstructionAllocationsSource",
						"StandingInstructionAllocationsSource filter(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate)) ~> ExtractStandingInstructionAllocations",
						"ExtractStandingInstructionAllocations sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedStandingInstructionAllocationsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_policy_standing_instruction_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "StandingInstructionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedStandingInstructionData"
						}
					],
					"transformations": [
						{
							"name": "ExtractStandingInstruction"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          SINumber as string,",
						"          SIType as string,",
						"          AnnuitySIAllocationType as string,",
						"          SIStartDate as date,",
						"          SIEndDate as date,",
						"          SIValue as double,",
						"          SIFrequency as string,",
						"          SIEscalationFrequency as string,",
						"          SIEscalationMode as string,",
						"          SIEscalationValue as short,",
						"          SIStatusCode as string,",
						"          SIStatusDescription as string,",
						"          SICalculationMethod as string,",
						"          SIFeeOverideBroker as double,",
						"          SIFeeOverideAdmin as string,",
						"          BankName as string,",
						"          BankAccountType as string,",
						"          BankBranchName as string,",
						"          BankBranchCode as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          RuleEffectiveDate as date,",
						"          PhaseInOccurences as string,",
						"          ModeCode as string,",
						"          ModeCodeDescription as string,",
						"          SIEscalationStartDate as date,",
						"          SIEscalationEndDate as date,",
						"          StandingInstructionKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          SequenceNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StandingInstructionSource",
						"StandingInstructionSource filter(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate) && !isNull(SequenceNumber)) ~> ExtractStandingInstruction",
						"ExtractStandingInstruction sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedStandingInstructionData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_product_fund_accounts_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "ProductFundAccountsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedProductFundAccountsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractProductFundAccounts"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          RuleEffectiveDate as date,",
						"          AccountNumber as string,",
						"          Trade as string,",
						"          Capped as string,",
						"          TradeMethod as string,",
						"          BankReferenceNumber as string,",
						"          GroupingFundID as string,",
						"          FileFormatIndicator as string,",
						"          ProductKey as string,",
						"          FundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductFundAccountsSource",
						"ProductFundAccountsSource filter(!isNull(ProductID) && !isNull(FundID) && !isNull(RuleEffectiveDate)) ~> ExtractProductFundAccounts",
						"ExtractProductFundAccounts sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedProductFundAccountsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_reg28_fund_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FactReg28AssetAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedFactReg28AssetAllocationsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFactReg28AssetAllocations"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          TrustNumber as short,",
						"          FundName as string,",
						"          JSECode as string,",
						"          Class as string,",
						"          QuarterEndDate as date,",
						"          LocalEquity as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          LocalProperty as double,",
						"          ForeignEquity as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          ForeignProperty as double,",
						"          Africa as string,",
						"          Source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactReg28AssetAllocationsSource",
						"FactReg28AssetAllocationsSource filter(!isNull(JSECode) && !isNull(QuarterEndDate)) ~> ExtractFactReg28AssetAllocations",
						"ExtractFactReg28AssetAllocations sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedFactReg28AssetAllocationsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_reg28_policy_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "Reg28PolicyAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedReg28PolicyAllocationsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractReg28PolicyAllocations"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          SourceDataQuarterEndDate as date,",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          PriceDate as date,",
						"          PolicyCompliant as boolean,",
						"          GrandFatherStatus as boolean,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          AllFundsReg28Compliant as boolean,",
						"          QuarterAge as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28PolicyAllocationsSource",
						"Reg28PolicyAllocationsSource filter(!isNull(PolicyNumber) && !isNull(SourceDataQuarterEndDate)) ~> ExtractReg28PolicyAllocations",
						"ExtractReg28PolicyAllocations sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedReg28PolicyAllocationsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_reg28_policy_fund_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "Reg28PolicyFundAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedReg28PolicyFundAllocationsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractReg28PolicyFundAllocations"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          SourceDataQuarterEndDate as date,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          MarketValue as double,",
						"          PriceDate as date,",
						"          LocalEquity as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          LocalProperty as double,",
						"          ForeignEquity as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          ForeignProperty as double,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          Source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28PolicyFundAllocationsSource",
						"Reg28PolicyFundAllocationsSource filter(!isNull(PolicyNumber) && !isNull(FundID) && !isNull(SourceDataQuarterEndDate)) ~> ExtractReg28PolicyFundAllocations",
						"ExtractReg28PolicyFundAllocations sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedReg28PolicyFundAllocationsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_reg28_policy_quarterly_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "Reg28QuarterlySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedReg28QuarterlyData"
						}
					],
					"transformations": [
						{
							"name": "ExtractReg28Quarterly"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          QuarterEndDate as date,",
						"          SourceDataQuarterEndDate as date,",
						"          ClientNo as long,",
						"          TaxNumber as string,",
						"          IDNumber as string,",
						"          Language as string,",
						"          ClientSurname as string,",
						"          ClientInitials as string,",
						"          FirstNames as string,",
						"          Title as string,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          AddressLine3 as string,",
						"          AddressLine4 as string,",
						"          PostalCode as string,",
						"          ClientAccGrpNo as string,",
						"          AccGrpID as string,",
						"          MarketValue as double,",
						"          LocalEquity as double,",
						"          LocalProperty as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          ForeignEquity as double,",
						"          ForeignProperty as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          Equity_Compliant as boolean,",
						"          Property_Compliant as boolean,",
						"          Offshore_Compliant as boolean,",
						"          Policy_Compliant as boolean,",
						"          GrandfatherStatus as boolean,",
						"          Reason as string,",
						"          GrandfatherToNonGrandfather as boolean,",
						"          QuarterAge as short,",
						"          TPACODE as short,",
						"          Processed as boolean,",
						"          AllFundsReg28Compliant as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28QuarterlySource",
						"Reg28QuarterlySource filter(!isNull(ClientAccGrpNo) && !isNull(QuarterEndDate)) ~> ExtractReg28Quarterly",
						"ExtractReg28Quarterly sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedReg28QuarterlyData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_transaction_subtypes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "TransactionSubtypesSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportTransactionSubtypes"
						}
					],
					"transformations": [
						{
							"name": "ExtractTransactionSubtypes"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TransactionSubtypesSource",
						"TransactionSubtypesSource filter(!isNull(TransactionSubTypeCode)) ~> ExtractTransactionSubtypes",
						"ExtractTransactionSubtypes sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportTransactionSubtypes"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_unit_holder_bank_details_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "UnitHolderBankDetailsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedUnitHolderBankDetailsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractUnitHolderBankDetails"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          BankCode as string,",
						"          BankDefaultDetails as boolean,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as long,",
						"          BankAccountHolderName as string,",
						"          IBANumber as string,",
						"          ModifiedStatus as string,",
						"          UnitHolderBankKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderBankDetailsSource",
						"UnitHolderBankDetailsSource filter(!isNull(UnitHolderBankKey)) ~> ExtractUnitHolderBankDetails",
						"ExtractUnitHolderBankDetails sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedUnitHolderBankDetailsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_unit_holder_related_party_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "UnitHolderRelatedPartySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedUnitHolderRelatedPartyData"
						}
					],
					"transformations": [
						{
							"name": "ExtractUnitHolderRelatedParty"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          RelatedPartyNumber as long,",
						"          RelatedPartyType as string,",
						"          RelatedPartyRelDescription as string,",
						"          RelatedPartyReportingLevel as string,",
						"          RelatedPartyPrefMailMode as string,",
						"          ModifiedStatus as string,",
						"          RelatedPartyUnitHolderKey as string,",
						"          RelatedPartyKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderRelatedPartySource",
						"UnitHolderRelatedPartySource filter(!isNull(RelatedPartyNumber)) ~> ExtractUnitHolderRelatedParty",
						"ExtractUnitHolderRelatedParty sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedUnitHolderRelatedPartyData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_extract_unit_holder_tax_free_savings_contributions_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_landing",
								"type": "DatasetReference"
							},
							"name": "FactTaxFreeSavingsContributionsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ExportExtractedFactTaxFreeSavingsContributionsData"
						}
					],
					"transformations": [
						{
							"name": "ExtractFactTaxFreeSavingsContributions"
						}
					],
					"scriptLines": [
						"parameters{",
						"     ExtractFileName as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          FiscalYearStartDate as date,",
						"          FiscalYearEndDate as date,",
						"          AnnualContributionAmount as double,",
						"          LifetimeContributionAmount as double,",
						"          AgencyCode as string,",
						"          BranchCode as string,",
						"          Timestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactTaxFreeSavingsContributionsSource",
						"FactTaxFreeSavingsContributionsSource filter(!isNull(UnitHolderID) && !isNull(FiscalYearStartDate) && !isNull(FiscalYearEndDate)) ~> ExtractFactTaxFreeSavingsContributions",
						"ExtractFactTaxFreeSavingsContributions sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     partitionFileNames:[($ExtractFileName)],",
						"     umask: 0777,",
						"     preCommands: [],",
						"     postCommands: [],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportExtractedFactTaxFreeSavingsContributionsData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_landing')]",
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_entity_policy_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string ('56aeacaf-724d-4e44-b200-398edc31ec0d')",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          ClientID as string,",
						"          PolicyReferenceNumber as string,",
						"          PolicyStatus as string,",
						"          PolicyCreationDate as date,",
						"          PolicyStartDate as date,",
						"          PolicyMaturityDate as date,",
						"          AnniversaryDate as date,",
						"          WorkFlowNumber as string,",
						"          AnniversaryValue as double,",
						"          PolicyEndDate as date,",
						"          RuleEffectiveDate as date,",
						"          RetirementAge as short,",
						"          RetirementDate as date,",
						"          FundRangeOption as string,",
						"          PersonalisedProductName as string,",
						"          WrapFundName as string,",
						"          SourceFundName as string,",
						"          PreferredFund as string,",
						"          ParticipatingEmployerID as string,",
						"          AuthrepID as string,",
						"          InitialInvestmentAmount as double,",
						"          PolicyType as string,",
						"          AnnuityRange as string,",
						"          LatestRule as boolean,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          ProductKey as string,",
						"          AuthorisedRepresentativeKey as string,",
						"          DefaultAnnuity as boolean,",
						"          DefaultAnnuitySourceList as string,",
						"          IntermedSerFee as string,",
						"          OriginalProductCode as string,",
						"          Annuitisation as string,",
						"          SourceFundType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicySource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Static Data\",",
						"          BatchId = $BatchId,",
						"          column1 = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"PolicySource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"PolicySource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID",
						"     )) ~> LoadProductEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_fund_distribution_component_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactDistributionComponentSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "LoadDistroMaster"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "DeriveDistroMasterPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						},
						{
							"name": "AssertFund"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentAmount as double,",
						"          DistributionComponentCPU as double,",
						"          DistributionComponentUnits as double,",
						"          Currency as string,",
						"          ReversalIndicator as boolean,",
						"          ComponentTax as short,",
						"          PaymentNumber as string,",
						"          FactPolicyDistributionComponentTransactionKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactDistributionComponentSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Distribution Component Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Distribution Component Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Distribution Component Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Distribution Component Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"FactDistributionComponentSource derive(Provider = \"PPS\",",
						"          DataSource = \"Policy Distribution Component Static Data\",",
						"          BatchId = $BatchId) ~> DeriveDistroMasterPlaceHolder",
						"FactDistributionComponentSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"FactDistributionComponentSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"FactDistributionComponentSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"FactDistributionComponentSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity",
						"DeriveDistroMasterPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DistributionComponentCode,",
						"          DistributionComponentName",
						"     )) ~> LoadDistroMaster"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_fund_distribution_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DistributionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "AssertFund"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionSource",
						"AssertFund derive(Provider = \"PPS\",",
						"          DataSource = \"Fund Distribution Static Data\",",
						"          BatchId = $BatchId,",
						"          IsValid = !isError()) ~> DeriveFundPlaceHolder",
						"DistributionSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          IsValid",
						"     )) ~> LoadFundEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_fund_prices_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "InitialPolicyFundRatioSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "AssertFund"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          PriceDate as date,",
						"          NAVPrice as double,",
						"          FactPriceKey as integer,",
						"          Fundkey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InitialPolicyFundRatioSource",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Fund Prices Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = FundID,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"InitialPolicyFundRatioSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadFundEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_initial_policy_fund_ratio_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "InitialPolicyFundRatioSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertFund"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertPolicy"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as string,",
						"          FundID as string,",
						"          AssetAllocationRatio as double,",
						"          RuleEffectiveDate as date,",
						"          Units as double,",
						"          WAC as double,",
						"          Amount as double,",
						"          PolicyTransactionNumber as long,",
						"          PolicyInitialAllocationKey as integer,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          FundKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InitialPolicyFundRatioSource",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Initial Policy Fund Ratio Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = FundID,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Initial Policy Fund Ratio Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Initial Policy Fund Ratio Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"InitialPolicyFundRatioSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"InitialPolicyFundRatioSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"InitialPolicyFundRatioSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_beneficiaries_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyBeneficiariesSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          BeneficiaryID as long,",
						"          UnitHolderID as string,",
						"          ClientID as short,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          BeneficiaryFirstName as string,",
						"          BeneficiaryMiddleName as string,",
						"          BeneficiaryLastName as string,",
						"          BeneficiaryType as string,",
						"          BeneficiaryRel as string,",
						"          IDNumber as string,",
						"          BeneficiaryPercentage as short,",
						"          BeneficiaryAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as short,",
						"          CorrAddressline4 as string,",
						"          DateOfBirth as date,",
						"          RuleEffectiveDate as date,",
						"          EmailAddress as string,",
						"          TelephoneHomeNumber as long,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as integer,",
						"          ModifiedStatus as string,",
						"          PolicyBeneficiaryKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyBeneficiariesSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Beneficiaries Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Beneficiaries Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Beneficiaries Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"PolicyBeneficiariesSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"PolicyBeneficiariesSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"PolicyBeneficiariesSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_broker_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicBrokerSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_broker",
								"type": "DatasetReference"
							},
							"name": "LoadBrokerEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertBroker"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          BrokerCode as string,",
						"          RuleEffectiveDate as date,",
						"          SplitPercentage as short,",
						"          PolicyKey as integer,",
						"          BrokerKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicBrokerSource",
						"AssertBroker derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Broker Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Broker Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"PolicBrokerSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"PolicBrokerSource assert(expectTrue(!isNull(BrokerCode), false, 'AssertBroker')) ~> AssertBroker",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          BrokerCode as string,",
						"          BrokerageCode as string,",
						"          BrokerName as string,",
						"          IsValid as boolean,",
						"          Origin as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          BrokerCode",
						"     )) ~> LoadBrokerEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_broker')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_cession_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "PolicyId\nTransactionId\nUnitHolderFromId\nUnitHolderToId\n\n",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyCessionSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadFromUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadToUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFromUnitHolderPlaceholder"
						},
						{
							"name": "DeriveToUnitHolderPlaceholder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolderFrom"
						},
						{
							"name": "AssertUnitHolderTo"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          CessionType as string,",
						"          Cessionary as string,",
						"          CessionDate as string,",
						"          TransactionNumber as string,",
						"          PolicyNumber as string,",
						"          CessionRemarks as string,",
						"          UnitHolderFromID as string,",
						"          UnitHolderToID as string,",
						"          RuleEffectiveDate as date,",
						"          PolicyKey as integer,",
						"          FromUnitHolderKey as integer,",
						"          ToUnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyCessionSource",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Cession Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertUnitHolderFrom derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Cession Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveFromUnitHolderPlaceholder",
						"AssertUnitHolderTo derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Cession Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveToUnitHolderPlaceholder",
						"PolicyCessionSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"PolicyCessionSource assert(expectTrue(!isNull(UnitHolderFromID), false, 'AssertUnitHolderFrom')) ~> AssertUnitHolderFrom",
						"PolicyCessionSource assert(expectTrue(!isNull(UnitHolderToID), false, 'AssertUnitHolderTo')) ~> AssertUnitHolderTo",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadPolicyEntity",
						"DeriveFromUnitHolderPlaceholder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderFromID,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadFromUnitHolderEntity",
						"DeriveToUnitHolderPlaceholder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderToID,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadToUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_deal_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DealSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadLoadFactTable"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveLoadPlaceHolder"
						},
						{
							"name": "AssertLoad"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string ('56aeacaf-724d-4e44-b200-398edc31ec0d')",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          LevelIndicator as string,",
						"          Status as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          LoadID as string,",
						"          DealPercentage as double,",
						"          TaxType as string,",
						"          DealTransactionNumber as string,",
						"          PolicyDealKey as string,",
						"          ProductKey as short,",
						"          PolicyKey as string,",
						"          LoadKey as short,",
						"          UnitHolderKey as string,",
						"          SlabNumber as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DealSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Deal Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Deal Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Deal Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertLoad derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Deal Static Data\",",
						"          BatchId = $BatchId) ~> DeriveLoadPlaceHolder",
						"DealSource assert(expectTrue(!isNull(LoadID) && !isNull(LoadKey) && !isNull(SlabNumber), false, 'AssertLoad')) ~> AssertLoad",
						"DealSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"DealSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DealSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity",
						"DeriveLoadPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          LoadCode = LoadID,",
						"          SlabNumber,",
						"          LoadKey",
						"     )) ~> LoadLoadFactTable"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_fee_statement_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactFeeStatementSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          ClientID as string,",
						"          InvoiceNumber as string,",
						"          InvoiceDate as string,",
						"          TransactionDate as string,",
						"          ProductID as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionNumber as string,",
						"          ContributionAmount as double,",
						"          FeeType as string,",
						"          FeePercentage as double,",
						"          FeeAmount as double,",
						"          FeeStatementKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FeeTypekey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactFeeStatementSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fee Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fee Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fee Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"FactFeeStatementSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"FactFeeStatementSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"FactFeeStatementSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_fund_commision_statement_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "CommissionStatementSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_broker",
								"type": "DatasetReference"
							},
							"name": "LoadBrokerEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_brokerage",
								"type": "DatasetReference"
							},
							"name": "LoadBrokerageEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "DeriveBrokerPlaceholders"
						},
						{
							"name": "DeriveBrokeragePlaceholders"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertFund"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						},
						{
							"name": "AssertBroker"
						},
						{
							"name": "AssertBrokerage"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          ClientID as short,",
						"          BrokerageCode as string,",
						"          InvoiceNumber as string,",
						"          InvoiceDate as date,",
						"          PriceDate as date,",
						"          ProductID as string,",
						"          BrokerCode as string,",
						"          UnitHolderID as long,",
						"          PolicyNumber as string,",
						"          TransactionNumber as long,",
						"          ContributionAmount as double,",
						"          CommissionType as string,",
						"          CommissionPercentage as double,",
						"          CommissionAmount as double,",
						"          VATAmount as double,",
						"          CommissionTotal as double,",
						"          FundID as string,",
						"          CommissionStatementKey as integer,",
						"          BrokerKey as integer,",
						"          BrokerageKey as short,",
						"          Policykey as integer,",
						"          ProductKey as short,",
						"          UnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CommissionStatementSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"AssertBroker derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveBrokerPlaceholders",
						"AssertBrokerage derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveBrokeragePlaceholders",
						"CommissionStatementSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"CommissionStatementSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"CommissionStatementSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"CommissionStatementSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"CommissionStatementSource assert(expectTrue(!isNull(BrokerCode) && !isNull(BrokerageCode), false, 'AssertBroker')) ~> AssertBroker",
						"CommissionStatementSource assert(expectTrue(!isNull(BrokerageCode), false, 'AssertBrokerage')) ~> AssertBrokerage",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity",
						"DeriveBrokerPlaceholders sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          BrokerCode as string,",
						"          BrokerageCode as string,",
						"          BrokerName as string,",
						"          IsValid as boolean,",
						"          Origin as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          BrokerCode,",
						"          BrokerageCode",
						"     )) ~> LoadBrokerEntity",
						"DeriveBrokeragePlaceholders sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          BrokerageCode as string,",
						"          BrokerageName as string,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          BrokerageCode",
						"     )) ~> LoadBrokerageEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_broker')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_brokerage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_fund_holdings_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DailyHoldingsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertFund"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          UnitHolderID as string,",
						"          Units as double,",
						"          NAVPrice as double,",
						"          WAC as double,",
						"          BookValue as double,",
						"          MarketValue as double,",
						"          PriceDate as date,",
						"          HoldingsDate as date,",
						"          PolicyKey as string,",
						"          ProductKey as string,",
						"          Fundkey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DailyHoldingsSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Holdings Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Holdings Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Holdings Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumber = PolicyNumber,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Holdings Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = FundID,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"DailyHoldingsSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"DailyHoldingsSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"DailyHoldingsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DailyHoldingsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_fund_transaction_fee_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactTransactionFeeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadLoadFact"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "DeriveLoadPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						},
						{
							"name": "AssertFund"
						},
						{
							"name": "AssertLoad"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          PolicyTransactionNumber as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          FeeCode as string,",
						"          FeeDescription as string,",
						"          FeePercentage as double,",
						"          FundTransactionNumber as string,",
						"          Amount as double,",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          LoadKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactTransactionFeeSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Transaction Fee Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Transaction Fee Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Transaction Fee Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Transaction Fee Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"AssertLoad derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Transaction Fee Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveLoadPlaceHolder",
						"FactTransactionFeeSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"FactTransactionFeeSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"FactTransactionFeeSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"FactTransactionFeeSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"FactTransactionFeeSource assert(expectTrue(!isNull(LoadKey), false, 'AssertLoad')) ~> AssertLoad",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity",
						"DeriveLoadPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Action = IsValid,",
						"          Provider,",
						"          DataSource,",
						"          LoadKey",
						"     )) ~> LoadLoadFact"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_fund_transactions_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FundTransactionsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "AssertFund"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          TransactionTypeCode as short,",
						"          TransactionSubTypeCode as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionDate as date,",
						"          PolicyTransactionNumber as string,",
						"          FundTransactionNumber as string,",
						"          GrossAmount as double,",
						"          NetAmount as double,",
						"          Units as double,",
						"          Price as double,",
						"          PriceDate as date,",
						"          AllocationDate as date,",
						"          RealisedProfitLoss as boolean,",
						"          ReversalIndicator as boolean,",
						"          TransactionTimeStamp as date,",
						"          PolicyReferenceNumber as string,",
						"          DistributionTransactionNumber as long,",
						"          WAC as double,",
						"          Remarks as string,",
						"          FundRatio as short,",
						"          PolicyTransactionStatus as string,",
						"          PolicyTransactionAllocationDate as date,",
						"          RefType as short,",
						"          PaymentMode as boolean,",
						"          OldTransactionNumber as string,",
						"          TopUpInclusive as boolean,",
						"          UpfrontInterest as string,",
						"          FactFundTransactionKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          TransactionReferenceNumber as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundTransactionsSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Transactions Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Transactions Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Transactions Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Transactions Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"FundTransactionsSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"FundTransactionsSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"FundTransactionsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"FundTransactionsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID",
						"     )) ~> LoadFundEntity",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_lives_assured_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyLivesAssuredSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          LivesAssuredNumber as string,",
						"          PolicyNumber as string,",
						"          ConstituentStatus as string,",
						"          ConstituentType as string,",
						"          ConstituentDescription as string,",
						"          ConstituentRelationship as string,",
						"          ConstituentID as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          DateofBirth as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          RuleEffectiveDate as date,",
						"          ClientID as string,",
						"          ModifiedStatus as string,",
						"          PolicyLifeAssuredKey as string,",
						"          PolicyKey as string,",
						"          ProductKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyLivesAssuredSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Policy Lives Assured Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Policy Lives Assured Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Policy Lives Assured Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"PolicyLivesAssuredSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"PolicyLivesAssuredSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"PolicyLivesAssuredSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_payee_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PayeeSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertProduct"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertPolicy"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          PayeeName as string,",
						"          PayeeTypeCode as string,",
						"          PayeeTypeDescription as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as string,",
						"          ProductID as string,",
						"          PayeeNetAmount as double,",
						"          PayeeKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          PaymentDate as date,",
						"          PaymentMode as string,",
						"          SequenceNumber as string,",
						"          TransactionTypeIndicator as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PayeeSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Payee Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Payee Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Payee Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"PayeeSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"PayeeSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"PayeeSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_standing_instruction_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "StandingInstructionAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "StageLoadToFundEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "StageLoadFromFundEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveToFundPlaceHolder"
						},
						{
							"name": "DeriveFromFundPlaceHolder"
						},
						{
							"name": "AssertFromFund"
						},
						{
							"name": "AssertToFund"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          RuleEffectiveDate as date,",
						"          SINumber as string,",
						"          FromFundCode as string,",
						"          ToFundCode as string,",
						"          FromFundRatio as double,",
						"          ToFundRatio as double,",
						"          FactPolicyStandingInstructionAllocationKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FromFundKey as string,",
						"          StandingInstructionKey as string,",
						"          ToFundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StandingInstructionAllocationsSource",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Action = 1,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Action = 1,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertToFund derive(IsValid = !isError(),",
						"          Action = 1,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = ToFundCode,",
						"          DateNow = currentDate()) ~> DeriveToFundPlaceHolder",
						"AssertFromFund derive(IsValid = !isError(),",
						"          Action = 1,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = FromFundCode,",
						"          DateNow = currentDate()) ~> DeriveFromFundPlaceHolder",
						"StandingInstructionAllocationsSource assert(expectTrue(!isNull(FromFundCode), false, 'AssertFromFund')) ~> AssertFromFund",
						"StandingInstructionAllocationsSource assert(expectTrue(!isNull(ToFundCode), false, 'AssertToFund')) ~> AssertToFund",
						"StandingInstructionAllocationsSource assert(expectTrue(!isNull(PolicyNumber) && !isNull(UnitHolderID), false, 'AssertPolicy')) ~> AssertPolicy",
						"StandingInstructionAllocationsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          UnitHolderId = UnitHolderID,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> LoadUnitHolderEntity",
						"DeriveToFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = ToFundCode,",
						"          IsValid,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> StageLoadToFundEntity",
						"DeriveFromFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FromFundCode,",
						"          IsValid,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow,",
						"          IsValid",
						"     )) ~> StageLoadFromFundEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_policy_standing_instruction_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "StandingInstructionAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          SINumber as string,",
						"          SIType as string,",
						"          AnnuitySIAllocationType as string,",
						"          SIStartDate as date,",
						"          SIEndDate as date,",
						"          SIValue as double,",
						"          SIFrequency as string,",
						"          SIEscalationFrequency as string,",
						"          SIEscalationMode as string,",
						"          SIEscalationValue as short,",
						"          SIStatusCode as string,",
						"          SIStatusDescription as string,",
						"          SICalculationMethod as string,",
						"          SIFeeOverideBroker as double,",
						"          SIFeeOverideAdmin as string,",
						"          BankName as string,",
						"          BankAccountType as string,",
						"          BankBranchName as string,",
						"          BankBranchCode as string,",
						"          BankAccountNumber as long,",
						"          BankAccountHolderName as string,",
						"          RuleEffectiveDate as date,",
						"          PhaseInOccurences as short,",
						"          ModeCode as string,",
						"          ModeCodeDescription as string,",
						"          SIEscalationStartDate as date,",
						"          SIEscalationEndDate as date,",
						"          StandingInstructionKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          SequenceNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StandingInstructionAllocationsSource",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"StandingInstructionAllocationsSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"StandingInstructionAllocationsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_product_fund_accounts_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ProductFundAccountsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "AssertFund"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          RuleEffectiveDate as date,",
						"          AccountNumber as string,",
						"          Trade as string,",
						"          Capped as string,",
						"          TradeMethod as string,",
						"          BankReferenceNumber as string,",
						"          GroupingFundID as string,",
						"          FileFormatIndicator as string,",
						"          ProductKey as string,",
						"          FundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductFundAccountsSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Product Fund Accounts Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Product Fund Accounts Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = FundID,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"ProductFundAccountsSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"ProductFundAccountsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_reg28_fund_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactReg28AssetAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveFactReg28AssetAllocationsPlaceHolder"
						},
						{
							"name": "AssertFund"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          TrustNumber as short,",
						"          FundName as string,",
						"          JSECode as string,",
						"          Class as string,",
						"          QuarterEndDate as date,",
						"          LocalEquity as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          LocalProperty as double,",
						"          ForeignEquity as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          ForeignProperty as double,",
						"          Africa as string,",
						"          Source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactReg28AssetAllocationsSource",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Fund Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = JSECode,",
						"          DescriptionPlaceholder = \"This Fund was added as a placeholder (using JSECode) from the pipeline: fact_reg28_asset_allocations\",",
						"          DateNow = currentDate()) ~> DeriveFactReg28AssetAllocationsPlaceHolder",
						"FactReg28AssetAllocationsSource assert(expectTrue(!isNull(JSECode), false, 'AssertFund')) ~> AssertFund",
						"DeriveFactReg28AssetAllocationsPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = JSEFundCode,",
						"          JSECode,",
						"          FundName,",
						"          FundDescription = DescriptionPlaceholder,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_reg28_policy_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "Reg28PolicyAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AsserPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          SourceDataQuarterEndDate as date,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          PriceDate as date,",
						"          PolicyCompliant as boolean,",
						"          GrandFatherStatus as boolean,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          AllFundsReg28Compliant as boolean,",
						"          QuarterAge as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28PolicyAllocationsSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AsserPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"Reg28PolicyAllocationsSource assert(expectTrue(!isNull(PolicyNumber), false, 'AsserPolicy')) ~> AsserPolicy",
						"Reg28PolicyAllocationsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"Reg28PolicyAllocationsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_reg28_policy_fund_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "Reg28PolicyFundAllocationsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_fund",
								"type": "DatasetReference"
							},
							"name": "LoadFundEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "DeriveFundPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertUnitHolder"
						},
						{
							"name": "AssertProduct"
						},
						{
							"name": "AssertFund"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          SourceDataQuarterEndDate as date,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          MarketValue as double,",
						"          PriceDate as date,",
						"          LocalEquity as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          LocalProperty as double,",
						"          ForeignEquity as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          ForeignProperty as double,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          Source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28PolicyFundAllocationsSource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Fund Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Fund Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Fund Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          PolicyNumberCopy = PolicyNumber,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"AssertFund derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Fund Allocations Static Data\",",
						"          BatchId = $BatchId,",
						"          JSEFundCode = FundID,",
						"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
						"Reg28PolicyFundAllocationsSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
						"Reg28PolicyFundAllocationsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"Reg28PolicyFundAllocationsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
						"Reg28PolicyFundAllocationsSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = ProductID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber = PolicyNumberCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity",
						"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          FundCode as string,",
						"          PPSFundId as string,",
						"          JSECode as string,",
						"          ISINCode as string,",
						"          FundName as string,",
						"          FundDescription as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          JSECode = JSEFundCode,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadFundEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_fund')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_reg28_policy_quarterly_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "Reg28QuarterlySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_product",
								"type": "DatasetReference"
							},
							"name": "LoadProductEntity"
						},
						{
							"dataset": {
								"referenceName": "edw_entity_stage_policy",
								"type": "DatasetReference"
							},
							"name": "LoadPolicyEntity"
						}
					],
					"transformations": [
						{
							"name": "DeriveProductPlaceHolder"
						},
						{
							"name": "DerivePolicyPlaceHolder"
						},
						{
							"name": "AssertPolicy"
						},
						{
							"name": "AssertProduct"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          QuarterEndDate as date,",
						"          SourceDataQuarterEndDate as date,",
						"          ClientNo as string,",
						"          TaxNumber as string,",
						"          IDNumber as string,",
						"          Language as string,",
						"          ClientSurname as string,",
						"          ClientInitials as string,",
						"          FirstNames as string,",
						"          Title as string,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          AddressLine3 as string,",
						"          AddressLine4 as string,",
						"          PostalCode as string,",
						"          ClientAccGrpNo as string,",
						"          AccGrpID as string,",
						"          MarketValue as double,",
						"          LocalEquity as double,",
						"          LocalProperty as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          ForeignEquity as double,",
						"          ForeignProperty as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          Equity_Compliant as boolean,",
						"          Property_Compliant as boolean,",
						"          Offshore_Compliant as boolean,",
						"          Policy_Compliant as boolean,",
						"          GrandfatherStatus as boolean,",
						"          Reason as string,",
						"          GrandfatherToNonGrandfather as boolean,",
						"          QuarterAge as short,",
						"          TPACODE as short,",
						"          Processed as boolean,",
						"          AllFundsReg28Compliant as boolean",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28QuarterlySource",
						"AssertProduct derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Quarterly Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
						"AssertPolicy derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Quarterly Static Data\",",
						"          BatchId = $BatchId,",
						"          ClientAccGrpNoCopy = ClientAccGrpNo,",
						"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
						"Reg28QuarterlySource assert(expectTrue(!isNull(ClientAccGrpNo), false, 'AssertPolicy')) ~> AssertPolicy",
						"Reg28QuarterlySource assert(expectTrue(!isNull(AccGrpID), false, 'AssertProduct')) ~> AssertProduct",
						"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          ProductCode as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode = AccGrpID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadProductEntity",
						"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          PolicyNumber as string,",
						"          PolicyReferenceNumber as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          ClientId as long,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber = ClientAccGrpNo,",
						"          PolicyReferenceNumber = ClientAccGrpNoCopy,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadPolicyEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_product')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_policy')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_unit_holder_bank_details_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "UnitHolderBankDetailsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "AggregateToSelectDistinctUnitHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "AssertUnitHolder"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          BankCode as string,",
						"          BankDefaultDetails as boolean,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as long,",
						"          BankAccountHolderName as string,",
						"          IBANumber as string,",
						"          ModifiedStatus as string,",
						"          UnitHolderBankKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderBankDetailsSource",
						"UnitHolderBankDetailsSource aggregate(groupBy(UnitHolderID),",
						"     UnitHolderCount = count(UnitHolderID)) ~> AggregateToSelectDistinctUnitHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Bank Details Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AggregateToSelectDistinctUnitHolder assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_unit_holder_related_party_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "UnitHolderRelatedPartySource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "AggregateToSelectDistinctUnitHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "AssertUnitHolder"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          RelatedPartyNumber as long,",
						"          RelatedPartyType as string,",
						"          RelatedPartyRelDescription as string,",
						"          RelatedPartyReportingLevel as string,",
						"          RelatedPartyPrefMailMode as string,",
						"          ModifiedStatus as string,",
						"          RelatedPartyUnitHolderKey as string,",
						"          RelatedPartyKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderRelatedPartySource",
						"UnitHolderRelatedPartySource aggregate(groupBy(UnitHolderID),",
						"     UnitHolderCount = count(UnitHolderID)) ~> AggregateToSelectDistinctUnitHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Related Party Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AggregateToSelectDistinctUnitHolder assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_placeholder_unit_holder_tax_free_savings_contributions_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactTaxFreeSavingsContributionsSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_entity_stage_unit_holder",
								"type": "DatasetReference"
							},
							"name": "LoadUnitHolderEntity"
						}
					],
					"transformations": [
						{
							"name": "AggregateToSelectDistinctUnitHolder"
						},
						{
							"name": "DeriveUnitHolderPlaceHolder"
						},
						{
							"name": "AssertUnitHolder"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          FiscalYearStartDate as date,",
						"          FiscalYearEndDate as date,",
						"          AnnualContributionAmount as double,",
						"          LifetimeContributionAmount as double,",
						"          AgencyCode as string,",
						"          BranchCode as string,",
						"          Timestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactTaxFreeSavingsContributionsSource",
						"FactTaxFreeSavingsContributionsSource aggregate(groupBy(UnitHolderID),",
						"     UnitHolderCount = count(UnitHolderID)) ~> AggregateToSelectDistinctUnitHolder",
						"AssertUnitHolder derive(IsValid = !isError(),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Tax Free Savings Contributions Static Data\",",
						"          BatchId = $BatchId,",
						"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
						"AggregateToSelectDistinctUnitHolder assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
						"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderCode as string,",
						"          SAIDNumber as string,",
						"          UnitHolderName as string,",
						"          CreatedDate as date,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          IsValid,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode = UnitHolderID,",
						"          CreatedDate = DateNow",
						"     )) ~> LoadUnitHolderEntity"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_entity_stage_unit_holder')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_authorised_representative_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "AuthorisedRepresentativeSource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "AuthorisedRepresentativeEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToAuthorisedRepresentativeAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupAuthorisedRepresentativeEntityId"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          AuthRepID as string,",
						"          AuthRepName as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          Title as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          CorrPostCode as string,",
						"          TelephoneHomeNumber as string,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as string,",
						"          FATCAStatus as string,",
						"          ExpiryDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AuthorisedRepresentativeSource",
						"source(output(",
						"          StoreAuthRepId as long,",
						"          StoreAuthRepCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreAuthRepId, AuthRepCode AS StoreAuthRepCode FROM store.entity_all_authorised_representative',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> AuthorisedRepresentativeEntityTable",
						"AuthorisedRepresentativeSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Authorised Representative Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, AuthRepID, AuthRepName, Title, TelephoneHomeNumber, TelephoneWorkNumber)) ~> DerivedColumn",
						"DerivedColumn, AuthorisedRepresentativeEntityTable lookup(AuthRepID == StoreAuthRepCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupAuthorisedRepresentativeEntityId",
						"LookupAuthorisedRepresentativeEntityId assert(expectTrue(!isNull(StoreAuthRepId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          EffectiveDate,",
						"          Provider,",
						"          DataSource,",
						"          AuthRepId = StoreAuthRepId,",
						"          FirstNames,",
						"          MiddleNames,",
						"          LastName,",
						"          Title,",
						"          CorrAddressLine1,",
						"          CorrAddressLine2,",
						"          CorrAddressLine3,",
						"          CorrAddressLine4,",
						"          CorrPostCode,",
						"          TelephoneHomeNumber,",
						"          TelephoneWorkNumber,",
						"          CellPhoneNumber,",
						"          FATCAStatus,",
						"          ExpiryDate,",
						"          IsValid,",
						"          HashKey",
						"     )) ~> LoadToAuthorisedRepresentativeAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_broker_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "BrokerSource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "BrokerEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToBrokerAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupBrokerEntityId"
						},
						{
							"name": "RenameBrokerEntityColumns",
							"description": "Rename entity fund columns "
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          BrokerCode as string,",
						"          BrokerageCode as string,",
						"          BrokerName as string,",
						"          EmailAddress as string,",
						"          IDNumber as long,",
						"          IDType as string,",
						"          PlaceofIssue as string,",
						"          BrokerCategory as string,",
						"          BrokerLevelNumber as integer,",
						"          TelephoneNumber1 as string,",
						"          TelephoneNumber2 as string,",
						"          CellPhoneNumber as string,",
						"          FaxNumber as string,",
						"          ContactPerson as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          FICAIndicator as boolean,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          WorkFlowNumber as string,",
						"          BrokerInUse as boolean,",
						"          NoFeesApply as boolean,",
						"          RuleEffectiveDate as date,",
						"          BrokerKey as string,",
						"          BrokerageKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrokerSource",
						"source(output(",
						"          Id as long,",
						"          BrokerCode as string,",
						"          BrokerName as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id, BrokerCode, BrokerName FROM store.entity_all_broker',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> BrokerEntityTable",
						"BrokerSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Broker Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, EmailAddress, IDNumber, IDType, PlaceofIssue, BrokerCategory, BrokerLevelNumber, TelephoneNumber1, TelephoneNumber2, CellPhoneNumber, \r",
						"FaxNumber, ContactPerson, CorrAddressLine1, CorrAddressLine2, CorrAddressLine3, CorrAddressLine4, FICAIndicator, BankCode, BankName, BankBranchCode, \r",
						"BankBranchName, BankAccountType, BankAccountNumber, BankAccountHolderName, WorkFlowNumber, BrokerInUse, NoFeesApply, RuleEffectiveDate, BrokerKey, BrokerageKey )) ~> DerivedColumn",
						"DerivedColumn, RenameBrokerEntityColumns lookup(BrokerCode == EntityBrokerCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupBrokerEntityId",
						"BrokerEntityTable select(mapColumn(",
						"          EntityId = Id,",
						"          EntityBrokerCode = BrokerCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameBrokerEntityColumns",
						"LookupBrokerEntityId assert(expectTrue(!isNull(EntityId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          Origin = iif(in(['PPS Institutional', 'PPS Beneficiaries Trust', \r",
						"'PPS Staff Funds', 'PPS Institutional Mandate','PPS Risk Reserves', \r",
						"'Dummy Broker'], BrokerName), \r",
						"'Bulked', 'Retail')) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          EffectiveDate,",
						"          Provider,",
						"          DataSource,",
						"          BrokerId = EntityId,",
						"          EmailAddress,",
						"          IDNumber,",
						"          IDType,",
						"          PlaceofIssue,",
						"          BrokerCategory,",
						"          BrokerLevelNumber,",
						"          TelephoneNumber1,",
						"          TelephoneNumber2,",
						"          CellPhoneNumber,",
						"          FaxNumber,",
						"          ContactPerson,",
						"          CorrAddressLine1,",
						"          CorrAddressLine2,",
						"          CorrAddressLine3,",
						"          CorrAddressLine4,",
						"          FICAIndicator,",
						"          BankCode,",
						"          BankName,",
						"          BankBranchCode,",
						"          BankBranchName,",
						"          BankAccountType,",
						"          BankAccountNumber,",
						"          BankAccountHolderName,",
						"          WorkFlowNumber,",
						"          BrokerInUse,",
						"          NoFeesApply,",
						"          RuleEffectiveDate,",
						"          IsValid,",
						"          HashKey,",
						"          Origin",
						"     )) ~> LoadToBrokerAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_brokerage_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "BrokerageSource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "BrokerageEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToBrokerageAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupBrokerageEntityId"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          BrokerageCode as string,",
						"          BrokerageName as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          EmailAddress as string,",
						"          VatRegistrationNumber as string,",
						"          BrokerageCategory as string,",
						"          TelephoneNumber1 as string,",
						"          TelephoneNumber2 as string,",
						"          CellPhoneNumber as string,",
						"          FaxNumber as string,",
						"          ContactPerson as string,",
						"          BrokerageVatRegistered as boolean,",
						"          BrokerageCommpymtfreq as boolean,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          FSPNumber as string,",
						"          WorkFlowNumber as string,",
						"          RuleEffectiveDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrokerageSource",
						"source(output(",
						"          StoreBrokerageId as long,",
						"          StoreBrokerageCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreBrokerageId, BrokerageCode AS StoreBrokerageCode FROM store.entity_all_brokerage',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> BrokerageEntityTable",
						"BrokerageSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Brokerage Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, BrokerageCode, BankCode, BankBranchCode, BankAccountNumber, FSPNumber, WorkFlowNumber)) ~> DerivedColumn",
						"DerivedColumn, BrokerageEntityTable lookup(BrokerageCode == StoreBrokerageCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupBrokerageEntityId",
						"LookupBrokerageEntityId assert(expectTrue(!isNull(StoreBrokerageId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          EffectiveDate,",
						"          Provider,",
						"          DataSource,",
						"          BrokerageId = StoreBrokerageId,",
						"          CorrAddressLine1,",
						"          CorrAddressLine2,",
						"          CorrAddressLine3,",
						"          CorrAddressLine4,",
						"          EmailAddress,",
						"          VatRegistrationNumber,",
						"          BrokerageCategory,",
						"          TelephoneNumber1,",
						"          TelephoneNumber2,",
						"          CellPhoneNumber,",
						"          FaxNumber,",
						"          ContactPerson,",
						"          BrokerageVatRegistered,",
						"          BrokerageCommpymtfreq,",
						"          BankCode,",
						"          BankName,",
						"          BankBranchCode,",
						"          BankBranchName,",
						"          BankAccountType,",
						"          BankAccountNumber,",
						"          BankAccountHolderName,",
						"          FSPNumber,",
						"          WorkFlowNumber,",
						"          RuleEffectiveDate,",
						"          HashKey,",
						"          IsValid",
						"     )) ~> LoadToBrokerageAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_country_codes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "CountryCodesSource",
							"description": "Import data from sql_broker_source"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "CountryCodesReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "LoadToCountryCodes",
							"description": "Export to entity broker stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "LookupCountryCodes"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ISOCountryCode as string,",
						"          ISOCountryDescription as string,",
						"          FLEXCUBECountryCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CountryCodesSource",
						"source(output(",
						"          ReferenceISOCountryCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT ISOCountryCode AS ReferenceISOCountryCode\\nFROM reference.country_codes',",
						"     format: 'query') ~> CountryCodesReferenceTable",
						"LookupCountryCodes alterRow(insertIf(isNull(ReferenceISOCountryCode)),",
						"     updateIf(!isNull(ReferenceISOCountryCode))) ~> AlterRow",
						"split1@Valid, CountryCodesReferenceTable lookup(ISOCountryCode == ReferenceISOCountryCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupCountryCodes",
						"CountryCodesSource split(!isNull(ISOCountryCode),",
						"     disjoint: false) ~> split1@(Valid, Invalid)",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['ISOCountryCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          ISOCountryCode,",
						"          ISOCountryDescription,",
						"          FLEXCUBECountryCode",
						"     )) ~> LoadToCountryCodes",
						"split1@Invalid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_distribution_component_master_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DistributionComponentMasterSource",
							"description": "Import data from sql_broker_source"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "DistributionComponentMasterReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "LoadToDistributionComponentMaster",
							"description": "Export to entity broker stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "LookupDistributionComponentMaster"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          FinFieldNo as short,",
						"          FinComponentDescription as string,",
						"          DisplayName as string,",
						"          RollupID as short,",
						"          StatementHeader as string,",
						"          SumStatementOrder as short,",
						"          StatementOrder as short,",
						"          DistributionComponentKey as short,",
						"          TaxDescription as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionComponentMasterSource",
						"source(output(",
						"          ReferenceDistributionComponentCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT DistributionComponentCode\\nAS ReferenceDistributionComponentCode\\nFROM reference.distribution_component_master',",
						"     format: 'query') ~> DistributionComponentMasterReferenceTable",
						"LookupDistributionComponentMaster alterRow(insertIf(isNull(ReferenceDistributionComponentCode)),",
						"     updateIf(!isNull(ReferenceDistributionComponentCode))) ~> AlterRow",
						"split1@Valid, DistributionComponentMasterReferenceTable lookup(DistributionComponentCode == ReferenceDistributionComponentCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupDistributionComponentMaster",
						"DistributionComponentMasterSource split(!isNull(DistributionComponentCode),",
						"     disjoint: false) ~> split1@(Valid, Invalid)",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['DistributionComponentCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          DistributionComponentCode,",
						"          DistributionComponentName,",
						"          FinFieldNo,",
						"          FinComponentDescription,",
						"          DisplayName,",
						"          RollupID,",
						"          StatementHeader,",
						"          SumStatementOrder,",
						"          StatementOrder,",
						"          DistributionComponentKey,",
						"          TaxDescription",
						"     )) ~> LoadToDistributionComponentMaster",
						"split1@Invalid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "EntitySource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "EntityEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "EntityLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          EntityID as string,",
						"          EntityType as string,",
						"          EntityName as string,",
						"          EmailAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as string,",
						"          CorrAddressline4 as string,",
						"          CorrPostCode as string,",
						"          EntityRegistrationNumber as string,",
						"          YearEndDate as string,",
						"          ValuationDate as string,",
						"          TaxRegistrationNumber as string,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          ContactPerson as string,",
						"          ContactTelephoneNumber as string,",
						"          GIINNumber as string,",
						"          LegalEntityType as string,",
						"          LegalEntityRegistrationNumber as string,",
						"          FinswitchMancoID as string,",
						"          FinswitchBulkID as string,",
						"          FSBRegistrationNumber as string,",
						"          FlexEntitykey as string,",
						"          PAYENumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntitySource",
						"source(output(",
						"          StoreEntityId as long,",
						"          StoreEntityCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreEntityId, EntityCode AS StoreEntityCode FROM store.entity_all_entity',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> EntityEntityTable",
						"EntitySource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Entity Static Data\",",
						"          HashKey = sha2(256, EntityID, EntityType, EntityName, EmailAddress, CorrPostCode, EntityRegistrationNumber, TaxRegistrationNumber, BankCode, BankName, BankBranchCode, BankAccountNumber),",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"EntityLookup assert(expectTrue(!isNull(EntityID), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          YearEndDate = toDate(YearEndDate, 'dd/MM/yyyy'),",
						"          ValuationDate = toDate(ValuationDate, 'dd/MM/yyyy')) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, EntityEntityTable lookup(EntityID == StoreEntityCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> EntityLookup",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          EntityId = StoreEntityId,",
						"          EffectiveDate,",
						"          EntityType,",
						"          EmailAddress,",
						"          CorrAddressline1,",
						"          CorrAddressline2,",
						"          CorrAddressline3,",
						"          CorrAddressline4,",
						"          CorrPostCode,",
						"          EntityRegistrationNumber,",
						"          YearEndDate,",
						"          ValuationDate,",
						"          TaxRegistrationNumber,",
						"          BankCode,",
						"          BankName,",
						"          BankBranchCode,",
						"          BankBranchName,",
						"          BankAccountType,",
						"          BankAccountNumber,",
						"          BankAccountHolderName,",
						"          ContactPerson,",
						"          ContactTelephoneNumber,",
						"          GIINNumber,",
						"          LegalEntityType,",
						"          LegalEntityRegistrationNumber,",
						"          FinswitchMancoID,",
						"          FinswitchBulkID,",
						"          FSBRegistrationNumber,",
						"          FlexEntitykey,",
						"          PAYENumber,",
						"          IsValid,",
						"          HashKey",
						"     )) ~> LoadToEntityAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_authorised_representative_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "AuthorisedRepresentativeSource",
							"description": "Import data from sql_unit_holder_source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityAuthorisedRepresentativeStage",
							"description": "Export to entity UnitHolder stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"60aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          AuthRepID as string,",
						"          AuthRepName as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          Title as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          CorrPostCode as string,",
						"          TelephoneHomeNumber as string,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as string,",
						"          FATCAStatus as string,",
						"          ExpiryDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> AuthorisedRepresentativeSource",
						"AuthorisedRepresentativeSource derive(BatchId = $BatchId,",
						"          Name = toString(null()),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Authorised Representative Static Data\",",
						"          Description = toString(null()),",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"DerivedColumn assert(expectTrue(!isNull(AuthRepID), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          AuthRepCode = AuthRepID,",
						"          AuthRepName,",
						"          IsValid",
						"     )) ~> LoadToEntityAuthorisedRepresentativeStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_broker_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "BrokerSource",
							"description": "Import data from sql_broker_source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityBrokerStage",
							"description": "Export to entity broker stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "DerivedColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          BrokerCode as string,",
						"          BrokerageCode as string,",
						"          BrokerName as string,",
						"          EmailAddress as string,",
						"          IDNumber as long,",
						"          IDType as string,",
						"          PlaceofIssue as string,",
						"          BrokerCategory as string,",
						"          BrokerLevelNumber as integer,",
						"          TelephoneNumber1 as string,",
						"          TelephoneNumber2 as string,",
						"          CellPhoneNumber as string,",
						"          FaxNumber as string,",
						"          ContactPerson as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          FICAIndicator as boolean,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as boolean,",
						"          BankAccountHolderName as string,",
						"          WorkFlowNumber as integer,",
						"          BrokerInUse as boolean,",
						"          NoFeesApply as boolean,",
						"          RuleEffectiveDate as date,",
						"          BrokerKey as string,",
						"          BrokerageKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrokerSource",
						"DerivedColumn assert(expectTrue(!isNull(BrokerCode), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"BrokerSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Broker Static Data\",",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          BrokerCode,",
						"          BrokerageCode,",
						"          BrokerName,",
						"          IsValid",
						"     )) ~> LoadToEntityBrokerStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_brokerage_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "BrokerageSource",
							"description": "Import data from sql_broker_source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityBrokerageStage",
							"description": "Export to entity broker stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "DerivedColumn"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          BrokerageCode as string,",
						"          BrokerageName as string,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as short,",
						"          EmailAddress as string,",
						"          VatRegistrationNumber as string,",
						"          BrokerageCategory as string,",
						"          TelephoneNumber1 as string,",
						"          TelephoneNumber2 as string,",
						"          CellPhoneNumber as string,",
						"          FaxNumber as string,",
						"          ContactPerson as string,",
						"          BrokerageVatRegistered as boolean,",
						"          BrokerageCommpymtfreq as boolean,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          FSPNumber as string,",
						"          WorkFlowNumber as string,",
						"          RuleEffectiveDate as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BrokerageSource",
						"DerivedColumn assert(expectTrue(!isNull(BrokerageCode), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"BrokerageSource derive(Batchid = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Brokerage Static Data\",",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId = Batchid,",
						"          Provider,",
						"          DataSource,",
						"          BrokerageCode,",
						"          BrokerageName,",
						"          IsValid",
						"     )) ~> LoadToEntityBrokerageStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_entity_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "EntitySource",
							"description": "Import data from sql_policy_source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityEntityStage",
							"description": "Export to entity policy stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"59aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          EntityID as string,",
						"          EntityType as string,",
						"          EntityName as string,",
						"          EmailAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as string,",
						"          CorrAddressline4 as string,",
						"          CorrPostCode as string,",
						"          EntityRegistrationNumber as string,",
						"          YearEndDate as string,",
						"          ValuationDate as string,",
						"          TaxRegistrationNumber as string,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          ContactPerson as string,",
						"          ContactTelephoneNumber as string,",
						"          GIINNumber as string,",
						"          LegalEntityType as string,",
						"          LegalEntityRegistrationNumber as string,",
						"          FinswitchMancoID as string,",
						"          FinswitchBulkID as string,",
						"          FSBRegistrationNumber as string,",
						"          FlexEntitykey as string,",
						"          PAYENumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> EntitySource",
						"EntitySource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Entity Static Data\",",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"DerivedColumn assert(expectTrue(!isNull(EntityID), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          EntityCode = EntityID,",
						"          EntityName,",
						"          IsValid",
						"     )) ~> LoadToEntityEntityStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_fund_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FundSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityFundStage",
							"description": "Export to entity fund stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "Message",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"56aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          JSECode as string,",
						"          FundName as string,",
						"          FundStatus as string,",
						"          FundCommencementDate as string,",
						"          FundCategory as string,",
						"          FundFamilyNumber as string,",
						"          FundFamilyDescription as string,",
						"          FundType as string,",
						"          AssetManagerNumber as string,",
						"          Reg28Compliant as boolean,",
						"          ISINCode as string,",
						"          FundRangeOption as string,",
						"          BDANumber as string,",
						"          PriceSource as string,",
						"          TotalExpenseRatio as string,",
						"          AssetManagerDescription as string,",
						"          FundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundSource",
						"FundSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Fund Static Data\",",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\"),",
						"          FundCode = FundID) ~> DerivedColumn",
						"DerivedColumn assert(expectTrue(!isNull(FundCode), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          PPSFundID_TEMP = FundID) ~> Message",
						"Message filter(IsValid == false()) ~> FilterInvalidData",
						"Message sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundCode = FundID,",
						"          PPSFundId = PPSFundID_TEMP,",
						"          JSECode,",
						"          ISINCode,",
						"          FundName,",
						"          FundDescription = FundFamilyDescription,",
						"          CreatedDate,",
						"          IsValid",
						"     )) ~> LoadToEntityFundStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_policy_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicySource",
							"description": "Import data from sql_policy_source"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityPolicyStage",
							"description": "Export to entity policy stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "ProductLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"59aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          ClientID as string,",
						"          PolicyReferenceNumber as string,",
						"          PolicyStatus as string,",
						"          PolicyCreationDate as date,",
						"          PolicyStartDate as date,",
						"          PolicyMaturityDate as date,",
						"          AnniversaryDate as date,",
						"          WorkFlowNumber as string,",
						"          AnniversaryValue as double,",
						"          PolicyEndDate as date,",
						"          RuleEffectiveDate as date,",
						"          RetirementAge as short,",
						"          RetirementDate as date,",
						"          FundRangeOption as string,",
						"          PersonalisedProductName as string,",
						"          WrapFundName as string,",
						"          SourceFundName as string,",
						"          PreferredFund as string,",
						"          ParticipatingEmployerID as string,",
						"          AuthrepID as string,",
						"          InitialInvestmentAmount as double,",
						"          PolicyType as string,",
						"          AnnuityRange as string,",
						"          LatestRule as boolean,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          ProductKey as string,",
						"          AuthorisedRepresentativeKey as string,",
						"          DefaultAnnuity as boolean,",
						"          DefaultAnnuitySourceList as string,",
						"          IntermedSerFee as string,",
						"          OriginalProductCode as string,",
						"          Annuitisation as string,",
						"          SourceFundType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicySource",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"PolicySource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Static Data\",",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\"),",
						"          PolicyNumber = PolicyNumber) ~> DerivedColumn",
						"ProductLookup assert(expectTrue(!isNull(PolicyNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyNumber,",
						"          PolicyReferenceNumber,",
						"          CreatedDate,",
						"          IsValid,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          ClientId = ClientID",
						"     )) ~> LoadToEntityPolicyStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_product_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ProductSource",
							"description": "Import data from sql_product_source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityProductStage",
							"description": "Export to entity Product stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"58aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          ProductStatus as string,",
						"          ProductType as string,",
						"          LegalEntityNumber as string,",
						"          ClientID as short,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as integer,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as long,",
						"          ProductKey as short,",
						"          FlexEntityKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductSource",
						"ProductSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Broker Static Data\",",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\"),",
						"          ProductCode = ProductID) ~> DerivedColumn",
						"DerivedColumn assert(expectTrue(!isNull(ProductCode), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          ProductCode,",
						"          ProductName,",
						"          ProductShortName,",
						"          CreatedDate,",
						"          IsValid",
						"     )) ~> LoadToEntityProductStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_entity_unit_holder_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "UnitHolderSource",
							"description": "Import data from sql_unit_holder_source"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityUnitHolderStage",
							"description": "Export to entity UnitHolder stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidAndMessageColumns",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"60aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as long,",
						"          UnitHolderCategory as string,",
						"          UnitHolderStatus as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          Surname as string,",
						"          Initials as string,",
						"          Title as string,",
						"          IDNumber as long,",
						"          IDType as string,",
						"          PlaceofIssue as string,",
						"          DateofBirth as date,",
						"          MaritalStatusCode as string,",
						"          MaritalStatusDescription as string,",
						"          Gender as string,",
						"          TelephoneHomeNumber as integer,",
						"          TelephoneWorkNumber as integer,",
						"          CellPhoneNumber as integer,",
						"          FaxNumber as integer,",
						"          EmailPrimaryAddress as string,",
						"          EmailSecondaryAddress as string,",
						"          CompanyName as string,",
						"          ContactName as string,",
						"          CompanyRegistrationNumber as string,",
						"          Commencementdate as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          CorrCountry as string,",
						"          CorrPostCode as short,",
						"          ResAddressLine1 as string,",
						"          ResAddressLine2 as string,",
						"          ResAddressLine3 as string,",
						"          ResAddressLine4 as string,",
						"          ResCountry as string,",
						"          ResPostCode as short,",
						"          PreferedMailCode as string,",
						"          PreferedMailDescription as string,",
						"          TaxNumber as string,",
						"          WorkFlowNumber as integer,",
						"          ClientMemberNumber as integer,",
						"          AddressUnknown as boolean,",
						"          Language as string,",
						"          GuardianName as string,",
						"          TaxIdentificationNo_01 as integer,",
						"          AuthRepID as string,",
						"          FicaStatus as string,",
						"          TaxIndentificationNo_02 as string,",
						"          CountryofTaxResidence_02 as string,",
						"          NationalityISO as string,",
						"          Nationality as string,",
						"          CountryOfDomicile as string,",
						"          CountryofTaxResidency_01 as string,",
						"          IndiciaIndicator as string,",
						"          FATCAStatus as boolean,",
						"          AccountHolderType as string,",
						"          ExternalAdministratorRef as boolean,",
						"          ClientID as short,",
						"          FLEXFATCAStatus as string,",
						"          PoliticallyConnectedIndividual as boolean,",
						"          DateofIncorporation as string,",
						"          DIVTaxExemption as string,",
						"          WTIExemption as string,",
						"          WTIDTARates as string,",
						"          UnitHolderType as string,",
						"          CountryOfResidence as string,",
						"          CIFNumber as integer,",
						"          FamilyFees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderSource",
						"UnitHolderSource derive(BatchId = $BatchId,",
						"          Name = toString(null()),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Static Data\",",
						"          Description = toString(null()),",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\"),",
						"          UnitHolderCode = UnitHolderID,",
						"          SAIDNumber = IDNumber) ~> DerivedColumn",
						"DerivedColumn assert(expectTrue(!isNull(UnitHolderCode), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
						"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderCode,",
						"          SAIDNumber,",
						"          UnitHolderName = Name,",
						"          CreatedDate,",
						"          IsValid",
						"     )) ~> LoadToEntityUnitHolderStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_fund_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FundSource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFundAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupFundEntityId"
						},
						{
							"name": "RenameFundEntityColumns",
							"description": "Rename entity fund columns "
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (BatchId),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          JSECode as string,",
						"          FundName as string,",
						"          FundStatus as string,",
						"          FundCommencementDate as string,",
						"          FundCategory as string,",
						"          FundFamilyNumber as string,",
						"          FundFamilyDescription as string,",
						"          FundType as string,",
						"          AssetManagerNumber as string,",
						"          Reg28Compliant as boolean,",
						"          ISINCode as string,",
						"          FundRangeOption as string,",
						"          BDANumber as string,",
						"          PriceSource as string,",
						"          TotalExpenseRatio as string,",
						"          AssetManagerDescription as string,",
						"          FundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundSource",
						"source(output(",
						"          Id as long,",
						"          JSECode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id, JSECode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"FundSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Fund Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, FundStatus, FundCommencementDate, FundCategory, FundFamilyNumber, FundFamilyDescription, \r",
						"FundType, AssetManagerNumber, Reg28Compliant, FundRangeOption, BDANumber, PriceSource, TotalExpenseRatio, AssetManagerDescription, FundKey)) ~> DerivedColumn",
						"DerivedColumn, RenameFundEntityColumns lookup(JSECode == EntityJSECode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupFundEntityId",
						"FundEntityTable select(mapColumn(",
						"          EntityId = Id,",
						"          EntityJSECode = JSECode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameFundEntityColumns",
						"LookupFundEntityId assert(expectTrue(!isNull(EntityId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundId = EntityId,",
						"          EffectiveDate,",
						"          Status = FundStatus,",
						"          FundCommencementDate,",
						"          FundCategory,",
						"          FundFamilyNumber,",
						"          FundFamilyDescription,",
						"          FundType,",
						"          AssetManagerNumber,",
						"          Reg28Compliant,",
						"          FundRangeOption,",
						"          BDANumber,",
						"          PriceSource,",
						"          TotalExpenseRatio,",
						"          AssetManagerDescription,",
						"          IsValid,",
						"          HashKey",
						"     )) ~> LoadToFundAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_fund_distribution_component_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DistributionComponentSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "DistributionFactTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "DistributionComponentMasterReferenceTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFactDistributionComponentStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "DistributionLookup"
						},
						{
							"name": "MasterLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentAmount as double,",
						"          DistributionComponentCPU as double,",
						"          DistributionComponentUnits as double,",
						"          Currency as string,",
						"          ReversalIndicator as boolean,",
						"          ComponentTax as short,",
						"          PaymentNumber as string,",
						"          FactPolicyDistributionComponentTransactionKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionComponentSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          StoreDistributionId as long,",
						"          StoreDistributionNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreDistributionId, DistributionNumber AS StoreDistributionNumber from store.fact_fund_distribution',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DistributionFactTable",
						"source(output(",
						"          StoreDistMasterId as long,",
						"          StoreDistMasterCompCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreDistMasterId, DistributionComponentCode AS StoreDistMasterCompCode from reference.distribution_component_master',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DistributionComponentMasterReferenceTable",
						"DistributionComponentSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Distribution Component Static Data\",",
						"          DistributionDateConverted = toDate(DistributionDate, 'dd/MM/yyyy')) ~> DerivedColumn",
						"MasterLookup assert(expectTrue(!isNull(DistributionDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, DistributionFactTable lookup(DistributionNumber == StoreDistributionNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> DistributionLookup",
						"DistributionLookup, DistributionComponentMasterReferenceTable lookup(DistributionComponentCode == StoreDistMasterCompCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> MasterLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          FundId = StoreFundId,",
						"          PolicyId = StorePolicyId,",
						"          DistributionId = StoreDistMasterId,",
						"          DistributionComponentMasterId = StoreDistMasterId,",
						"          PolicyNumber,",
						"          DistributionComponentCode,",
						"          DistributionComponentName,",
						"          DistributionNumber,",
						"          DistributionDate = DistributionDateConverted,",
						"          DistributionComponentAmount,",
						"          DistributionComponentCPU,",
						"          DistributionComponentUnits,",
						"          Currency,",
						"          ReversalIndicator,",
						"          ComponentTax,",
						"          PaymentNumber,",
						"          FactPolicyDistributionComponentTransactionKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          FundKey,",
						"          DistributionComponentKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFactDistributionComponentStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_fund_distribution_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DistributionSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToDistributionStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          DistributionComponentCode as string,",
						"          DistributionComponentName as string,",
						"          DistributionNumber as string,",
						"          DistributionDate as string,",
						"          DistributionComponentCPU as string,",
						"          FreezeHoldingDate as string,",
						"          FactFundDistributionKey as string,",
						"          FundKey as string,",
						"          DistributionComponentKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DistributionSource",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"DistributionSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Fund Distribution Static Data\",",
						"          HashKey = sha2(256, FundID, DistributionComponentCode, DistributionNumber, FactFundDistributionKey, FundKey),",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"FundLookup assert(expectTrue(!isNull(DistributionNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          DistributionDateConverted = toDate(DistributionDate, 'dd/MM/yyyy'),",
						"          FreezeHoldingDateConverted = toDate(FreezeHoldingDate, 'dd/MM/yyyy')) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundId = StoreFundId,",
						"          FundCode = StoreFundCode,",
						"          DistributionComponentCode,",
						"          DistributionComponentName,",
						"          DistributionNumber,",
						"          DistributionDate = DistributionDateConverted,",
						"          DistributionComponentCPU,",
						"          FreezeHoldingDate = FreezeHoldingDateConverted,",
						"          FactFundDistributionKey,",
						"          FundKey,",
						"          DistributionComponentKey,",
						"          HashKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToDistributionStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_fund_prices_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "InitialFundPricesSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFundPricesStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string ('453a65f2-a485-4750-8830-5aa1026efad8'),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          FundID as string,",
						"          PriceDate as date,",
						"          NAVPrice as double,",
						"          FactPriceKey as integer,",
						"          Fundkey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InitialFundPricesSource",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"InitialFundPricesSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Fund Prices Static Data\") ~> DerivedColumn",
						"FundLookup assert(expectTrue(!isNull(FundID) && !isNull(StoreFundId) && !isNull(PriceDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundId = StoreFundId,",
						"          EffectiveDate = PriceDate,",
						"          NAVPrice,",
						"          FactPriceKey,",
						"          Fundkey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFundPricesStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_fund_transactions_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FundTransactionsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "TransactionSubtypesReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFundTransactionsStage"
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "TransactionSubtypeLookup"
						},
						{
							"name": "FilterDeleted"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          TransactionTypeCode as string,",
						"          TransactionSubTypeCode as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionDate as date,",
						"          PolicyTransactionNumber as string,",
						"          FundTransactionNumber as string,",
						"          GrossAmount as double,",
						"          NetAmount as double,",
						"          Units as double,",
						"          Price as double,",
						"          PriceDate as date,",
						"          AllocationDate as date,",
						"          RealisedProfitLoss as double,",
						"          ReversalIndicator as boolean,",
						"          TransactionTimeStamp as date,",
						"          PolicyReferenceNumber as string,",
						"          DistributionTransactionNumber as string,",
						"          WAC as double,",
						"          Remarks as string,",
						"          FundRatio as double,",
						"          PolicyTransactionStatus as string,",
						"          PolicyTransactionAllocationDate as date,",
						"          RefType as string,",
						"          PaymentMode as string,",
						"          OldTransactionNumber as string,",
						"          TopUpInclusive as boolean,",
						"          UpfrontInterest as double,",
						"          FactFundTransactionKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          TransactionReferenceNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundTransactionsSource",
						"source(output(",
						"          FundEntityId as long,",
						"          FundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS FundEntityId, FundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          PolicyEntityId as long,",
						"          PolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS PolicyEntityId, PolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          ProductEntityId as long,",
						"          ProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS ProductEntityId, ProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          UnitHolderEntityId as long,",
						"          UnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS UnitHolderEntityId, UnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TransactionSubtypesReferenceTable",
						"FilterDeleted derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Transactions Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          PolicyId = PolicyNumber) ~> DerivedColumn",
						"TransactionSubtypeLookup assert(expectTrue(!isNull(FundTransactionNumber) && !isNull(FundID) &&!isNull(ProductID) &&!isNull(UnitHolderID), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          IsDeletion = 0) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == FundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, PolicyEntityTable lookup(FundTransactionsSource@PolicyNumber == PolicyEntityTable@PolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == ProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == UnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, TransactionSubtypesReferenceTable lookup(FundTransactionsSource@TransactionSubTypeCode == TransactionSubtypesReferenceTable@TransactionSubTypeCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> TransactionSubtypeLookup",
						"FundTransactionsSource filter(ReversalIndicator == false()) ~> FilterDeleted",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundId = FundEntityId,",
						"          ProductId = ProductEntityId,",
						"          UnitHolderId = UnitHolderEntityId,",
						"          PolicyId = PolicyEntityId,",
						"          TransactionTypeCode,",
						"          TransactionSubTypeCode,",
						"          FactFundTransactionKey,",
						"          FundTransactionNumber,",
						"          EffectiveDate = TransactionDate,",
						"          PriceDate,",
						"          AllocationDate,",
						"          PolicyTransactionAllocationDate,",
						"          PolicyNumber,",
						"          PolicyTransactionNumber,",
						"          PolicyTransactionStatus,",
						"          PolicyReferenceNumber,",
						"          OldTransactionNumber,",
						"          DistributionTransactionNumber,",
						"          PaymentMode,",
						"          TopUpInclusive,",
						"          GrossAmount,",
						"          NetAmount,",
						"          Units,",
						"          Price,",
						"          RealisedProfitAndLoss = RealisedProfitLoss,",
						"          WAC,",
						"          FundRatio,",
						"          UpfrontInterest,",
						"          TransactionReferenceNumber,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          RefType,",
						"          ReversalIndicator,",
						"          IsValid,",
						"          Remarks,",
						"          IsDeletion",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFundTransactionsStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_fund_transactions_deleted_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FundTransactionsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "TransactionSubtypesReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFundTransactionsStage"
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "TransactionSubtypeLookup"
						},
						{
							"name": "FilterDeleted"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          TransactionTypeCode as string,",
						"          TransactionSubTypeCode as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionDate as date,",
						"          PolicyTransactionNumber as string,",
						"          FundTransactionNumber as string,",
						"          GrossAmount as double,",
						"          NetAmount as double,",
						"          Units as double,",
						"          Price as double,",
						"          PriceDate as date,",
						"          AllocationDate as date,",
						"          RealisedProfitLoss as double,",
						"          ReversalIndicator as boolean,",
						"          TransactionTimeStamp as date,",
						"          PolicyReferenceNumber as string,",
						"          DistributionTransactionNumber as string,",
						"          WAC as double,",
						"          Remarks as string,",
						"          FundRatio as double,",
						"          PolicyTransactionStatus as string,",
						"          PolicyTransactionAllocationDate as date,",
						"          RefType as string,",
						"          PaymentMode as string,",
						"          OldTransactionNumber as string,",
						"          TopUpInclusive as boolean,",
						"          UpfrontInterest as double,",
						"          FactFundTransactionKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          TransactionReferenceNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FundTransactionsSource",
						"source(output(",
						"          FundEntityId as long,",
						"          FundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS FundEntityId, FundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          PolicyEntityId as long,",
						"          PolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS PolicyEntityId, PolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          ProductEntityId as long,",
						"          ProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS ProductEntityId, ProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          UnitHolderEntityId as long,",
						"          UnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS UnitHolderEntityId, UnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     format: 'table') ~> TransactionSubtypesReferenceTable",
						"FilterDeleted derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Transactions Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          PolicyId = PolicyNumber) ~> DerivedColumn",
						"TransactionSubtypeLookup assert(expectTrue(!isNull(FundTransactionNumber) && !isNull(FundID) &&!isNull(ProductID) &&!isNull(UnitHolderID), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          IsDeletion = 0) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == FundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, PolicyEntityTable lookup(FundTransactionsSource@PolicyNumber == PolicyEntityTable@PolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == ProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == UnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, TransactionSubtypesReferenceTable lookup(FundTransactionsSource@TransactionSubTypeCode == TransactionSubtypesReferenceTable@TransactionSubTypeCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> TransactionSubtypeLookup",
						"FundTransactionsSource filter(ReversalIndicator == true()) ~> FilterDeleted",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundId = FundEntityId,",
						"          ProductId = ProductEntityId,",
						"          UnitHolderId = UnitHolderEntityId,",
						"          PolicyId = PolicyEntityId,",
						"          TransactionTypeCode,",
						"          TransactionSubTypeCode,",
						"          FactFundTransactionKey,",
						"          FundTransactionNumber,",
						"          EffectiveDate = TransactionDate,",
						"          PriceDate,",
						"          AllocationDate,",
						"          PolicyTransactionAllocationDate,",
						"          PolicyNumber,",
						"          PolicyTransactionNumber,",
						"          PolicyTransactionStatus,",
						"          PolicyReferenceNumber,",
						"          OldTransactionNumber,",
						"          DistributionTransactionNumber,",
						"          PaymentMode,",
						"          TopUpInclusive,",
						"          GrossAmount,",
						"          NetAmount,",
						"          Units,",
						"          Price,",
						"          RealisedProfitAndLoss = RealisedProfitLoss,",
						"          WAC,",
						"          FundRatio,",
						"          UpfrontInterest,",
						"          TransactionReferenceNumber,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          RefType,",
						"          ReversalIndicator,",
						"          IsValid,",
						"          Remarks,",
						"          IsDeletion",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFundTransactionsStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_initial_policy_fund_ratio_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "InitialPolicyFundRatioSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToInitialPolicyFundRatioStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string ('453a65f2-a485-4750-8830-5aa1026efad8'),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as string,",
						"          FundID as string,",
						"          AssetAllocationRatio as double,",
						"          RuleEffectiveDate as date,",
						"          Units as double,",
						"          WAC as double,",
						"          Amount as double,",
						"          PolicyTransactionNumber as long,",
						"          PolicyInitialAllocationKey as integer,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          FundKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> InitialPolicyFundRatioSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"InitialPolicyFundRatioSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Initial Policy Fund Ratio Static Data\") ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyId = StorePolicyId,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          FundId = StoreFundId,",
						"          PolicyNumber,",
						"          AssetAllocationRatio,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          Units,",
						"          WAC,",
						"          Amount,",
						"          PolicyTransactionNumber,",
						"          PolicyInitialAllocationKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          FundKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToInitialPolicyFundRatioStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_load_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "LoadSource"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToEntityLoadStage",
							"description": "Export to entity fund stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidRecord",
							"description": "Export invalid record"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add derived columns"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "IsValid",
							"description": "Derive valid and message columns"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "RenameLoadCode"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string (\"56aeacaf-724d-4e44-b200-398edc31ec0d\"),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          LoadID as short,",
						"          LoadDescription as string,",
						"          LoadValue as double,",
						"          SlabNumber as integer,",
						"          SlabFromAmount as double,",
						"          SlabToAmount as double,",
						"          LoadCalcMethod as string,",
						"          LoadType as string,",
						"          LoadBasis as string,",
						"          LoadKey as long",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> LoadSource",
						"RenameLoadCode derive(BatchId = $BatchId,",
						"          Name = toString(null()),",
						"          Provider = \"PPS\",",
						"          DataSource = \"Load Static Data\",",
						"          Description = toString(null()),",
						"          CreatedDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"DerivedColumn assert(expectTrue(!isNull(LoadCode) && !isNull(SlabNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> IsValid",
						"IsValid filter(IsValid == false()) ~> FilterInvalidData",
						"LoadSource select(mapColumn(",
						"          LoadCode = LoadID,",
						"          LoadDescription,",
						"          LoadValue,",
						"          SlabNumber,",
						"          SlabFromAmount,",
						"          SlabToAmount,",
						"          LoadCalcMethod,",
						"          LoadType,",
						"          LoadBasis,",
						"          LoadKey",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameLoadCode",
						"IsValid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          LoadCode,",
						"          LoadDescription,",
						"          LoadValue,",
						"          SlabNumber,",
						"          SlabFromAmount,",
						"          SlabToAmount,",
						"          LoadCalcMethod,",
						"          LoadType,",
						"          LoadBasis,",
						"          LoadKey,",
						"          IsValid",
						"     )) ~> LoadToEntityLoadStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicySource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "DefaultAnnuityReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupPolicyEntityId"
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "LookupDefaultAnnuity"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          ClientID as string,",
						"          PolicyReferenceNumber as string,",
						"          PolicyStatus as string,",
						"          PolicyCreationDate as date,",
						"          PolicyStartDate as date,",
						"          PolicyMaturityDate as date,",
						"          AnniversaryDate as date,",
						"          WorkFlowNumber as string,",
						"          AnniversaryValue as double,",
						"          PolicyEndDate as date,",
						"          RuleEffectiveDate as date,",
						"          RetirementAge as short,",
						"          RetirementDate as date,",
						"          FundRangeOption as string,",
						"          PersonalisedProductName as string,",
						"          WrapFundName as string,",
						"          SourceFundName as string,",
						"          PreferredFund as string,",
						"          ParticipatingEmployerID as string,",
						"          AuthrepID as string,",
						"          InitialInvestmentAmount as double,",
						"          PolicyType as string,",
						"          AnnuityRange as string,",
						"          LatestRule as boolean,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          ProductKey as string,",
						"          AuthorisedRepresentativeKey as string,",
						"          DefaultAnnuity as boolean,",
						"          DefaultAnnuitySourceList as string,",
						"          IntermedSerFee as string,",
						"          OriginalProductCode as string,",
						"          Annuitisation as string,",
						"          SourceFundType as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicySource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyPolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyPolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          DefaultAnnuityPolicyNumber as string,",
						"          DefaultAnnuityProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT PolicyNumber AS DefaultAnnuityPolicyNumber, ProductCode AS DefaultAnnuityProductCode FROM reference.policy_default_annuity_source',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> DefaultAnnuityReferenceTable",
						"PolicySource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, UnitHolderID, ProductID, ClientID, PolicyReferenceNumber, PolicyStatus, PolicyCreationDate, PolicyStartDate, PolicyMaturityDate, AnniversaryDate, WorkFlowNumber, \r",
						"AnniversaryValue, PolicyEndDate, RuleEffectiveDate, RetirementAge, RetirementDate, FundRangeOption, PersonalisedProductName, WrapFundName, SourceFundName, PreferredFund, \r",
						"ParticipatingEmployerID, AuthrepID, InitialInvestmentAmount, PolicyType, AnnuityRange, LatestRule, PolicyKey, UnitHolderKey, ProductKey, AuthorisedRepresentativeKey, \r",
						"DefaultAnnuity, DefaultAnnuitySourceList, IntermedSerFee, OriginalProductCode, Annuitisation, SourceFundType),",
						"          PolicyNumber = toString(PolicyNumber)) ~> DerivedColumn",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyPolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPolicyEntityId",
						"LookupDefaultAnnuity assert(expectTrue(!isNull(StorePolicyId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"LookupPolicyEntityId, DefaultAnnuityReferenceTable lookup(PolicyNumber == DefaultAnnuityPolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupDefaultAnnuity",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          EffectiveDate,",
						"          Provider,",
						"          DataSource,",
						"          PolicyId = StorePolicyId,",
						"          PolicyReferenceNumber,",
						"          PolicyStatus,",
						"          PolicyCreationDate,",
						"          PolicyStartDate,",
						"          PolicyMaturityDate,",
						"          AnniversaryDate,",
						"          WorkFlowNumber,",
						"          AnniversaryValue,",
						"          PolicyEndDate,",
						"          RuleEffectiveDate,",
						"          RetirementAge,",
						"          RetirementDate,",
						"          FundRangeOption,",
						"          PersonalisedProductName,",
						"          WrapFundName,",
						"          SourceFundName,",
						"          PreferredFund,",
						"          ParticipatingEmployerCode = ParticipatingEmployerID,",
						"          AuthrepID,",
						"          InitialInvestmentAmount,",
						"          PolicyType,",
						"          AnnuityRange,",
						"          LatestRule,",
						"          AuthorisedRepresentativeKey,",
						"          DefaultAnnuity,",
						"          DefaultAnnuitySourceList = DefaultAnnuityProductCode,",
						"          IntermedSerFee,",
						"          OriginalProductCode,",
						"          Annuitisation,",
						"          SourceFundType,",
						"          IsValid,",
						"          HashKey",
						"     )) ~> LoadToPolicyAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_beneficiaries_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyBeneficiariesSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyBeneficiariesStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FilterDeleted"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string ('453a65f2-a485-4750-8830-5aa1026efad8'),",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          BeneficiaryID as long,",
						"          UnitHolderID as string,",
						"          ClientID as short,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          BeneficiaryFirstName as string,",
						"          BeneficiaryMiddleName as string,",
						"          BeneficiaryLastName as string,",
						"          BeneficiaryType as string,",
						"          BeneficiaryRel as string,",
						"          IDNumber as string,",
						"          BeneficiaryPercentage as short,",
						"          BeneficiaryAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as short,",
						"          CorrAddressline4 as string,",
						"          DateOfBirth as date,",
						"          RuleEffectiveDate as date,",
						"          EmailAddress as string,",
						"          TelephoneHomeNumber as long,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as integer,",
						"          ModifiedStatus as string,",
						"          PolicyBeneficiaryKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyBeneficiariesSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"FilterDeleted derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Beneficiaries Static Data\") ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          IsDeletion = 0) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"PolicyBeneficiariesSource filter(ModifiedStatus != 'D') ~> FilterDeleted",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          BeneficiaryID,",
						"          UnitHolderID = StoreUnitHolderId,",
						"          ClientID,",
						"          ProductID = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          PolicyNumber,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          PolicyBeneficiaryKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          BeneficiaryFirstName,",
						"          BeneficiaryMiddleName,",
						"          BeneficiaryLastName,",
						"          BeneficiaryType,",
						"          BeneficiaryRel,",
						"          IDNumber,",
						"          BeneficiaryPercentage,",
						"          BeneficiaryAddress,",
						"          CorrAddressline1,",
						"          CorrAddressline2,",
						"          CorrAddressline3,",
						"          CorrAddressline4,",
						"          DateOfBirth,",
						"          EmailAddress,",
						"          TelephoneHomeNumber,",
						"          TelephoneWorkNumber,",
						"          CellPhoneNumber,",
						"          ModifiedStatus,",
						"          IsValid,",
						"          IsDeletion",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToPolicyBeneficiariesStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_beneficiaries_deleted_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyBeneficiariesSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyBeneficiariesStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FilterDeleted"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          BeneficiaryID as long,",
						"          UnitHolderID as string,",
						"          ClientID as short,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          BeneficiaryFirstName as string,",
						"          BeneficiaryMiddleName as string,",
						"          BeneficiaryLastName as string,",
						"          BeneficiaryType as string,",
						"          BeneficiaryRel as string,",
						"          IDNumber as string,",
						"          BeneficiaryPercentage as short,",
						"          BeneficiaryAddress as string,",
						"          CorrAddressline1 as string,",
						"          CorrAddressline2 as string,",
						"          CorrAddressline3 as short,",
						"          CorrAddressline4 as string,",
						"          DateOfBirth as date,",
						"          RuleEffectiveDate as date,",
						"          EmailAddress as string,",
						"          TelephoneHomeNumber as long,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as integer,",
						"          ModifiedStatus as string,",
						"          PolicyBeneficiaryKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyBeneficiariesSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"FilterDeleted derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Policy Beneficiaries Static Data\",",
						"          HashKey = sha2(256, UnitHolderID, ProductID, PolicyNumber, RuleEffectiveDate, PolicyBeneficiaryKey, ProductKey, PolicyKey, UnitHolderKey)) ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          IsDeletion = 0) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"PolicyBeneficiariesSource filter(ModifiedStatus == 'D') ~> FilterDeleted",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          BeneficiaryID,",
						"          UnitHolderID = StoreUnitHolderId,",
						"          ClientID,",
						"          ProductID = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          PolicyNumber,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          PolicyBeneficiaryKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          BeneficiaryFirstName,",
						"          BeneficiaryMiddleName,",
						"          BeneficiaryLastName,",
						"          BeneficiaryType,",
						"          BeneficiaryRel,",
						"          IDNumber,",
						"          BeneficiaryPercentage,",
						"          BeneficiaryAddress,",
						"          CorrAddressline1,",
						"          CorrAddressline2,",
						"          CorrAddressline3,",
						"          CorrAddressline4,",
						"          DateOfBirth,",
						"          EmailAddress,",
						"          TelephoneHomeNumber,",
						"          TelephoneWorkNumber,",
						"          CellPhoneNumber,",
						"          ModifiedStatus,",
						"          IsValid,",
						"          IsDeletion",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToPolicyBeneficiariesStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_broker_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyBrokerSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_prod_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyBrokerStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "BrokerLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          BrokerCode as string,",
						"          RuleEffectiveDate as date,",
						"          SplitPercentage as short,",
						"          PolicyKey as integer,",
						"          BrokerKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyBrokerSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreBrokerId as long,",
						"          StoreBrokerCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreBrokerId, BrokerCode AS StoreBrokerCode FROM store.entity_all_broker',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"PolicyBrokerSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Broker Static Data\") ~> DerivedColumn",
						"BrokerLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(BrokerCode == StoreBrokerCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> BrokerLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyId = StorePolicyId,",
						"          BrokerId = StoreBrokerId,",
						"          PolicyNumber,",
						"          BrokerCode,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          SplitPercentage,",
						"          PolicyKey,",
						"          BrokerKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToPolicyBrokerStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_prod_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_cession_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyCessionSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "TransactionEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FromUnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ToUnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyCessionStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "TransactionLookup"
						},
						{
							"name": "FromUnitHolderLookup"
						},
						{
							"name": "ToUnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          CessionType as string,",
						"          Cessionary as string,",
						"          CessionDate as string,",
						"          TransactionNumber as string,",
						"          PolicyNumber as string,",
						"          CessionRemarks as string,",
						"          UnitHolderFromID as string,",
						"          UnitHolderToID as string,",
						"          RuleEffectiveDate as string,",
						"          PolicyKey as integer,",
						"          FromUnitHolderKey as integer,",
						"          ToUnitHolderKey as integer",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyCessionSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreTransactionId as long,",
						"          StoreTransactionNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreTransactionId, FundTransactionNumber AS StoreTransactionNumber FROM store.fact_policy_fund_transactions',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TransactionEntityTable",
						"source(output(",
						"          StoreFromUnitHolderId as long,",
						"          StoreFromUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFromUnitHolderId, UnitHolderCode AS StoreFromUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FromUnitHolderEntityTable",
						"source(output(",
						"          StoreToUnitHolderId as long,",
						"          StoreToUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreToUnitHolderId, UnitHolderCode AS StoreToUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ToUnitHolderEntityTable",
						"PolicyCessionSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Cession Static Data\",",
						"          ClientIdPlaceholder = 0,",
						"          CessionDate = toDate(CessionDate, 'dd/MM/yyyy'),",
						"          RuleEffectiveDate = toDate(RuleEffectiveDate, 'dd/MM/yyyy')) ~> DerivedColumn",
						"ToUnitHolderLookup assert(expectTrue(!isNull(StoreTransactionId) && !isNull(StorePolicyId) && !isNull(CessionDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, TransactionEntityTable lookup(TransactionNumber == StoreTransactionNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> TransactionLookup",
						"TransactionLookup, FromUnitHolderEntityTable lookup(UnitHolderFromID == StoreFromUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FromUnitHolderLookup",
						"FromUnitHolderLookup, ToUnitHolderEntityTable lookup(UnitHolderToID == StoreToUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ToUnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyId = StorePolicyId,",
						"          TransactonId = StoreTransactionId,",
						"          UnitHolderFromId = StoreFromUnitHolderId,",
						"          UnitHolderToId = StoreToUnitHolderId,",
						"          CessionType,",
						"          Cessionary,",
						"          CessionDate,",
						"          TransactionNumber,",
						"          PolicyNumber,",
						"          CessionRemarks,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          PolicyKey,",
						"          FromUnitHolderKey,",
						"          ToUnitHolderKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToPolicyCessionStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_deal_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DealSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "LoadFactTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToDealStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "LoadLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          PolicyNumber as string,",
						"          LevelIndicator as string,",
						"          Status as string,",
						"          StartDate as date,",
						"          EndDate as date,",
						"          LoadID as string,",
						"          DealPercentage as double,",
						"          TaxType as string,",
						"          DealTransactionNumber as string,",
						"          PolicyDealKey as string,",
						"          ProductKey as short,",
						"          PolicyKey as string,",
						"          LoadKey as short,",
						"          UnitHolderKey as string,",
						"          SlabNumber as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DealSource",
						"source(output(",
						"          PolicyEntityId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS PolicyEntityId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          ProductEntityId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS ProductEntityId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          UnitHolderEntityId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS UnitHolderEntityId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreLoadId as long,",
						"          StoreLoadCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreLoadId, LoadCode as StoreLoadCode FROM store.fact_load',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> LoadFactTable",
						"DealSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Deal Static Data\",",
						"          HashKey = sha2(256, UnitHolderID, ProductID, PolicyNumber, StartDate, EndDate, LoadID, DealTransactionNumber, PolicyDealKey, ProductKey, PolicyKey, LoadKey, UnitHolderKey),",
						"          LoadIdPlaceholder = 0) ~> DerivedColumn",
						"LoadLookup assert(expectTrue(!isNull(DealTransactionNumber) && !isNull(UnitHolderEntityId) && !isNull(ProductEntityId) && !isNull(PolicyEntityId) && !isNull(StoreLoadId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, LoadFactTable lookup(LoadID == StoreLoadCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LoadLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          DealTransactionNumber,",
						"          UnitHolderId = UnitHolderEntityId,",
						"          ProductID = ProductEntityId,",
						"          PolicyId = PolicyEntityId,",
						"          LoadId = StoreLoadId,",
						"          PolicyDealKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          LoadKey,",
						"          UnitHolderKey,",
						"          SlabNumber,",
						"          LevelIndicator,",
						"          Status,",
						"          StartDate,",
						"          EndDate,",
						"          DealPercentage,",
						"          TaxType,",
						"          HashKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToDealStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_default_annuity_source_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyDefaultAnnuitySourceSource",
							"description": "Import data from sql_broker_source"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "PolicyDefaultAnnuitySourceReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyDefaultAnnuitySource",
							"description": "Export to entity broker stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "LookupPolicyDefaultAnnuitySource"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          ProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyDefaultAnnuitySourceSource",
						"source(output(",
						"          ReferencePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT PolicyNumber\\nAS ReferencePolicyNumber\\nFROM reference.policy_default_annuity_source',",
						"     format: 'query') ~> PolicyDefaultAnnuitySourceReferenceTable",
						"LookupPolicyDefaultAnnuitySource alterRow(insertIf(isNull(ReferencePolicyNumber)),",
						"     updateIf(!isNull(ReferencePolicyNumber))) ~> AlterRow",
						"split1@Valid, PolicyDefaultAnnuitySourceReferenceTable lookup(PolicyNumber == ReferencePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupPolicyDefaultAnnuitySource",
						"PolicyDefaultAnnuitySourceSource split(!isNull(PolicyNumber) && !isNull(ProductCode),",
						"     disjoint: false) ~> split1@(Valid, Invalid)",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['PolicyNumber'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          PolicyNumber,",
						"          ProductCode",
						"     )) ~> LoadToPolicyDefaultAnnuitySource",
						"split1@Invalid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_fee_statement_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FeeStatementComponentSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "TransactionEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFactPolicyFeeStaementStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "TransactionLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ClientID as string,",
						"          InvoiceNumber as string,",
						"          InvoiceDate as string,",
						"          TransactionDate as string,",
						"          ProductID as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionNumber as string,",
						"          ContributionAmount as double,",
						"          FeeType as string,",
						"          FeePercentage as double,",
						"          FeeAmount as double,",
						"          FeeStatementKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FeeTypekey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FeeStatementComponentSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreTransactionId as long,",
						"          StoreTransactionNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreTransactionId, FundTransactionNumber AS StoreTransactionNumber FROM store.fact_policy_fund_transactions',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TransactionEntityTable",
						"FeeStatementComponentSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fee Statement Static Data\",",
						"          ConvInvoiceDate = toDate(InvoiceDate, 'yyyy-MM-dd'),",
						"          ConvTransactionDate = toDate(TransactionDate, 'yyyy-MM-dd')) ~> DerivedColumn",
						"TransactionLookup assert(expectTrue(!isNull(InvoiceDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, TransactionEntityTable lookup(TransactionNumber == StoreTransactionNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> TransactionLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          TransactionId = StoreTransactionId,",
						"          PolicyNumber,",
						"          TransactionNumber,",
						"          ClientId = ClientID,",
						"          InvoiceNumber,",
						"          InvoiceDate = ConvInvoiceDate,",
						"          TransactionDate = ConvTransactionDate,",
						"          ContributionAmount,",
						"          FeeType,",
						"          FeePercentage,",
						"          FeeAmount,",
						"          FeeStatementKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          FeeTypekey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFactPolicyFeeStaementStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_fund_commission_statement_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "CommissionStatementSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "TransactionsTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "BrokerEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "BrokerageEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFundTransactionsStage"
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData",
							"description": "Assert that condition on columns is met\n\n"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "TransactionLookup"
						},
						{
							"name": "BrokerLookup"
						},
						{
							"name": "BrokerageLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ClientID as string,",
						"          BrokerageCode as string,",
						"          InvoiceNumber as string,",
						"          InvoiceDate as string,",
						"          PriceDate as string,",
						"          ProductID as string,",
						"          BrokerCode as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          TransactionNumber as string,",
						"          ContributionAmount as string,",
						"          CommissionType as string,",
						"          CommissionPercentage as double,",
						"          CommissionAmount as double,",
						"          VATAmount as double,",
						"          CommissionTotal as double,",
						"          FundID as string,",
						"          CommissionStatementKey as string,",
						"          BrokerKey as string,",
						"          BrokerageKey as string,",
						"          Policykey as string,",
						"          ProductKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> CommissionStatementSource",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode  AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreTransactionId as long,",
						"          StoreTransactionTransactionNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id as StoreTransactionId, FundTransactionNumber as StoreTransactionTransactionNumber FROM store.fact_policy_fund_transactions',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> TransactionsTable",
						"source(output(",
						"          StoreBrokerId as long,",
						"          StoreBrokerBrokerCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreBrokerId, BrokerCode as StoreBrokerBrokerCode FROM store.entity_all_broker',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> BrokerEntityTable",
						"source(output(",
						"          StoreBrokerageId as long,",
						"          StoreBrokerageBrokerageCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id as StoreBrokerageId, BrokerageCode as StoreBrokerageBrokerageCode FROM store.entity_all_brokerage',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> BrokerageEntityTable",
						"CommissionStatementSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Commision Statement Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
						"BrokerageLookup assert(expectTrue(!isNull(StorePolicyId)&& !isNull(StoreFundId) && !isNull(InvoiceDate) && !isNull(StoreProductId)&& !isNull(StoreUnitHolderId)&& !isNull(StoreBrokerId)&& !isNull(StoreBrokerageId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          InvoiceDateCoverted = toDate(InvoiceDate, 'yyyy-MM-dd'),",
						"          PriceDateConverted = toDate(PriceDate, 'yyyy-MM-dd')) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, TransactionsTable lookup(TransactionNumber == StoreTransactionTransactionNumber,",
						"     multiple: true,",
						"     broadcast: 'auto',",
						"     pickup: 'any')~> TransactionLookup",
						"TransactionLookup, BrokerEntityTable lookup(BrokerCode == StoreBrokerBrokerCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> BrokerLookup",
						"BrokerLookup, BrokerageEntityTable lookup(BrokerageCode == StoreBrokerageBrokerageCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> BrokerageLookup",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          ClientId = ClientID,",
						"          BrokerageId = StoreBrokerageId,",
						"          BrokerId = StoreBrokerId,",
						"          ProductId = StoreProductId,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          PolicyId = StorePolicyId,",
						"          FundId = StoreFundId,",
						"          TransactionId = StoreTransactionId,",
						"          BrokerageCode,",
						"          ProductCode = ProductID,",
						"          BrokerCode,",
						"          UnitHolderCode = UnitHolderID,",
						"          FundCode = FundID,",
						"          PolicyNumber,",
						"          InvoiceNumber,",
						"          InvoiceDate = InvoiceDateCoverted,",
						"          PriceDate = PriceDateConverted,",
						"          TransactionNumber,",
						"          ContributionAmount,",
						"          CommissionType,",
						"          CommissionPercentage,",
						"          CommissionAmount,",
						"          VATAmount,",
						"          CommissionTotal,",
						"          CommissionStatementKey,",
						"          BrokerKey,",
						"          BrokerageKey,",
						"          Policykey,",
						"          ProductKey,",
						"          UnitHolderKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFundTransactionsStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_fund_holdings_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "DailyHoldingsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToDailyHoldingsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          UnitHolderID as string,",
						"          Units as double,",
						"          NAVPrice as double,",
						"          WAC as double,",
						"          BookValue as double,",
						"          MarketValue as double,",
						"          PriceDate as date,",
						"          HoldingsDate as date,",
						"          PolicyKey as string,",
						"          ProductKey as string,",
						"          Fundkey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DailyHoldingsSource",
						"source(output(",
						"          FundEntityId as long,",
						"          FundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS FundEntityId, FundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          PolicyEntityId as long,",
						"          PolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS PolicyEntityId, PolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          ProductEntityId as long,",
						"          ProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS ProductEntityId, ProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          UnitHolderEntityId as long,",
						"          UnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS UnitHolderEntityId, UnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"DailyHoldingsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Fund Holdings Static Data\",",
						"          EffectiveDate = HoldingsDate) ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(DailyHoldingsSource@PolicyNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == FundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, PolicyEntityTable lookup(DailyHoldingsSource@PolicyNumber == PolicyEntityTable@PolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == ProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == UnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          PolicyId = PolicyEntityId,",
						"          ProductId = ProductEntityId,",
						"          FundId = FundEntityId,",
						"          UnitHolderId = UnitHolderEntityId,",
						"          Units,",
						"          NAVPrice,",
						"          WAC,",
						"          BookValue,",
						"          MarketValue,",
						"          PriceDate,",
						"          EffectiveDate,",
						"          PolicyKey,",
						"          ProductKey,",
						"          FundKey = Fundkey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToDailyHoldingsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_fund_transaction_fee_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "TransactionFeeSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "LoadFactTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFactTransactionFeeStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "LoadLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PolicyTransactionNumber as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          FeeCode as string,",
						"          FeeDescription as string,",
						"          FeePercentage as double,",
						"          FundTransactionNumber as string,",
						"          Amount as double,",
						"          ReversalIndicator as boolean,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as string,",
						"          ProductKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          LoadKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TransactionFeeSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          StoreLoadId as long,",
						"          StoreLoadLoadCode as string,",
						"          StoreLoadKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreLoadId, LoadCode AS StoreLoadLoadCode, LoadKey AS StoreLoadKey FROM store.fact_load',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> LoadFactTable",
						"TransactionFeeSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Transaction Fee Static Data\") ~> DerivedColumn",
						"LoadLookup assert(expectTrue(!isNull(FactFundFeeTransactionKey), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, LoadFactTable lookup(LoadKey == StoreLoadKey,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LoadLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: 'concat(\\'errors/\\', $FileDirectory)',",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          FundId = StoreFundId,",
						"          PolicyId = StorePolicyId,",
						"          LoadId = StoreLoadId,",
						"          PolicyNumber,",
						"          PolicyTransactionNumber,",
						"          FeeCode,",
						"          FeeDescription,",
						"          FeePercentage,",
						"          FundTransactionNumber,",
						"          Amount,",
						"          ReversalIndicator,",
						"          OldTransactionNumber,",
						"          FactFundFeeTransactionKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          LoadKey,",
						"          IsValid,",
						"          LoadId = StoreLoadId",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFactTransactionFeeStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_lives_assured_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyLivesAssuredSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToInitialPolicyFundRatioStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FilterDeleted"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          LivesAssuredNumber as string,",
						"          PolicyNumber as string,",
						"          ConstituentStatus as string,",
						"          ConstituentType as string,",
						"          ConstituentDescription as string,",
						"          ConstituentRelationship as string,",
						"          ConstituentID as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          DateofBirth as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          RuleEffectiveDate as date,",
						"          ClientID as string,",
						"          ModifiedStatus as string,",
						"          PolicyLifeAssuredKey as string,",
						"          PolicyKey as string,",
						"          ProductKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyLivesAssuredSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"FilterDeleted derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Policy Lives Assured Static Data\") ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(LivesAssuredNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          IsDeletion = 0) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"PolicyLivesAssuredSource filter(ModifiedStatus != 'D') ~> FilterDeleted",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          ClientId = ClientID,",
						"          ConstituentId = ConstituentID,",
						"          LivesAssuredNumber,",
						"          PolicyNumber,",
						"          ConstituentStatus,",
						"          ConstituentType,",
						"          ConstituentDescription,",
						"          ConstituentRelationship,",
						"          FirstNames,",
						"          MiddleNames,",
						"          LastName,",
						"          DateofBirth,",
						"          CorrAddressLine1,",
						"          CorrAddressLine2,",
						"          CorrAddressLine3,",
						"          CorrAddressLine4,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          ModifiedStatus,",
						"          PolicyLifeAssuredKey,",
						"          PolicyKey,",
						"          ProductKey,",
						"          IsValid,",
						"          IsDeletion",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToInitialPolicyFundRatioStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_lives_assured_deleted_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PolicyLivesAssuredSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToInitialPolicyFundRatioStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FilterDeleted"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          ProductID as string,",
						"          LivesAssuredNumber as string,",
						"          PolicyNumber as string,",
						"          ConstituentStatus as string,",
						"          ConstituentType as string,",
						"          ConstituentDescription as string,",
						"          ConstituentRelationship as string,",
						"          ConstituentID as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          LastName as string,",
						"          DateofBirth as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          RuleEffectiveDate as date,",
						"          ClientID as string,",
						"          ModifiedStatus as string,",
						"          PolicyLifeAssuredKey as string,",
						"          PolicyKey as string,",
						"          ProductKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PolicyLivesAssuredSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"FilterDeleted derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Policy Lives Assured Static Data\",",
						"          HashKey = sha2(256, UnitHolderID, ProductID, PolicyNumber, RuleEffectiveDate, ProductKey, PolicyKey, PolicyLifeAssuredKey),",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(LivesAssuredNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError(),",
						"          IsDeletion = 0) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"PolicyLivesAssuredSource filter(ModifiedStatus == 'D') ~> FilterDeleted",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          ClientId = ClientID,",
						"          ConstituentId = ConstituentID,",
						"          LivesAssuredNumber,",
						"          PolicyNumber,",
						"          ConstituentStatus,",
						"          ConstituentType,",
						"          ConstituentDescription,",
						"          ConstituentRelationship,",
						"          FirstNames,",
						"          MiddleNames,",
						"          LastName,",
						"          DateofBirth,",
						"          CorrAddressLine1,",
						"          CorrAddressLine2,",
						"          CorrAddressLine3,",
						"          CorrAddressLine4,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          ModifiedStatus,",
						"          PolicyLifeAssuredKey,",
						"          PolicyKey,",
						"          ProductKey,",
						"          IsValid,",
						"          IsDeletion",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToInitialPolicyFundRatioStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_payee_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "PayeeSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPayeeStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          PayeeName as string,",
						"          PayeeTypeCode as string,",
						"          PayeeTypeDescription as string,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          ProductID as string,",
						"          PayeeNetAmount as double,",
						"          PayeeKey as integer,",
						"          ProductKey as short,",
						"          PolicyKey as integer,",
						"          UnitHolderKey as integer,",
						"          PaymentDate as date,",
						"          PaymentMode as string,",
						"          SequenceNumber as integer,",
						"          TransactionTypeIndicator as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> PayeeSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"PayeeSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Payee Static Data\",",
						"          HashKey = sha2(256, UnitHolderID, ProductID, PolicyNumber, PaymentDate, ProductKey, PolicyKey, UnitHolderKey, SequenceNumber),",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(ProductID) && !isNull(PaymentDate) && !isNull(SequenceNumber) && !isNull(PayeeKey), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          PayeeName,",
						"          PayeeTypeCode,",
						"          PayeeTypeDescription,",
						"          PolicyNumber,",
						"          PolicyTransactionNumber,",
						"          PayeeNetAmount,",
						"          PayeeKey,",
						"          ProductKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          PaymentDate,",
						"          PaymentMode,",
						"          SequenceNumber,",
						"          TransactionTypeIndicator,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToPayeeStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_standing_instruction_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "StandingInstructionAllocationsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FromFundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ToFundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "StandingInstructionFactTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToStandingInstructionAllocationsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "FromFundLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "ToFundLookup"
						},
						{
							"name": "StandingInstructionLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          RuleEffectiveDate as date,",
						"          SINumber as string,",
						"          FromFundCode as string,",
						"          ToFundCode as string,",
						"          FromFundRatio as short,",
						"          ToFundRatio as short,",
						"          FactPolicyStandingInstructionAllocationKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          FromFundKey as string,",
						"          StandingInstructionKey as string,",
						"          ToFundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StandingInstructionAllocationsSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          FromStoreFundId as long,",
						"          FromStoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS FromStoreFundId, FundCode AS FromStoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FromFundEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          ToStoreFundId as long,",
						"          ToStoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS ToStoreFundId, FundCode AS ToStoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ToFundEntityTable",
						"source(output(",
						"          StoreSiId as long,",
						"          StoreSiSiNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreSiId, SINumber AS StoreSiSiNumber FROM store.fact_policy_standing_instruction',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> StandingInstructionFactTable",
						"StandingInstructionAllocationsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Allocations Static Data\",",
						"          HashKey = sha2(256, UnitHolderID, FromFundCode, PolicyNumber, ToFundCode, PolicyKey, UnitHolderKey),",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"StandingInstructionLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, FromFundEntityTable lookup(FromFundCode == FromStoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FromFundLookup",
						"ToFundLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FromFundLookup, ToFundEntityTable lookup(ToFundCode == ToStoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ToFundLookup",
						"UnitHolderLookup, StandingInstructionFactTable lookup(SINumber == StoreSiSiNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> StandingInstructionLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          PolicyId = StorePolicyId,",
						"          FromFundId = FromStoreFundId,",
						"          ToFundId = ToStoreFundId,",
						"          SIId = StoreSiId,",
						"          PolicyNumber,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          SINumber,",
						"          FromFundCode,",
						"          ToFundCode,",
						"          FromFundRatio,",
						"          ToFundRatio,",
						"          FactPolicyStandingInstructionAllocationKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          FromFundKey,",
						"          ToFundKey,",
						"          StandingInstructionKey,",
						"          HashKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToStandingInstructionAllocationsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_policy_standing_instruction_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "StandingInstructionAllocationsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToStandingInstructionAllocationsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          SINumber as string,",
						"          SIType as string,",
						"          AnnuitySIAllocationType as string,",
						"          SIStartDate as date,",
						"          SIEndDate as date,",
						"          SIValue as double,",
						"          SIFrequency as string,",
						"          SIEscalationFrequency as string,",
						"          SIEscalationMode as string,",
						"          SIEscalationValue as short,",
						"          SIStatusCode as string,",
						"          SIStatusDescription as string,",
						"          SICalculationMethod as string,",
						"          SIFeeOverideBroker as double,",
						"          SIFeeOverideAdmin as string,",
						"          BankName as string,",
						"          BankAccountType as string,",
						"          BankBranchName as string,",
						"          BankBranchCode as string,",
						"          BankAccountNumber as string,",
						"          BankAccountHolderName as string,",
						"          RuleEffectiveDate as date,",
						"          PhaseInOccurences as short,",
						"          ModeCode as string,",
						"          ModeCodeDescription as string,",
						"          SIEscalationStartDate as date,",
						"          SIEscalationEndDate as date,",
						"          StandingInstructionKey as string,",
						"          PolicyKey as string,",
						"          UnitHolderKey as string,",
						"          SequenceNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> StandingInstructionAllocationsSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"StandingInstructionAllocationsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Policy Standing Instruction Static Data\",",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate) && !isNull(SequenceNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          PolicyId = StorePolicyId,",
						"          PolicyNumber,",
						"          UnitHolderCode = UnitHolderID,",
						"          SINumber,",
						"          SIType,",
						"          AnnuitySIAllocationType,",
						"          SIStartDate,",
						"          SIEndDate,",
						"          SIValue,",
						"          SIFrequency,",
						"          SIEscalationFrequency,",
						"          SIEscalationMode,",
						"          SIEscalationValue,",
						"          SIStatusCode,",
						"          SIStatusDescription,",
						"          SICalculationMethod,",
						"          SIFeeOverideBroker,",
						"          SIFeeOverideAdmin,",
						"          BankName,",
						"          BankAccountType,",
						"          BankBranchName,",
						"          BankBranchCode,",
						"          BankAccountNumber,",
						"          BankAccountHolderName,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          PhaseInOccurences,",
						"          ModeCode,",
						"          ModeCodeDescription,",
						"          SIEscalationStartDate,",
						"          SIEscalationEndDate,",
						"          StandingInstructionKey,",
						"          PolicyKey,",
						"          UnitHolderKey,",
						"          SequenceNumber,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToStandingInstructionAllocationsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_product_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ProductSource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToProductAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupProductEntityId"
						},
						{
							"name": "RenameProductEntityColumns",
							"description": "Rename entity fund columns "
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          ProductName as string,",
						"          ProductShortName as string,",
						"          ProductStatus as string,",
						"          ProductType as string,",
						"          LegalEntityNumber as string,",
						"          ClientID as short,",
						"          BankCode as string,",
						"          BankName as string,",
						"          BankBranchCode as integer,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as long,",
						"          ProductKey as short,",
						"          FlexEntityKey as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductSource",
						"source(output(",
						"          Id as long,",
						"          ProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id, ProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"ProductSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"PPS Product Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, ProductStatus, ProductType, LegalEntityNumber, ClientID, BankCode, BankName, BankBranchCode, BankBranchName, BankAccountType, BankAccountNumber, ProductKey, FlexEntityKey)) ~> DerivedColumn",
						"DerivedColumn, RenameProductEntityColumns lookup(ProductID == EntityProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupProductEntityId",
						"ProductEntityTable select(mapColumn(",
						"          EntityId = Id,",
						"          EntityProductCode = ProductCode",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> RenameProductEntityColumns",
						"LookupProductEntityId assert(expectTrue(!isNull(EntityId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          EffectiveDate,",
						"          Provider,",
						"          DataSource,",
						"          ProductId = EntityId,",
						"          ProductStatus,",
						"          ProductType,",
						"          LegalEntityNumber,",
						"          ClientCode = ClientID,",
						"          BankCode,",
						"          BankName,",
						"          BankBranchCode,",
						"          BankBranchName,",
						"          BankAccountType,",
						"          BankAccountNumber,",
						"          FlexEntityKey,",
						"          IsValid,",
						"          HashKey",
						"     )) ~> LoadToProductAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_product_fund_accounts_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "ProductFundAccountsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToProductFundAccountsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						},
						{
							"name": "ProductLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          ProductID as string,",
						"          FundID as string,",
						"          RuleEffectiveDate as date,",
						"          AccountNumber as string,",
						"          Trade as string,",
						"          Capped as string,",
						"          TradeMethod as string,",
						"          BankReferenceNumber as string,",
						"          GroupingFundID as string,",
						"          FileFormatIndicator as string,",
						"          ProductKey as string,",
						"          FundKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ProductFundAccountsSource",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"ProductFundAccountsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Product Fund Accounts Static Data\",",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"ProductLookup assert(expectTrue(!isNull(ProductID) && !isNull(FundID) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FundLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          ProductID = StoreProductId,",
						"          FundID = StoreFundId,",
						"          GroupingFundID,",
						"          ProductKey,",
						"          FundKey,",
						"          EffectiveDate = RuleEffectiveDate,",
						"          AccountNumber,",
						"          BankReferenceNumber,",
						"          Trade,",
						"          Capped,",
						"          TradeMethod,",
						"          FileFormatIndicator,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToProductFundAccountsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_reg28_fund_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactReg28AssetAllocationsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFactReg28AssetAllocationsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "FundLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          TrustNumber as short,",
						"          FundName as string,",
						"          JSECode as string,",
						"          Class as string,",
						"          QuarterEndDate as date,",
						"          LocalEquity as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          LocalProperty as double,",
						"          ForeignEquity as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          ForeignProperty as double,",
						"          Africa as string,",
						"          Source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactReg28AssetAllocationsSource",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreJSECode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, JSECode AS StoreJSECode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"FactReg28AssetAllocationsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Fund Allocations Static Data\") ~> DerivedColumn",
						"FundLookup assert(expectTrue(!isNull(JSECode) && !isNull(QuarterEndDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, FundEntityTable lookup(JSECode == StoreJSECode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          FundId = StoreFundId,",
						"          TrustNumber,",
						"          FundName,",
						"          JSECode,",
						"          Class,",
						"          EffectiveDate = QuarterEndDate,",
						"          LocalEquity,",
						"          LocalCash,",
						"          LocalBond,",
						"          LocalProperty,",
						"          ForeignEquity,",
						"          ForeignCash,",
						"          ForeignBond,",
						"          ForeignProperty,",
						"          Africa,",
						"          Source,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFactReg28AssetAllocationsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_reg28_policy_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "Reg28PolicyAllocationsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToPolicyAllocationsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          SourceDataQuarterEndDate as date,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          PriceDate as date,",
						"          PolicyCompliant as boolean,",
						"          GrandFatherStatus as boolean,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          AllFundsReg28Compliant as boolean,",
						"          QuarterAge as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28PolicyAllocationsSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"Reg28PolicyAllocationsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Allocations Static Data\",",
						"          ClientIdPlaceholder = 0) ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(SourceDataQuarterEndDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          EffectiveDate = SourceDataQuarterEndDate,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          PolicyNumber,",
						"          PriceDate,",
						"          PolicyCompliant,",
						"          GrandFatherStatus,",
						"          Equity,",
						"          Property,",
						"          Offshore,",
						"          AllFundsReg28Compliant,",
						"          QuarterAge,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToPolicyAllocationsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_reg28_policy_fund_allocations_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "Reg28PolicyFundAllocationsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "FundEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToReg28PolicyFundAllocationsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "UnitHolderLookup"
						},
						{
							"name": "FundLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          SourceDataQuarterEndDate as date,",
						"          UnitHolderID as string,",
						"          PolicyNumber as string,",
						"          ProductID as string,",
						"          FundID as string,",
						"          MarketValue as double,",
						"          PriceDate as date,",
						"          LocalEquity as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          LocalProperty as double,",
						"          ForeignEquity as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          ForeignProperty as double,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          Source as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28PolicyFundAllocationsSource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"source(output(",
						"          StoreFundId as long,",
						"          StoreFundCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
						"Reg28PolicyFundAllocationsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Fund Allocations Static Data\",",
						"          HashKey = sha2(256, UnitHolderID, ProductID, PolicyNumber, FundID, SourceDataQuarterEndDate)) ~> DerivedColumn",
						"FundLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(FundID) && !isNull(SourceDataQuarterEndDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"ProductLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"UnitHolderLookup, FundEntityTable lookup(FundID == StoreFundCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> FundLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          ProductId = StoreProductId,",
						"          FundId = StoreFundId,",
						"          PolicyId = StorePolicyId,",
						"          EffectiveDate = SourceDataQuarterEndDate,",
						"          PolicyNumber,",
						"          MarketValue,",
						"          PriceDate,",
						"          LocalEquity,",
						"          LocalCash,",
						"          LocalBond,",
						"          LocalProperty,",
						"          ForeignEquity,",
						"          ForeignCash,",
						"          ForeignBond,",
						"          ForeignProperty,",
						"          Equity,",
						"          Property,",
						"          Offshore,",
						"          Source,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToReg28PolicyFundAllocationsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_reg28_policy_quarterly_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "Reg28QuarterlySource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "PolicyEntityTable"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "ProductEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToReg28QuarterlyStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "PolicyLookup"
						},
						{
							"name": "ProductLookup"
						},
						{
							"name": "ToBoolean"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          QuarterEndDate as date,",
						"          SourceDataQuarterEndDate as date,",
						"          ClientNo as long,",
						"          TaxNumber as string,",
						"          IDNumber as string,",
						"          Language as string,",
						"          ClientSurname as string,",
						"          ClientInitials as string,",
						"          FirstNames as string,",
						"          Title as string,",
						"          AddressLine1 as string,",
						"          AddressLine2 as string,",
						"          AddressLine3 as string,",
						"          AddressLine4 as string,",
						"          PostalCode as string,",
						"          ClientAccGrpNo as string,",
						"          AccGrpID as string,",
						"          MarketValue as double,",
						"          LocalEquity as double,",
						"          LocalProperty as double,",
						"          LocalCash as double,",
						"          LocalBond as double,",
						"          ForeignEquity as double,",
						"          ForeignProperty as double,",
						"          ForeignCash as double,",
						"          ForeignBond as double,",
						"          Equity as double,",
						"          Property as double,",
						"          Offshore as double,",
						"          Equity_Compliant as string,",
						"          Property_Compliant as string,",
						"          Offshore_Compliant as string,",
						"          Policy_Compliant as string,",
						"          GrandfatherStatus as string,",
						"          Reason as string,",
						"          GrandfatherToNonGrandfather as string,",
						"          QuarterAge as short,",
						"          TPACODE as short,",
						"          Processed as string,",
						"          AllFundsReg28Compliant as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Reg28QuarterlySource",
						"source(output(",
						"          StorePolicyId as long,",
						"          StorePolicyNumber as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
						"source(output(",
						"          StoreProductId as long,",
						"          StoreProductCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
						"Reg28QuarterlySource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Reg28 Policy Quarterly Static Data\") ~> DerivedColumn",
						"ProductLookup assert(expectTrue(!isNull(ClientAccGrpNo) && !isNull(QuarterEndDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, PolicyEntityTable lookup(ClientAccGrpNo == StorePolicyNumber,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> PolicyLookup",
						"PolicyLookup, ProductEntityTable lookup(AccGrpID == StoreProductCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> ProductLookup",
						"DeriveValidColumn derive(Equity_Compliant_Bool = toBoolean(Equity_Compliant),",
						"          Property_Compliant_Bool = toBoolean(Property_Compliant),",
						"          Offshore_Compliant_Bool = toBoolean(Offshore_Compliant),",
						"          Policy_Compliant_Bool = toBoolean(Policy_Compliant),",
						"          GrandfatherStatus_Bool = toBoolean(GrandfatherStatus),",
						"          Processed_Bool = toBoolean(Processed),",
						"          AllFundsReg28Compliant_Bool = toBoolean(AllFundsReg28Compliant)) ~> ToBoolean",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"ToBoolean sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          ProductId = StoreProductId,",
						"          PolicyId = StorePolicyId,",
						"          PolicyNumber = ClientAccGrpNo,",
						"          QuarterEndDate,",
						"          SourceDataQuarterEndDate,",
						"          ClientNo,",
						"          TaxNumber,",
						"          IDNumber,",
						"          Language,",
						"          ClientSurname,",
						"          ClientInitials,",
						"          FirstNames,",
						"          Title,",
						"          AddressLine1,",
						"          AddressLine2,",
						"          AddressLine3,",
						"          AddressLine4,",
						"          PostalCode,",
						"          MarketValue,",
						"          LocalEquity,",
						"          LocalProperty,",
						"          LocalCash,",
						"          LocalBond,",
						"          ForeignEquity,",
						"          ForeignProperty,",
						"          ForeignCash,",
						"          ForeignBond,",
						"          Equity,",
						"          Property,",
						"          Offshore,",
						"          Equity_Compliant = Equity_Compliant_Bool,",
						"          Property_Compliant = Property_Compliant_Bool,",
						"          Offshore_Compliant = Offshore_Compliant_Bool,",
						"          Policy_Compliant = Policy_Compliant_Bool,",
						"          GrandfatherStatus = GrandfatherStatus_Bool,",
						"          Reason,",
						"          GrandfatherToNonGrandfather,",
						"          QuarterAge,",
						"          TPACODE,",
						"          Processed = Processed_Bool,",
						"          AllFundsReg28Compliant = AllFundsReg28Compliant_Bool,",
						"          IsValid,",
						"          ForeignEquity = QuarterEndDate",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToReg28QuarterlyStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_transaction_subtypes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "TransactionSubtypesSource",
							"description": "Import data from sql_broker_source"
						},
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "TransactionSubtypesReferenceTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_reference",
								"type": "DatasetReference"
							},
							"name": "LoadToTransactionSubtypes",
							"description": "Export to entity broker stage table",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData"
						}
					],
					"transformations": [
						{
							"name": "AlterRow"
						},
						{
							"name": "LookupTransactionSubtypes"
						},
						{
							"name": "split1"
						}
					],
					"scriptLines": [
						"parameters{",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> TransactionSubtypesSource",
						"source(output(",
						"          ReferenceTransactionSubTypeCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     isolationLevel: 'READ_UNCOMMITTED',",
						"     query: 'SELECT TransactionSubTypeCode\\nAS ReferenceTransactionSubTypeCode\\nFROM reference.transaction_subtypes',",
						"     format: 'query') ~> TransactionSubtypesReferenceTable",
						"LookupTransactionSubtypes alterRow(insertIf(isNull(ReferenceTransactionSubTypeCode)),",
						"     updateIf(!isNull(ReferenceTransactionSubTypeCode))) ~> AlterRow",
						"split1@Valid, TransactionSubtypesReferenceTable lookup(TransactionSubTypeCode == ReferenceTransactionSubTypeCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupTransactionSubtypes",
						"TransactionSubtypesSource split(!isNull(TransactionSubTypeCode),",
						"     disjoint: false) ~> split1@(Valid, Invalid)",
						"AlterRow sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          TransactionSubTypeCode as string,",
						"          TransactionSubTypeName as string,",
						"          TransactionTypeCode as string,",
						"          TransactionTypeName as string,",
						"          RefType as string,",
						"          TransactionTypeKey as string",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:true,",
						"     upsertable:false,",
						"     keys:['TransactionSubTypeCode'],",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          TransactionSubTypeCode,",
						"          TransactionSubTypeName,",
						"          TransactionTypeCode,",
						"          TransactionTypeName,",
						"          RefType,",
						"          TransactionTypeKey",
						"     )) ~> LoadToTransactionSubtypes",
						"split1@Invalid sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_reference')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_unit_holder_attributes_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "UnitHolderSource",
							"description": "Add fund source data"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToUnitHolderAttributesStage",
							"rejectedDataLinkedService": {
								"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
								"type": "LinkedServiceReference"
							}
						},
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn",
							"description": "Add batch id, data source, effective date and valid column"
						},
						{
							"name": "LookupUnitHolderEntityId"
						},
						{
							"name": "RenameUnitHolderEntityColumns",
							"description": "Rename entity fund columns "
						},
						{
							"name": "ValidateData",
							"description": "Validate data"
						},
						{
							"name": "DeriveValidColumns",
							"description": "Derive valid columns"
						},
						{
							"name": "FilterInvalidData"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          UnitHolderCategory as string,",
						"          UnitHolderStatus as string,",
						"          FirstNames as string,",
						"          MiddleNames as string,",
						"          Surname as string,",
						"          Initials as string,",
						"          Title as string,",
						"          IDNumber as long,",
						"          IDType as string,",
						"          PlaceofIssue as string,",
						"          DateofBirth as date,",
						"          MaritalStatusCode as string,",
						"          MaritalStatusDescription as string,",
						"          Gender as string,",
						"          TelephoneHomeNumber as string,",
						"          TelephoneWorkNumber as string,",
						"          CellPhoneNumber as string,",
						"          FaxNumber as string,",
						"          EmailPrimaryAddress as string,",
						"          EmailSecondaryAddress as string,",
						"          CompanyName as string,",
						"          ContactName as string,",
						"          CompanyRegistrationNumber as string,",
						"          Commencementdate as date,",
						"          CorrAddressLine1 as string,",
						"          CorrAddressLine2 as string,",
						"          CorrAddressLine3 as string,",
						"          CorrAddressLine4 as string,",
						"          CorrCountry as string,",
						"          CorrPostCode as short,",
						"          ResAddressLine1 as string,",
						"          ResAddressLine2 as string,",
						"          ResAddressLine3 as string,",
						"          ResAddressLine4 as string,",
						"          ResCountry as string,",
						"          ResPostCode as short,",
						"          PreferedMailCode as string,",
						"          PreferedMailDescription as string,",
						"          TaxNumber as string,",
						"          WorkFlowNumber as integer,",
						"          ClientMemberNumber as integer,",
						"          AddressUnknown as boolean,",
						"          Language as string,",
						"          GuardianName as string,",
						"          TaxIdentificationNo_01 as integer,",
						"          AuthRepID as string,",
						"          FicaStatus as string,",
						"          TaxIndentificationNo_02 as string,",
						"          CountryofTaxResidence_02 as string,",
						"          NationalityISO as string,",
						"          Nationality as string,",
						"          CountryOfDomicile as string,",
						"          CountryofTaxResidency_01 as string,",
						"          IndiciaIndicator as string,",
						"          FATCAStatus as boolean,",
						"          AccountHolderType as string,",
						"          ExternalAdministratorRef as boolean,",
						"          ClientID as short,",
						"          FLEXFATCAStatus as string,",
						"          PoliticallyConnectedIndividual as boolean,",
						"          DateofIncorporation as string,",
						"          DIVTaxExemption as string,",
						"          WTIExemption as string,",
						"          WTIDTARates as string,",
						"          UnitHolderType as string,",
						"          CountryOfResidence as string,",
						"          CIFNumber as integer,",
						"          FamilyFees as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderSource",
						"source(output(",
						"          Id as long,",
						"          UnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id, UnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"UnitHolderSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Static Data\",",
						"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
						"          HashKey = sha2(256, UnitHolderStatus, FirstNames, MiddleNames, Surname, Initials, Title, IDType, PlaceofIssue, DateofBirth, MaritalStatusCode, MaritalStatusDescription, Gender, TelephoneHomeNumber, \r",
						"TelephoneWorkNumber, CellPhoneNumber, FaxNumber, EmailPrimaryAddress, EmailSecondaryAddress, CompanyName, ContactName, CompanyRegistrationNumber, Commencementdate, CorrAddressLine1, \r",
						"CorrAddressLine2, CorrAddressLine3, CorrAddressLine4, CorrCountry, CorrPostCode, ResAddressLine1, ResAddressLine2, ResAddressLine3, ResAddressLine4, ResCountry, ResPostCode, PreferedMailCode, \r",
						"PreferedMailDescription, TaxNumber, WorkFlowNumber, ClientMemberNumber, AddressUnknown, Language, GuardianName, TaxIdentificationNo_01, AuthRepID, FicaStatus, TaxIndentificationNo_02, \r",
						"CountryofTaxResidence_02, NationalityISO, Nationality, CountryOfDomicile, CountryofTaxResidency_01, IndiciaIndicator, FATCAStatus, AccountHolderType, ExternalAdministratorRef, ClientID, \r",
						"FLEXFATCAStatus, PoliticallyConnectedIndividual, DateofIncorporation, DIVTaxExemption, WTIExemption, WTIDTARates, UnitHolderType, CountryOfResidence, CIFNumber, FamilyFees)) ~> DerivedColumn",
						"DerivedColumn, RenameUnitHolderEntityColumns lookup(UnitHolderID == EntityUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> LookupUnitHolderEntityId",
						"UnitHolderEntityTable select(mapColumn(",
						"          EntityId = Id,",
						"          EntityUnitHolderCode = UnitHolderCode",
						"     ),",
						"     skipDuplicateMapInputs: false,",
						"     skipDuplicateMapOutputs: false) ~> RenameUnitHolderEntityColumns",
						"LookupUnitHolderEntityId assert(expectTrue(!isNull(EntityId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
						"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
						"DeriveValidColumns sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     saveOrder: 0,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     ignoreAssertFailedRows: true,",
						"     mapColumn(",
						"          BatchId,",
						"          EffectiveDate,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = EntityId,",
						"          UnitHolderCategory,",
						"          UnitHolderStatus,",
						"          FirstNames,",
						"          MiddleNames,",
						"          Surname,",
						"          Initials,",
						"          Title,",
						"          IDType,",
						"          PlaceofIssue,",
						"          DateofBirth,",
						"          MaritalStatusCode,",
						"          MaritalStatusDescription,",
						"          Gender,",
						"          TelephoneHomeNumber,",
						"          TelephoneWorkNumber,",
						"          CellPhoneNumber,",
						"          FaxNumber,",
						"          EmailPrimaryAddress,",
						"          EmailSecondaryAddress,",
						"          CompanyName,",
						"          ContactName,",
						"          CompanyRegistrationNumber,",
						"          CommencementDate = Commencementdate,",
						"          CorrAddressLine1,",
						"          CorrAddressLine2,",
						"          CorrAddressLine3,",
						"          CorrAddressLine4,",
						"          CorrCountry,",
						"          CorrPostCode,",
						"          ResAddressLine1,",
						"          ResAddressLine2,",
						"          ResAddressLine3,",
						"          ResAddressLine4,",
						"          ResCountry,",
						"          ResPostCode,",
						"          PreferredMailCode = PreferedMailCode,",
						"          PreferredMailDescription = PreferedMailDescription,",
						"          TaxNumber,",
						"          WorkFlowNumber,",
						"          ClientMemberNumber,",
						"          AddressUnknown,",
						"          Language,",
						"          GuardianName,",
						"          TaxIdentificationNo_01,",
						"          AuthRepID,",
						"          FicaStatus,",
						"          TaxIndentificationNo_02,",
						"          CountryOfTaxResidence_02 = CountryofTaxResidence_02,",
						"          NationalityISO,",
						"          Nationality,",
						"          CountryOfDomicile,",
						"          CountryOfTaxResidency_01 = CountryofTaxResidency_01,",
						"          IndiciaIndicator,",
						"          FATCAStatus,",
						"          AccountHolderType,",
						"          ExternalAdministratorRef,",
						"          ClientCode = ClientID,",
						"          FLEXFATCAStatus,",
						"          PoliticallyConnectedIndividual,",
						"          DateofIncorporation,",
						"          DIVTaxExemption,",
						"          WTIExemption,",
						"          WTIDTARates,",
						"          UnitHolderType,",
						"          CountryOfResidence,",
						"          CIFNumber,",
						"          FamilyFees,",
						"          IsValid,",
						"          HashKey",
						"     )) ~> LoadToUnitHolderAttributesStage",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps-synapse-dev-WorkspaceDefaultStorage')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_unit_holder_bank_details_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "UnitHolderBankDetailsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToUnitHolderBankDetailsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          BankCode as string,",
						"          BankDefaultDetails as boolean,",
						"          BankName as string,",
						"          BankBranchCode as string,",
						"          BankBranchName as string,",
						"          BankAccountType as string,",
						"          BankAccountNumber as long,",
						"          BankAccountHolderName as string,",
						"          IBANumber as string,",
						"          ModifiedStatus as string,",
						"          UnitHolderBankKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderBankDetailsSource",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"UnitHolderBankDetailsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Bank Details Static Data\") ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(UnitHolderBankKey), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          BankCode,",
						"          BankDefaultDetails,",
						"          BankName,",
						"          BankBranchCode,",
						"          BankBranchName,",
						"          BankAccountType,",
						"          BankAccountNumber,",
						"          BankAccountHolderName,",
						"          IBANumber,",
						"          ModifiedStatus,",
						"          UnitHolderBankKey,",
						"          UnitHolderKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToUnitHolderBankDetailsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_unit_holder_related_party_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "UnitHolderRelatedPartySource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToUnitHolderRelatedPartyStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          RelatedPartyNumber as long,",
						"          RelatedPartyType as string,",
						"          RelatedPartyRelDescription as string,",
						"          RelatedPartyReportingLevel as string,",
						"          RelatedPartyPrefMailMode as string,",
						"          ModifiedStatus as string,",
						"          RelatedPartyUnitHolderKey as string,",
						"          RelatedPartyKey as string,",
						"          UnitHolderKey as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> UnitHolderRelatedPartySource",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"UnitHolderRelatedPartySource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Related Party Static Data\") ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(RelatedPartyNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderId = StoreUnitHolderId,",
						"          RelatedPartyNumber,",
						"          RelatedPartyType,",
						"          RelatedPartyRelDescription,",
						"          RelatedPartyReportingLevel,",
						"          RelatedPartyPrefMailMode,",
						"          ModifiedStatus,",
						"          RelatedPartyUnitHolderKey,",
						"          RelatedPartyKey,",
						"          UnitHolderKey,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToUnitHolderRelatedPartyStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/edw_sql_unit_holder_tax_free_savings_contributions_dataflow')]",
			"type": "Microsoft.Synapse/workspaces/dataflows",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"description": "** need to add Load lookup",
				"folder": {
					"name": "EDW"
				},
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "edw_source_file_extract",
								"type": "DatasetReference"
							},
							"name": "FactTaxFreeSavingsContributionsSource"
						},
						{
							"linkedService": {
								"referenceName": "pps_edw_dev_db",
								"type": "LinkedServiceReference"
							},
							"name": "UnitHolderEntityTable"
						}
					],
					"sinks": [
						{
							"linkedService": {
								"referenceName": "data_lake_dev",
								"type": "LinkedServiceReference"
							},
							"name": "ExportInvalidData",
							"description": "Export invalid data"
						},
						{
							"dataset": {
								"referenceName": "edw_database_stage",
								"type": "DatasetReference"
							},
							"name": "LoadToFactTaxFreeSavingsContributionsStage"
						}
					],
					"transformations": [
						{
							"name": "DerivedColumn"
						},
						{
							"name": "ValidateData"
						},
						{
							"name": "DeriveValidColumn"
						},
						{
							"name": "FilterInvalidData"
						},
						{
							"name": "UnitHolderLookup"
						}
					],
					"scriptLines": [
						"parameters{",
						"     BatchId as string,",
						"     FileName as string,",
						"     FileDirectory as string",
						"}",
						"source(output(",
						"          UnitHolderID as string,",
						"          FiscalYearStartDate as date,",
						"          FiscalYearEndDate as date,",
						"          AnnualContributionAmount as double,",
						"          LifetimeContributionAmount as double,",
						"          AgencyCode as string,",
						"          BranchCode as string,",
						"          Timestamp as date",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> FactTaxFreeSavingsContributionsSource",
						"source(output(",
						"          StoreUnitHolderId as long,",
						"          StoreUnitHolderCode as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'query',",
						"     store: 'sqlserver',",
						"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
						"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
						"FactTaxFreeSavingsContributionsSource derive(BatchId = $BatchId,",
						"          Provider = \"PPS\",",
						"          DataSource = \"Unit Holder Tax Free Savings Contributions Static Data\") ~> DerivedColumn",
						"UnitHolderLookup assert(expectTrue(!isNull(UnitHolderID) && !isNull(FiscalYearStartDate) && !isNull(FiscalYearEndDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
						"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
						"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
						"DerivedColumn, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
						"     multiple: false,",
						"     pickup: 'any',",
						"     broadcast: 'auto')~> UnitHolderLookup",
						"FilterInvalidData sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     format: 'delimited',",
						"     container: 'sql',",
						"     folderPath: (concat('errors/', $FileDirectory)),",
						"     columnDelimiter: ',',",
						"     escapeChar: '\\\\',",
						"     quoteChar: '\\\"',",
						"     columnNamesAsHeader: false,",
						"     partitionFileNames:[($FileName)],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ExportInvalidData",
						"DeriveValidColumn sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          Id as long,",
						"          BatchId as string,",
						"          Provider as string,",
						"          DataSource as string,",
						"          UnitHolderId as long,",
						"          ProductId as long,",
						"          FundId as long,",
						"          PolicyId as long,",
						"          LoadId as long,",
						"          PolicyNumber as string,",
						"          PolicyTransactionNumber as long,",
						"          FeeCode as long,",
						"          FeeDescription as string,",
						"          FeePercentage as decimal(20,5),",
						"          FundTransactionNumber as long,",
						"          Amount as decimal(20,5),",
						"          ReversalIndicator as string,",
						"          OldTransactionNumber as string,",
						"          FactFundFeeTransactionKey as long,",
						"          ProductKey as long,",
						"          PolicyKey as long,",
						"          UnitHolderKey as long,",
						"          LoadKey as long,",
						"          IsValid as boolean",
						"     ),",
						"     deletable:false,",
						"     insertable:true,",
						"     updateable:false,",
						"     upsertable:false,",
						"     format: 'table',",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     errorHandlingOption: 'stopOnFirstError',",
						"     mapColumn(",
						"          BatchId,",
						"          Provider,",
						"          DataSource,",
						"          UnitHolderID = StoreUnitHolderId,",
						"          FiscalYearStartDate,",
						"          FiscalYearEndDate,",
						"          AnnualContributionAmount,",
						"          LifetimeContributionAmount,",
						"          AgencyCode,",
						"          BranchCode,",
						"          Timestamp,",
						"          IsValid",
						"     ),",
						"     preCommands: [],",
						"     postCommands: []) ~> LoadToFactTaxFreeSavingsContributionsStage"
					]
				}
			},
			"dependsOn": [
				"[concat(variables('workspaceId'), '/datasets/edw_source_file_extract')]",
				"[concat(variables('workspaceId'), '/linkedServices/pps_edw_dev_db')]",
				"[concat(variables('workspaceId'), '/linkedServices/data_lake_dev')]",
				"[concat(variables('workspaceId'), '/datasets/edw_database_stage')]"
			]
		},
		{
			"name": "[concat(parameters('workspaceName'), '/WorkspaceSystemIdentity')]",
			"type": "Microsoft.Synapse/workspaces/credentials",
			"apiVersion": "2019-06-01-preview",
			"properties": {
				"type": "ManagedIdentity",
				"typeProperties": {}
			},
			"dependsOn": []
		}
	]
}