{
	"name": "edw_placeholder_policy_fund_transactions_dataflow",
	"properties": {
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "FundTransactionsSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_entity_stage_fund",
						"type": "DatasetReference"
					},
					"name": "LoadFundEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_product",
						"type": "DatasetReference"
					},
					"name": "LoadProductEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_policy",
						"type": "DatasetReference"
					},
					"name": "LoadPolicyEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_unit_holder",
						"type": "DatasetReference"
					},
					"name": "LoadUnitHolderEntity"
				}
			],
			"transformations": [
				{
					"name": "DeriveProductPlaceHolder"
				},
				{
					"name": "DeriveUnitHolderPlaceHolder"
				},
				{
					"name": "DerivePolicyPlaceHolder"
				},
				{
					"name": "DeriveFundPlaceHolder"
				},
				{
					"name": "AssertFund"
				},
				{
					"name": "AssertPolicy"
				},
				{
					"name": "AssertUnitHolder"
				},
				{
					"name": "AssertProduct"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string",
				"}",
				"source(output(",
				"          ProductID as string,",
				"          FundID as string,",
				"          TransactionTypeCode as short,",
				"          TransactionSubTypeCode as string,",
				"          UnitHolderID as string,",
				"          PolicyNumber as string,",
				"          TransactionDate as date,",
				"          PolicyTransactionNumber as string,",
				"          FundTransactionNumber as string,",
				"          GrossAmount as double,",
				"          NetAmount as double,",
				"          Units as double,",
				"          Price as double,",
				"          PriceDate as date,",
				"          AllocationDate as date,",
				"          RealisedProfitLoss as boolean,",
				"          ReversalIndicator as boolean,",
				"          TransactionTimeStamp as date,",
				"          PolicyReferenceNumber as string,",
				"          DistributionTransactionNumber as long,",
				"          WAC as double,",
				"          Remarks as string,",
				"          FundRatio as short,",
				"          PolicyTransactionStatus as string,",
				"          PolicyTransactionAllocationDate as date,",
				"          RefType as short,",
				"          PaymentMode as boolean,",
				"          OldTransactionNumber as string,",
				"          TopUpInclusive as boolean,",
				"          UpfrontInterest as string,",
				"          FactFundTransactionKey as integer,",
				"          ProductKey as short,",
				"          PolicyKey as integer,",
				"          UnitHolderKey as integer,",
				"          TransactionReferenceNumber as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FundTransactionsSource",
				"AssertProduct derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Fund Transactions Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
				"AssertUnitHolder derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Fund Transactions Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveUnitHolderPlaceHolder",
				"AssertPolicy derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Fund Transactions Static Data\",",
				"          BatchId = $BatchId,",
				"          PolicyNumberCopy = PolicyNumber,",
				"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
				"AssertFund derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Fund Transactions Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
				"FundTransactionsSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
				"FundTransactionsSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
				"FundTransactionsSource assert(expectTrue(!isNull(UnitHolderID), false, 'AssertUnitHolder')) ~> AssertUnitHolder",
				"FundTransactionsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
				"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          FundCode as string,",
				"          PPSFundId as string,",
				"          JSECode as string,",
				"          ISINCode as string,",
				"          FundName as string,",
				"          FundDescription as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          FundCode = FundID",
				"     )) ~> LoadFundEntity",
				"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          ProductCode as string,",
				"          ProductName as string,",
				"          ProductShortName as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          ProductCode = ProductID",
				"     )) ~> LoadProductEntity",
				"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          PolicyNumber as string,",
				"          PolicyReferenceNumber as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          ClientId as long,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          PolicyNumber,",
				"          PolicyReferenceNumber = PolicyNumberCopy,",
				"          CreatedDate = DateNow",
				"     )) ~> LoadPolicyEntity",
				"DeriveUnitHolderPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderCode as string,",
				"          SAIDNumber as string,",
				"          UnitHolderName as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          UnitHolderCode = UnitHolderID",
				"     )) ~> LoadUnitHolderEntity"
			]
		}
	}
}