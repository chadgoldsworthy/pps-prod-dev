{
	"name": "edw_sql_product_attributes_dataflow",
	"properties": {
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "ProductSource",
					"description": "Add fund source data"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_database",
						"type": "LinkedServiceReference"
					},
					"name": "ProductEntityTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToProductAttributesStage",
					"rejectedDataLinkedService": {
						"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidData",
					"description": "Export invalid data"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn",
					"description": "Add batch id, data source, effective date and valid column"
				},
				{
					"name": "LookupProductEntityId"
				},
				{
					"name": "RenameProductEntityColumns",
					"description": "Rename entity fund columns "
				},
				{
					"name": "ValidateData",
					"description": "Validate data"
				},
				{
					"name": "DeriveValidColumns",
					"description": "Derive valid columns"
				},
				{
					"name": "FilterInvalidData"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string,",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          ProductID as string,",
				"          ProductName as string,",
				"          ProductShortName as string,",
				"          ProductStatus as string,",
				"          ProductType as string,",
				"          LegalEntityNumber as string,",
				"          ClientID as short,",
				"          BankCode as string,",
				"          BankName as string,",
				"          BankBranchCode as integer,",
				"          BankBranchName as string,",
				"          BankAccountType as string,",
				"          BankAccountNumber as long,",
				"          ProductKey as short,",
				"          FlexEntityKey as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductSource",
				"source(output(",
				"          Id as long,",
				"          ProductCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id, ProductCode FROM store.entity_all_product',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
				"ProductSource derive(BatchId = $BatchId,",
				"          Provider = \"PPS\",",
				"          DataSource = \"PPS Product Static Data\",",
				"          EffectiveDate = currentDate(\"yyyy-MM-dd\"),",
				"          HashKey = sha2(256, ProductStatus, ProductType, LegalEntityNumber, ClientID, BankCode, BankName, BankBranchCode, BankBranchName, BankAccountType, BankAccountNumber, ProductKey, FlexEntityKey)) ~> DerivedColumn",
				"DerivedColumn, RenameProductEntityColumns lookup(ProductID == EntityProductCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> LookupProductEntityId",
				"ProductEntityTable select(mapColumn(",
				"          EntityId = Id,",
				"          EntityProductCode = ProductCode",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameProductEntityColumns",
				"LookupProductEntityId assert(expectTrue(!isNull(EntityId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumns",
				"DeriveValidColumns filter(IsValid == false()) ~> FilterInvalidData",
				"DeriveValidColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          FundId as long,",
				"          PolicyId as long,",
				"          LoadId as long,",
				"          PolicyNumber as string,",
				"          PolicyTransactionNumber as long,",
				"          FeeCode as long,",
				"          FeeDescription as string,",
				"          FeePercentage as decimal(20,5),",
				"          FundTransactionNumber as long,",
				"          Amount as decimal(20,5),",
				"          ReversalIndicator as string,",
				"          OldTransactionNumber as string,",
				"          FactFundFeeTransactionKey as long,",
				"          ProductKey as long,",
				"          PolicyKey as long,",
				"          UnitHolderKey as long,",
				"          LoadKey as long,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     saveOrder: 0,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     ignoreAssertFailedRows: true,",
				"     mapColumn(",
				"          BatchId,",
				"          EffectiveDate,",
				"          Provider,",
				"          DataSource,",
				"          ProductId = EntityId,",
				"          ProductStatus,",
				"          ProductType,",
				"          LegalEntityNumber,",
				"          ClientCode = ClientID,",
				"          BankCode,",
				"          BankName,",
				"          BankBranchCode,",
				"          BankBranchName,",
				"          BankAccountType,",
				"          BankAccountNumber,",
				"          FlexEntityKey,",
				"          IsValid,",
				"          HashKey",
				"     )) ~> LoadToProductAttributesStage",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidData"
			]
		}
	}
}