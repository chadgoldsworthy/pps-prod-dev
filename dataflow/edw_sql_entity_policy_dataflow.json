{
	"name": "edw_sql_entity_policy_dataflow",
	"properties": {
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "PolicySource",
					"description": "Import data from sql_policy_source"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "UnitHolderEntityTable"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "ProductEntityTable"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToEntityPolicyStage",
					"description": "Export to entity policy stage table",
					"rejectedDataLinkedService": {
						"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "data_lake_dev",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidRecord",
					"description": "Export invalid record"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn",
					"description": "Add derived columns"
				},
				{
					"name": "ValidateData",
					"description": "Validate data"
				},
				{
					"name": "DeriveValidAndMessageColumns",
					"description": "Derive valid and message columns"
				},
				{
					"name": "FilterInvalidData"
				},
				{
					"name": "UnitHolderLookup"
				},
				{
					"name": "ProductLookup"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string (\"59aeacaf-724d-4e44-b200-398edc31ec0d\"),",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          PolicyNumber as string,",
				"          UnitHolderID as string,",
				"          ProductID as string,",
				"          ClientID as string,",
				"          PolicyReferenceNumber as string,",
				"          PolicyStatus as string,",
				"          PolicyCreationDate as date,",
				"          PolicyStartDate as date,",
				"          PolicyMaturityDate as date,",
				"          AnniversaryDate as date,",
				"          WorkFlowNumber as string,",
				"          AnniversaryValue as double,",
				"          PolicyEndDate as date,",
				"          RuleEffectiveDate as date,",
				"          RetirementAge as short,",
				"          RetirementDate as date,",
				"          FundRangeOption as string,",
				"          PersonalisedProductName as string,",
				"          WrapFundName as string,",
				"          SourceFundName as string,",
				"          PreferredFund as string,",
				"          ParticipatingEmployerID as string,",
				"          AuthrepID as string,",
				"          InitialInvestmentAmount as double,",
				"          PolicyType as string,",
				"          AnnuityRange as string,",
				"          LatestRule as boolean,",
				"          PolicyKey as string,",
				"          UnitHolderKey as string,",
				"          ProductKey as string,",
				"          AuthorisedRepresentativeKey as string,",
				"          DefaultAnnuity as boolean,",
				"          DefaultAnnuitySourceList as string,",
				"          IntermedSerFee as string,",
				"          OriginalProductCode as string,",
				"          Annuitisation as string,",
				"          SourceFundType as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PolicySource",
				"source(output(",
				"          StoreUnitHolderId as long,",
				"          StoreUnitHolderCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
				"source(output(",
				"          StoreProductId as long,",
				"          StoreProductCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
				"PolicySource derive(BatchId = $BatchId,",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Static Data\",",
				"          CreatedDate = currentDate(\"yyyy-MM-dd\"),",
				"          PolicyNumber = PolicyNumber) ~> DerivedColumn",
				"ProductLookup assert(expectTrue(!isNull(PolicyNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> DeriveValidAndMessageColumns",
				"DeriveValidAndMessageColumns filter(IsValid == false()) ~> FilterInvalidData",
				"DerivedColumn, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> UnitHolderLookup",
				"UnitHolderLookup, ProductEntityTable lookup(ProductID == StoreProductCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> ProductLookup",
				"DeriveValidAndMessageColumns sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          FundId as long,",
				"          PolicyId as long,",
				"          LoadId as long,",
				"          PolicyNumber as string,",
				"          PolicyTransactionNumber as long,",
				"          FeeCode as long,",
				"          FeeDescription as string,",
				"          FeePercentage as decimal(20,5),",
				"          FundTransactionNumber as long,",
				"          Amount as decimal(20,5),",
				"          ReversalIndicator as string,",
				"          OldTransactionNumber as string,",
				"          FactFundFeeTransactionKey as long,",
				"          ProductKey as long,",
				"          PolicyKey as long,",
				"          UnitHolderKey as long,",
				"          LoadKey as long,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     ignoreAssertFailedRows: true,",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          PolicyNumber,",
				"          PolicyReferenceNumber,",
				"          CreatedDate,",
				"          IsValid,",
				"          UnitHolderId = StoreUnitHolderId,",
				"          ProductId = StoreProductId,",
				"          ClientId = ClientID",
				"     )) ~> LoadToEntityPolicyStage",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
			]
		}
	}
}