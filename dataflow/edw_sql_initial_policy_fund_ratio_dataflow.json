{
	"name": "edw_sql_initial_policy_fund_ratio_dataflow",
	"properties": {
		"description": "** need to add Load lookup",
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "InitialPolicyFundRatioSource"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "PolicyEntityTable"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "FundEntityTable"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "UnitHolderEntityTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "data_lake_dev",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidData",
					"description": "Export invalid data"
				},
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToInitialPolicyFundRatioStage"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn"
				},
				{
					"name": "ValidateData"
				},
				{
					"name": "DeriveValidColumn"
				},
				{
					"name": "FilterInvalidData"
				},
				{
					"name": "PolicyLookup"
				},
				{
					"name": "FundLookup"
				},
				{
					"name": "UnitHolderLookup"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string ('453a65f2-a485-4750-8830-5aa1026efad8'),",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          PolicyNumber as string,",
				"          UnitHolderID as string,",
				"          FundID as string,",
				"          AssetAllocationRatio as double,",
				"          RuleEffectiveDate as date,",
				"          Units as double,",
				"          WAC as double,",
				"          Amount as double,",
				"          PolicyTransactionNumber as long,",
				"          PolicyInitialAllocationKey as integer,",
				"          PolicyKey as integer,",
				"          UnitHolderKey as integer,",
				"          FundKey as short",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> InitialPolicyFundRatioSource",
				"source(output(",
				"          StorePolicyId as long,",
				"          StorePolicyNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
				"source(output(",
				"          StoreFundId as long,",
				"          StoreFundCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreFundId, FundCode AS StoreFundCode FROM store.entity_all_fund',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
				"source(output(",
				"          StoreUnitHolderId as long,",
				"          StoreUnitHolderCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreUnitHolderId, UnitHolderCode AS StoreUnitHolderCode FROM store.entity_all_unit_holder',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> UnitHolderEntityTable",
				"InitialPolicyFundRatioSource derive(BatchId = $BatchId,",
				"          Provider = \"PPS\",",
				"          DataSource = \"Initial Policy Fund Ratio Static Data\") ~> DerivedColumn",
				"UnitHolderLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
				"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
				"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> PolicyLookup",
				"PolicyLookup, FundEntityTable lookup(FundID == StoreFundCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FundLookup",
				"FundLookup, UnitHolderEntityTable lookup(UnitHolderID == StoreUnitHolderCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> UnitHolderLookup",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidData",
				"DeriveValidColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          FundId as long,",
				"          PolicyId as long,",
				"          LoadId as long,",
				"          PolicyNumber as string,",
				"          PolicyTransactionNumber as long,",
				"          FeeCode as long,",
				"          FeeDescription as string,",
				"          FeePercentage as decimal(20,5),",
				"          FundTransactionNumber as long,",
				"          Amount as decimal(20,5),",
				"          ReversalIndicator as string,",
				"          OldTransactionNumber as string,",
				"          FactFundFeeTransactionKey as long,",
				"          ProductKey as long,",
				"          PolicyKey as long,",
				"          UnitHolderKey as long,",
				"          LoadKey as long,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          PolicyId = StorePolicyId,",
				"          UnitHolderId = StoreUnitHolderId,",
				"          FundId = StoreFundId,",
				"          PolicyNumber,",
				"          AssetAllocationRatio,",
				"          EffectiveDate = RuleEffectiveDate,",
				"          Units,",
				"          WAC,",
				"          Amount,",
				"          PolicyTransactionNumber,",
				"          PolicyInitialAllocationKey,",
				"          PolicyKey,",
				"          UnitHolderKey,",
				"          FundKey,",
				"          IsValid",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> LoadToInitialPolicyFundRatioStage"
			]
		}
	}
}