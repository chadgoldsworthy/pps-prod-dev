{
	"name": "edw_sql_load_dataflow",
	"properties": {
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "LoadSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToEntityLoadStage",
					"description": "Export to entity fund stage table",
					"rejectedDataLinkedService": {
						"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					}
				},
				{
					"linkedService": {
						"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidRecord",
					"description": "Export invalid record"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn",
					"description": "Add derived columns"
				},
				{
					"name": "ValidateData",
					"description": "Validate data"
				},
				{
					"name": "IsValid",
					"description": "Derive valid and message columns"
				},
				{
					"name": "FilterInvalidData"
				},
				{
					"name": "RenameLoadCode"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string (\"56aeacaf-724d-4e44-b200-398edc31ec0d\"),",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          LoadID as short,",
				"          LoadDescription as string,",
				"          LoadValue as double,",
				"          SlabNumber as integer,",
				"          SlabFromAmount as double,",
				"          SlabToAmount as double,",
				"          LoadCalcMethod as string,",
				"          LoadType as string,",
				"          LoadBasis as string,",
				"          LoadKey as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> LoadSource",
				"RenameLoadCode derive(BatchId = $BatchId,",
				"          Name = toString(null()),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Load Static Data\",",
				"          Description = toString(null()),",
				"          CreatedDate = currentDate(\"yyyy-MM-dd\")) ~> DerivedColumn",
				"DerivedColumn assert(expectTrue(!isNull(LoadCode) && !isNull(SlabNumber), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> IsValid",
				"IsValid filter(IsValid == false()) ~> FilterInvalidData",
				"LoadSource select(mapColumn(",
				"          LoadCode = LoadID,",
				"          LoadDescription,",
				"          LoadValue,",
				"          SlabNumber,",
				"          SlabFromAmount,",
				"          SlabToAmount,",
				"          LoadCalcMethod,",
				"          LoadType,",
				"          LoadBasis,",
				"          LoadKey",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> RenameLoadCode",
				"IsValid sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          FundId as long,",
				"          PolicyId as long,",
				"          LoadId as long,",
				"          PolicyNumber as string,",
				"          PolicyTransactionNumber as long,",
				"          FeeCode as long,",
				"          FeeDescription as string,",
				"          FeePercentage as decimal(20,5),",
				"          FundTransactionNumber as long,",
				"          Amount as decimal(20,5),",
				"          ReversalIndicator as string,",
				"          OldTransactionNumber as string,",
				"          FactFundFeeTransactionKey as long,",
				"          ProductKey as long,",
				"          PolicyKey as long,",
				"          UnitHolderKey as long,",
				"          LoadKey as long,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     ignoreAssertFailedRows: true,",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          LoadCode,",
				"          LoadDescription,",
				"          LoadValue,",
				"          SlabNumber,",
				"          SlabFromAmount,",
				"          SlabToAmount,",
				"          LoadCalcMethod,",
				"          LoadType,",
				"          LoadBasis,",
				"          LoadKey,",
				"          IsValid",
				"     )) ~> LoadToEntityLoadStage",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidRecord"
			]
		}
	}
}