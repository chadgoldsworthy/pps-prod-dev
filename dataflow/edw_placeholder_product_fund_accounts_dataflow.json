{
	"name": "edw_placeholder_product_fund_accounts_dataflow",
	"properties": {
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "ProductFundAccountsSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_entity_stage_product",
						"type": "DatasetReference"
					},
					"name": "LoadProductEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_fund",
						"type": "DatasetReference"
					},
					"name": "LoadFundEntity"
				}
			],
			"transformations": [
				{
					"name": "DeriveProductPlaceHolder"
				},
				{
					"name": "DeriveFundPlaceHolder"
				},
				{
					"name": "AssertFund"
				},
				{
					"name": "AssertProduct"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string",
				"}",
				"source(output(",
				"          ProductID as string,",
				"          FundID as string,",
				"          RuleEffectiveDate as date,",
				"          AccountNumber as string,",
				"          Trade as string,",
				"          Capped as string,",
				"          TradeMethod as string,",
				"          BankReferenceNumber as string,",
				"          GroupingFundID as string,",
				"          FileFormatIndicator as string,",
				"          ProductKey as string,",
				"          FundKey as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ProductFundAccountsSource",
				"AssertProduct derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Product Fund Accounts Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
				"AssertFund derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Product Fund Accounts Static Data\",",
				"          BatchId = $BatchId,",
				"          JSEFundCode = FundID,",
				"          DateNow = currentDate()) ~> DeriveFundPlaceHolder",
				"ProductFundAccountsSource assert(expectTrue(!isNull(FundID), false, 'AssertFund')) ~> AssertFund",
				"ProductFundAccountsSource assert(expectTrue(!isNull(ProductID), false, 'AssertProduct')) ~> AssertProduct",
				"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          ProductCode as string,",
				"          ProductName as string,",
				"          ProductShortName as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          ProductCode = ProductID,",
				"          CreatedDate = DateNow",
				"     )) ~> LoadProductEntity",
				"DeriveFundPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          FundCode as string,",
				"          PPSFundId as string,",
				"          JSECode as string,",
				"          ISINCode as string,",
				"          FundName as string,",
				"          FundDescription as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          FundCode = FundID,",
				"          JSECode = JSEFundCode,",
				"          CreatedDate = DateNow",
				"     )) ~> LoadFundEntity"
			]
		}
	}
}