{
	"name": "edw_sql_reg28_fund_allocations_dataflow",
	"properties": {
		"description": "** need to add Load lookup",
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "FactReg28AssetAllocationsSource"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_database",
						"type": "LinkedServiceReference"
					},
					"name": "FundEntityTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "pps-synapse-dev-WorkspaceDefaultStorage",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidData",
					"description": "Export invalid data"
				},
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToFactReg28AssetAllocationsStage"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn"
				},
				{
					"name": "ValidateData"
				},
				{
					"name": "DeriveValidColumn"
				},
				{
					"name": "FilterInvalidData"
				},
				{
					"name": "FundLookup"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string ('f14bcdce-1d0c-46b7-b9f3-dbe77107f3e8'),",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          TrustNumber as short,",
				"          FundName as string,",
				"          JSECode as string,",
				"          Class as string,",
				"          QuarterEndDate as date,",
				"          LocalEquity as double,",
				"          LocalCash as double,",
				"          LocalBond as double,",
				"          LocalProperty as double,",
				"          ForeignEquity as double,",
				"          ForeignCash as double,",
				"          ForeignBond as double,",
				"          ForeignProperty as double,",
				"          Africa as string,",
				"          Source as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> FactReg28AssetAllocationsSource",
				"source(output(",
				"          StoreFundId as long,",
				"          StoreJSECode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreFundId, JSECode AS StoreJSECode FROM store.entity_all_fund',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> FundEntityTable",
				"FactReg28AssetAllocationsSource derive(BatchId = $BatchId,",
				"          Provider = \"PPS\",",
				"          DataSource = \"Reg28 Fund Allocations Static Data\") ~> DerivedColumn",
				"FundLookup assert(expectTrue(!isNull(JSECode) && !isNull(QuarterEndDate) && !isNull(StoreFundId), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
				"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
				"DerivedColumn, FundEntityTable lookup(JSECode == StoreJSECode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> FundLookup",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     fileSystem: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidData",
				"DeriveValidColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          FundId as long,",
				"          FundCode as string,",
				"          DistributionComponentCode as string,",
				"          DistributionComponentName as string,",
				"          DistributionNumber as long,",
				"          DistributionDate as date,",
				"          DistributionComponentCPU as decimal(10,5),",
				"          FreezeHoldingDate as date,",
				"          FactFundDistributionKey as string,",
				"          FundKey as string,",
				"          DistributionComponentKey as string,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          FundId = StoreFundId,",
				"          TrustNumber,",
				"          FundName,",
				"          JSECode,",
				"          Class,",
				"          EffectiveDate = QuarterEndDate,",
				"          LocalEquity,",
				"          LocalCash,",
				"          LocalBond,",
				"          LocalProperty,",
				"          ForeignEquity,",
				"          ForeignCash,",
				"          ForeignBond,",
				"          ForeignProperty,",
				"          Africa,",
				"          Source,",
				"          IsValid",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> LoadToFactReg28AssetAllocationsStage"
			]
		}
	}
}