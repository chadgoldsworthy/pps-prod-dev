{
	"name": "edw_sql_policy_broker_dataflow",
	"properties": {
		"description": "** need to add Load lookup",
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "PolicyBrokerSource"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "PolicyEntityTable"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "ProductEntityTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "data_lake_dev",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidData",
					"description": "Export invalid data"
				},
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToPolicyBrokerStage"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn"
				},
				{
					"name": "ValidateData"
				},
				{
					"name": "DeriveValidColumn"
				},
				{
					"name": "FilterInvalidData"
				},
				{
					"name": "PolicyLookup"
				},
				{
					"name": "BrokerLookup"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string,",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          PolicyNumber as string,",
				"          BrokerCode as string,",
				"          RuleEffectiveDate as date,",
				"          SplitPercentage as short,",
				"          PolicyKey as integer,",
				"          BrokerKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PolicyBrokerSource",
				"source(output(",
				"          StorePolicyId as long,",
				"          StorePolicyNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
				"source(output(",
				"          StoreBrokerId as long,",
				"          StoreBrokerCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreBrokerId, BrokerCode AS StoreBrokerCode FROM store.entity_all_broker',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
				"PolicyBrokerSource derive(BatchId = $BatchId,",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Broker Static Data\") ~> DerivedColumn",
				"BrokerLookup assert(expectTrue(!isNull(PolicyNumber) && !isNull(RuleEffectiveDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
				"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
				"DerivedColumn, PolicyEntityTable lookup(PolicyNumber == StorePolicyNumber,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> PolicyLookup",
				"PolicyLookup, ProductEntityTable lookup(BrokerCode == StoreBrokerCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> BrokerLookup",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidData",
				"DeriveValidColumn sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          FundId as long,",
				"          PolicyId as long,",
				"          LoadId as long,",
				"          PolicyNumber as string,",
				"          PolicyTransactionNumber as long,",
				"          FeeCode as long,",
				"          FeeDescription as string,",
				"          FeePercentage as decimal(20,5),",
				"          FundTransactionNumber as long,",
				"          Amount as decimal(20,5),",
				"          ReversalIndicator as string,",
				"          OldTransactionNumber as string,",
				"          FactFundFeeTransactionKey as long,",
				"          ProductKey as long,",
				"          PolicyKey as long,",
				"          UnitHolderKey as long,",
				"          LoadKey as long,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          PolicyId = StorePolicyId,",
				"          BrokerId = StoreBrokerId,",
				"          PolicyNumber,",
				"          BrokerCode,",
				"          EffectiveDate = RuleEffectiveDate,",
				"          SplitPercentage,",
				"          PolicyKey,",
				"          BrokerKey,",
				"          IsValid",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> LoadToPolicyBrokerStage"
			]
		}
	}
}