{
	"name": "edw_sql_reg28_policy_quarterly_dataflow",
	"properties": {
		"description": "** need to add Load lookup",
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "Reg28QuarterlySource"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "PolicyEntityTable"
				},
				{
					"linkedService": {
						"referenceName": "pps_edw_dev_db",
						"type": "LinkedServiceReference"
					},
					"name": "ProductEntityTable"
				}
			],
			"sinks": [
				{
					"linkedService": {
						"referenceName": "data_lake_dev",
						"type": "LinkedServiceReference"
					},
					"name": "ExportInvalidData",
					"description": "Export invalid data"
				},
				{
					"dataset": {
						"referenceName": "edw_database_stage",
						"type": "DatasetReference"
					},
					"name": "LoadToReg28QuarterlyStage"
				}
			],
			"transformations": [
				{
					"name": "DerivedColumn"
				},
				{
					"name": "ValidateData"
				},
				{
					"name": "DeriveValidColumn"
				},
				{
					"name": "FilterInvalidData"
				},
				{
					"name": "PolicyLookup"
				},
				{
					"name": "ProductLookup"
				},
				{
					"name": "ToBoolean"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string,",
				"     FileName as string,",
				"     FileDirectory as string",
				"}",
				"source(output(",
				"          QuarterEndDate as date,",
				"          SourceDataQuarterEndDate as date,",
				"          ClientNo as long,",
				"          TaxNumber as string,",
				"          IDNumber as string,",
				"          Language as string,",
				"          ClientSurname as string,",
				"          ClientInitials as string,",
				"          FirstNames as string,",
				"          Title as string,",
				"          AddressLine1 as string,",
				"          AddressLine2 as string,",
				"          AddressLine3 as string,",
				"          AddressLine4 as string,",
				"          PostalCode as string,",
				"          ClientAccGrpNo as string,",
				"          AccGrpID as string,",
				"          MarketValue as double,",
				"          LocalEquity as double,",
				"          LocalProperty as double,",
				"          LocalCash as double,",
				"          LocalBond as double,",
				"          ForeignEquity as double,",
				"          ForeignProperty as double,",
				"          ForeignCash as double,",
				"          ForeignBond as double,",
				"          Equity as double,",
				"          Property as double,",
				"          Offshore as double,",
				"          Equity_Compliant as string,",
				"          Property_Compliant as string,",
				"          Offshore_Compliant as string,",
				"          Policy_Compliant as string,",
				"          GrandfatherStatus as string,",
				"          Reason as string,",
				"          GrandfatherToNonGrandfather as string,",
				"          QuarterAge as short,",
				"          TPACODE as short,",
				"          Processed as string,",
				"          AllFundsReg28Compliant as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Reg28QuarterlySource",
				"source(output(",
				"          StorePolicyId as long,",
				"          StorePolicyNumber as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StorePolicyId, PolicyNumber AS StorePolicyNumber FROM store.entity_all_policy',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> PolicyEntityTable",
				"source(output(",
				"          StoreProductId as long,",
				"          StoreProductCode as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'query',",
				"     store: 'sqlserver',",
				"     query: 'SELECT Id AS StoreProductId, ProductCode AS StoreProductCode FROM store.entity_all_product',",
				"     isolationLevel: 'READ_UNCOMMITTED') ~> ProductEntityTable",
				"Reg28QuarterlySource derive(BatchId = $BatchId,",
				"          Provider = \"PPS\",",
				"          DataSource = \"Reg28 Policy Quarterly Static Data\") ~> DerivedColumn",
				"ProductLookup assert(expectTrue(!isNull(ClientAccGrpNo) && !isNull(QuarterEndDate), false, 'IsValid', null, \"Check data validity\")) ~> ValidateData",
				"ValidateData derive(IsValid = !isError()) ~> DeriveValidColumn",
				"DeriveValidColumn filter(IsValid == false()) ~> FilterInvalidData",
				"DerivedColumn, PolicyEntityTable lookup(ClientAccGrpNo == StorePolicyNumber,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> PolicyLookup",
				"PolicyLookup, ProductEntityTable lookup(AccGrpID == StoreProductCode,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> ProductLookup",
				"DeriveValidColumn derive(Equity_Compliant_Bool = toBoolean(Equity_Compliant),",
				"          Property_Compliant_Bool = toBoolean(Property_Compliant),",
				"          Offshore_Compliant_Bool = toBoolean(Offshore_Compliant),",
				"          Policy_Compliant_Bool = toBoolean(Policy_Compliant),",
				"          GrandfatherStatus_Bool = toBoolean(GrandfatherStatus),",
				"          Processed_Bool = toBoolean(Processed),",
				"          AllFundsReg28Compliant_Bool = toBoolean(AllFundsReg28Compliant)) ~> ToBoolean",
				"FilterInvalidData sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'delimited',",
				"     container: 'sql',",
				"     folderPath: (concat('errors/', $FileDirectory)),",
				"     columnDelimiter: ',',",
				"     escapeChar: '\\\\',",
				"     quoteChar: '\\\"',",
				"     columnNamesAsHeader: false,",
				"     partitionFileNames:[($FileName)],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> ExportInvalidData",
				"ToBoolean sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          FundId as long,",
				"          PolicyId as long,",
				"          LoadId as long,",
				"          PolicyNumber as string,",
				"          PolicyTransactionNumber as long,",
				"          FeeCode as long,",
				"          FeeDescription as string,",
				"          FeePercentage as decimal(20,5),",
				"          FundTransactionNumber as long,",
				"          Amount as decimal(20,5),",
				"          ReversalIndicator as string,",
				"          OldTransactionNumber as string,",
				"          FactFundFeeTransactionKey as long,",
				"          ProductKey as long,",
				"          PolicyKey as long,",
				"          UnitHolderKey as long,",
				"          LoadKey as long,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          ProductId = StoreProductId,",
				"          PolicyId = StorePolicyId,",
				"          PolicyNumber = ClientAccGrpNo,",
				"          QuarterEndDate,",
				"          SourceDataQuarterEndDate,",
				"          ClientNo,",
				"          TaxNumber,",
				"          IDNumber,",
				"          Language,",
				"          ClientSurname,",
				"          ClientInitials,",
				"          FirstNames,",
				"          Title,",
				"          AddressLine1,",
				"          AddressLine2,",
				"          AddressLine3,",
				"          AddressLine4,",
				"          PostalCode,",
				"          MarketValue,",
				"          LocalEquity,",
				"          LocalProperty,",
				"          LocalCash,",
				"          LocalBond,",
				"          ForeignEquity,",
				"          ForeignProperty,",
				"          ForeignCash,",
				"          ForeignBond,",
				"          Equity,",
				"          Property,",
				"          Offshore,",
				"          Equity_Compliant = Equity_Compliant_Bool,",
				"          Property_Compliant = Property_Compliant_Bool,",
				"          Offshore_Compliant = Offshore_Compliant_Bool,",
				"          Policy_Compliant = Policy_Compliant_Bool,",
				"          GrandfatherStatus = GrandfatherStatus_Bool,",
				"          Reason,",
				"          GrandfatherToNonGrandfather,",
				"          QuarterAge,",
				"          TPACODE,",
				"          Processed = Processed_Bool,",
				"          AllFundsReg28Compliant = AllFundsReg28Compliant_Bool,",
				"          IsValid,",
				"          ForeignEquity = QuarterEndDate",
				"     ),",
				"     preCommands: [],",
				"     postCommands: []) ~> LoadToReg28QuarterlyStage"
			]
		}
	}
}