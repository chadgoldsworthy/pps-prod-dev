{
	"name": "edw_placeholder_policy_broker_dataflow",
	"properties": {
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "PolicBrokerSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_entity_stage_broker",
						"type": "DatasetReference"
					},
					"name": "LoadBrokerEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_policy",
						"type": "DatasetReference"
					},
					"name": "LoadPolicyEntity"
				}
			],
			"transformations": [
				{
					"name": "DeriveProductPlaceHolder"
				},
				{
					"name": "DerivePolicyPlaceHolder"
				},
				{
					"name": "AssertPolicy"
				},
				{
					"name": "AssertBroker"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string",
				"}",
				"source(output(",
				"          PolicyNumber as string,",
				"          BrokerCode as string,",
				"          RuleEffectiveDate as date,",
				"          SplitPercentage as short,",
				"          PolicyKey as integer,",
				"          BrokerKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PolicBrokerSource",
				"AssertBroker derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Broker Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveProductPlaceHolder",
				"AssertPolicy derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Broker Static Data\",",
				"          BatchId = $BatchId,",
				"          PolicyNumberCopy = PolicyNumber,",
				"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
				"PolicBrokerSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
				"PolicBrokerSource assert(expectTrue(!isNull(BrokerCode), false, 'AssertBroker')) ~> AssertBroker",
				"DeriveProductPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          BrokerCode as string,",
				"          BrokerageCode as string,",
				"          BrokerName as string,",
				"          IsValid as boolean,",
				"          Origin as string",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          BrokerCode",
				"     )) ~> LoadBrokerEntity",
				"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          PolicyNumber as string,",
				"          PolicyReferenceNumber as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          ClientId as long,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          IsValid,",
				"          Provider,",
				"          DataSource,",
				"          PolicyNumber,",
				"          PolicyReferenceNumber = PolicyNumberCopy,",
				"          CreatedDate = DateNow",
				"     )) ~> LoadPolicyEntity"
			]
		}
	}
}