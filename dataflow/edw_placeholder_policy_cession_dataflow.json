{
	"name": "edw_placeholder_policy_cession_dataflow",
	"properties": {
		"description": "PolicyId\nTransactionId\nUnitHolderFromId\nUnitHolderToId\n\n",
		"folder": {
			"name": "EDW"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "edw_source_file_extract",
						"type": "DatasetReference"
					},
					"name": "PolicyCessionSource"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "edw_entity_stage_policy",
						"type": "DatasetReference"
					},
					"name": "LoadPolicyEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_unit_holder",
						"type": "DatasetReference"
					},
					"name": "LoadFromUnitHolderEntity"
				},
				{
					"dataset": {
						"referenceName": "edw_entity_stage_unit_holder",
						"type": "DatasetReference"
					},
					"name": "LoadToUnitHolderEntity"
				}
			],
			"transformations": [
				{
					"name": "DerivePolicyPlaceHolder"
				},
				{
					"name": "DeriveFromUnitHolderPlaceholder"
				},
				{
					"name": "DeriveToUnitHolderPlaceholder"
				},
				{
					"name": "AssertPolicy"
				},
				{
					"name": "AssertUnitHolderFrom"
				},
				{
					"name": "AssertUnitHolderTo"
				}
			],
			"scriptLines": [
				"parameters{",
				"     BatchId as string",
				"}",
				"source(output(",
				"          CessionType as string,",
				"          Cessionary as string,",
				"          CessionDate as string,",
				"          TransactionNumber as string,",
				"          PolicyNumber as string,",
				"          CessionRemarks as string,",
				"          UnitHolderFromID as string,",
				"          UnitHolderToID as string,",
				"          RuleEffectiveDate as date,",
				"          PolicyKey as integer,",
				"          FromUnitHolderKey as integer,",
				"          ToUnitHolderKey as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PolicyCessionSource",
				"AssertPolicy derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Cession Static Data\",",
				"          BatchId = $BatchId,",
				"          PolicyNumberCopy = PolicyNumber,",
				"          DateNow = currentDate()) ~> DerivePolicyPlaceHolder",
				"AssertUnitHolderFrom derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Cession Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveFromUnitHolderPlaceholder",
				"AssertUnitHolderTo derive(IsValid = !isError(),",
				"          Provider = \"PPS\",",
				"          DataSource = \"Policy Cession Static Data\",",
				"          BatchId = $BatchId,",
				"          DateNow = currentDate()) ~> DeriveToUnitHolderPlaceholder",
				"PolicyCessionSource assert(expectTrue(!isNull(PolicyNumber), false, 'AssertPolicy')) ~> AssertPolicy",
				"PolicyCessionSource assert(expectTrue(!isNull(UnitHolderFromID), false, 'AssertUnitHolderFrom')) ~> AssertUnitHolderFrom",
				"PolicyCessionSource assert(expectTrue(!isNull(UnitHolderToID), false, 'AssertUnitHolderTo')) ~> AssertUnitHolderTo",
				"DerivePolicyPlaceHolder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          PolicyNumber as string,",
				"          PolicyReferenceNumber as string,",
				"          UnitHolderId as long,",
				"          ProductId as long,",
				"          ClientId as long,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          PolicyNumber,",
				"          PolicyReferenceNumber = PolicyNumberCopy,",
				"          CreatedDate = DateNow,",
				"          IsValid",
				"     )) ~> LoadPolicyEntity",
				"DeriveFromUnitHolderPlaceholder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderCode as string,",
				"          SAIDNumber as string,",
				"          UnitHolderName as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          UnitHolderCode = UnitHolderFromID,",
				"          CreatedDate = DateNow,",
				"          IsValid",
				"     )) ~> LoadFromUnitHolderEntity",
				"DeriveToUnitHolderPlaceholder sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          Id as long,",
				"          BatchId as string,",
				"          Provider as string,",
				"          DataSource as string,",
				"          UnitHolderCode as string,",
				"          SAIDNumber as string,",
				"          UnitHolderName as string,",
				"          CreatedDate as date,",
				"          IsValid as boolean",
				"     ),",
				"     deletable:false,",
				"     insertable:true,",
				"     updateable:false,",
				"     upsertable:false,",
				"     format: 'table',",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     errorHandlingOption: 'stopOnFirstError',",
				"     mapColumn(",
				"          BatchId,",
				"          Provider,",
				"          DataSource,",
				"          UnitHolderCode = UnitHolderToID,",
				"          CreatedDate = DateNow,",
				"          IsValid",
				"     )) ~> LoadToUnitHolderEntity"
			]
		}
	}
}